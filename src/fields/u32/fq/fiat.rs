//! Autogenerated: fiat_crypto.js word-by-word-montgomery --lang Rust fq 32 8444461749428370424248824938781546531375899335154063827935233455917409239041 --no-prefix-fiat --public-type-case PascalCase --private-type-case PascalCase
//! curve description: fq
//! machine_wordsize = 32 (from "32")
//! requested operations: (all)
//! m = 0x12ab655e9a2ca55660b44d1e5c37b00159aa76fed00000010a11800000000001 (from "8444461749428370424248824938781546531375899335154063827935233455917409239041")
//!
//! NOTE: In addition to the bounds specified above each function, all
//!   functions synthesized for this Montgomery arithmetic require the
//!   input to be strictly less than the prime modulus (m), and also
//!   require the input to be in the unique saturated representation.
//!   All functions also ensure that these two properties are true of
//!   return values.
//!
//! Computed values:
//!   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)
//!   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)
//!   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224) in
//!                            if x1 & (2^256-1) < 2^255 then x1 & (2^256-1) else (x1 & (2^256-1)) - 2^256

#![allow(unused_parens)]
#![allow(non_camel_case_types)]

/** FqU1 represents values of 1 bits, stored in one byte. */
pub type FqU1 = u8;
/** FqI1 represents values of 1 bits, stored in one byte. */
pub type FqI1 = i8;
/** FqU2 represents values of 2 bits, stored in one byte. */
pub type FqU2 = u8;
/** FqI2 represents values of 2 bits, stored in one byte. */
pub type FqI2 = i8;

/** The type FqMontgomeryDomainFieldElement is a field element in the Montgomery domain. */
/** Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]] */
#[derive(Clone, Copy)]
pub struct FqMontgomeryDomainFieldElement(pub [u32; 8]);

impl core::ops::Index<usize> for FqMontgomeryDomainFieldElement {
    type Output = u32;
    #[inline]
    fn index(&self, index: usize) -> &Self::Output {
        &self.0[index]
    }
}

impl core::ops::IndexMut<usize> for FqMontgomeryDomainFieldElement {
    #[inline]
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.0[index]
    }
}

/** The type FqNonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain. */
/** Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]] */
#[derive(Clone, Copy)]
pub struct FqNonMontgomeryDomainFieldElement(pub [u32; 8]);

impl core::ops::Index<usize> for FqNonMontgomeryDomainFieldElement {
    type Output = u32;
    #[inline]
    fn index(&self, index: usize) -> &Self::Output {
        &self.0[index]
    }
}

impl core::ops::IndexMut<usize> for FqNonMontgomeryDomainFieldElement {
    #[inline]
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.0[index]
    }
}

/// The function fq_addcarryx_u32 is an addition with carry.
///
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^32
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
pub fn fq_addcarryx_u32(out1: &mut u32, out2: &mut FqU1, arg1: FqU1, arg2: u32, arg3: u32) {
    let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
    let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
    let x3: FqU1 = ((x1 >> 32) as FqU1);
    *out1 = x2;
    *out2 = x3;
}

/// The function fq_subborrowx_u32 is a subtraction with borrow.
///
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^32
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
pub fn fq_subborrowx_u32(out1: &mut u32, out2: &mut FqU1, arg1: FqU1, arg2: u32, arg3: u32) {
    let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
    let x2: FqI1 = ((x1 >> 32) as FqI1);
    let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
    *out1 = x3;
    *out2 = (((0x0 as FqI2) - (x2 as FqI2)) as FqU1);
}

/// The function fq_mulx_u32 is a multiplication, returning the full double-width result.
///
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^32
///   out2 = ⌊arg1 * arg2 / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
pub fn fq_mulx_u32(out1: &mut u32, out2: &mut u32, arg1: u32, arg2: u32) {
    let x1: u64 = ((arg1 as u64) * (arg2 as u64));
    let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
    let x3: u32 = ((x1 >> 32) as u32);
    *out1 = x2;
    *out2 = x3;
}

/// The function fq_cmovznz_u32 is a single-word conditional move.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
pub fn fq_cmovznz_u32(out1: &mut u32, arg1: FqU1, arg2: u32, arg3: u32) {
    let x1: FqU1 = (!(!arg1));
    let x2: u32 =
        ((((((0x0 as FqI2) - (x1 as FqI2)) as FqI1) as i64) & (0xffffffff as i64)) as u32);
    let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
    *out1 = x3;
}

/// The function fq_mul multiplies two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
pub fn fq_mul(
    out1: &mut FqMontgomeryDomainFieldElement,
    arg1: &FqMontgomeryDomainFieldElement,
    arg2: &FqMontgomeryDomainFieldElement,
) {
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[6]);
    let x7: u32 = (arg1[7]);
    let x8: u32 = (arg1[0]);
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    fq_mulx_u32(&mut x9, &mut x10, x8, (arg2[7]));
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    fq_mulx_u32(&mut x11, &mut x12, x8, (arg2[6]));
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    fq_mulx_u32(&mut x13, &mut x14, x8, (arg2[5]));
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    fq_mulx_u32(&mut x15, &mut x16, x8, (arg2[4]));
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    fq_mulx_u32(&mut x17, &mut x18, x8, (arg2[3]));
    let mut x19: u32 = 0;
    let mut x20: u32 = 0;
    fq_mulx_u32(&mut x19, &mut x20, x8, (arg2[2]));
    let mut x21: u32 = 0;
    let mut x22: u32 = 0;
    fq_mulx_u32(&mut x21, &mut x22, x8, (arg2[1]));
    let mut x23: u32 = 0;
    let mut x24: u32 = 0;
    fq_mulx_u32(&mut x23, &mut x24, x8, (arg2[0]));
    let mut x25: u32 = 0;
    let mut x26: FqU1 = 0;
    fq_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
    let mut x27: u32 = 0;
    let mut x28: FqU1 = 0;
    fq_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
    let mut x29: u32 = 0;
    let mut x30: FqU1 = 0;
    fq_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
    let mut x31: u32 = 0;
    let mut x32: FqU1 = 0;
    fq_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
    let mut x33: u32 = 0;
    let mut x34: FqU1 = 0;
    fq_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
    let mut x35: u32 = 0;
    let mut x36: FqU1 = 0;
    fq_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
    let mut x37: u32 = 0;
    let mut x38: FqU1 = 0;
    fq_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
    let x39: u32 = ((x38 as u32) + x10);
    let mut x40: u32 = 0;
    let mut x41: u32 = 0;
    fq_mulx_u32(&mut x40, &mut x41, x23, 0xffffffff);
    let mut x42: u32 = 0;
    let mut x43: u32 = 0;
    fq_mulx_u32(&mut x42, &mut x43, x40, 0x12ab655e);
    let mut x44: u32 = 0;
    let mut x45: u32 = 0;
    fq_mulx_u32(&mut x44, &mut x45, x40, 0x9a2ca556);
    let mut x46: u32 = 0;
    let mut x47: u32 = 0;
    fq_mulx_u32(&mut x46, &mut x47, x40, 0x60b44d1e);
    let mut x48: u32 = 0;
    let mut x49: u32 = 0;
    fq_mulx_u32(&mut x48, &mut x49, x40, 0x5c37b001);
    let mut x50: u32 = 0;
    let mut x51: u32 = 0;
    fq_mulx_u32(&mut x50, &mut x51, x40, 0x59aa76fe);
    let mut x52: u32 = 0;
    let mut x53: u32 = 0;
    fq_mulx_u32(&mut x52, &mut x53, x40, 0xd0000001);
    let mut x54: u32 = 0;
    let mut x55: u32 = 0;
    fq_mulx_u32(&mut x54, &mut x55, x40, 0xa118000);
    let mut x56: u32 = 0;
    let mut x57: FqU1 = 0;
    fq_addcarryx_u32(&mut x56, &mut x57, 0x0, x55, x52);
    let mut x58: u32 = 0;
    let mut x59: FqU1 = 0;
    fq_addcarryx_u32(&mut x58, &mut x59, x57, x53, x50);
    let mut x60: u32 = 0;
    let mut x61: FqU1 = 0;
    fq_addcarryx_u32(&mut x60, &mut x61, x59, x51, x48);
    let mut x62: u32 = 0;
    let mut x63: FqU1 = 0;
    fq_addcarryx_u32(&mut x62, &mut x63, x61, x49, x46);
    let mut x64: u32 = 0;
    let mut x65: FqU1 = 0;
    fq_addcarryx_u32(&mut x64, &mut x65, x63, x47, x44);
    let mut x66: u32 = 0;
    let mut x67: FqU1 = 0;
    fq_addcarryx_u32(&mut x66, &mut x67, x65, x45, x42);
    let x68: u32 = ((x67 as u32) + x43);
    let mut x69: u32 = 0;
    let mut x70: FqU1 = 0;
    fq_addcarryx_u32(&mut x69, &mut x70, 0x0, x23, x40);
    let mut x71: u32 = 0;
    let mut x72: FqU1 = 0;
    fq_addcarryx_u32(&mut x71, &mut x72, x70, x25, x54);
    let mut x73: u32 = 0;
    let mut x74: FqU1 = 0;
    fq_addcarryx_u32(&mut x73, &mut x74, x72, x27, x56);
    let mut x75: u32 = 0;
    let mut x76: FqU1 = 0;
    fq_addcarryx_u32(&mut x75, &mut x76, x74, x29, x58);
    let mut x77: u32 = 0;
    let mut x78: FqU1 = 0;
    fq_addcarryx_u32(&mut x77, &mut x78, x76, x31, x60);
    let mut x79: u32 = 0;
    let mut x80: FqU1 = 0;
    fq_addcarryx_u32(&mut x79, &mut x80, x78, x33, x62);
    let mut x81: u32 = 0;
    let mut x82: FqU1 = 0;
    fq_addcarryx_u32(&mut x81, &mut x82, x80, x35, x64);
    let mut x83: u32 = 0;
    let mut x84: FqU1 = 0;
    fq_addcarryx_u32(&mut x83, &mut x84, x82, x37, x66);
    let mut x85: u32 = 0;
    let mut x86: FqU1 = 0;
    fq_addcarryx_u32(&mut x85, &mut x86, x84, x39, x68);
    let mut x87: u32 = 0;
    let mut x88: u32 = 0;
    fq_mulx_u32(&mut x87, &mut x88, x1, (arg2[7]));
    let mut x89: u32 = 0;
    let mut x90: u32 = 0;
    fq_mulx_u32(&mut x89, &mut x90, x1, (arg2[6]));
    let mut x91: u32 = 0;
    let mut x92: u32 = 0;
    fq_mulx_u32(&mut x91, &mut x92, x1, (arg2[5]));
    let mut x93: u32 = 0;
    let mut x94: u32 = 0;
    fq_mulx_u32(&mut x93, &mut x94, x1, (arg2[4]));
    let mut x95: u32 = 0;
    let mut x96: u32 = 0;
    fq_mulx_u32(&mut x95, &mut x96, x1, (arg2[3]));
    let mut x97: u32 = 0;
    let mut x98: u32 = 0;
    fq_mulx_u32(&mut x97, &mut x98, x1, (arg2[2]));
    let mut x99: u32 = 0;
    let mut x100: u32 = 0;
    fq_mulx_u32(&mut x99, &mut x100, x1, (arg2[1]));
    let mut x101: u32 = 0;
    let mut x102: u32 = 0;
    fq_mulx_u32(&mut x101, &mut x102, x1, (arg2[0]));
    let mut x103: u32 = 0;
    let mut x104: FqU1 = 0;
    fq_addcarryx_u32(&mut x103, &mut x104, 0x0, x102, x99);
    let mut x105: u32 = 0;
    let mut x106: FqU1 = 0;
    fq_addcarryx_u32(&mut x105, &mut x106, x104, x100, x97);
    let mut x107: u32 = 0;
    let mut x108: FqU1 = 0;
    fq_addcarryx_u32(&mut x107, &mut x108, x106, x98, x95);
    let mut x109: u32 = 0;
    let mut x110: FqU1 = 0;
    fq_addcarryx_u32(&mut x109, &mut x110, x108, x96, x93);
    let mut x111: u32 = 0;
    let mut x112: FqU1 = 0;
    fq_addcarryx_u32(&mut x111, &mut x112, x110, x94, x91);
    let mut x113: u32 = 0;
    let mut x114: FqU1 = 0;
    fq_addcarryx_u32(&mut x113, &mut x114, x112, x92, x89);
    let mut x115: u32 = 0;
    let mut x116: FqU1 = 0;
    fq_addcarryx_u32(&mut x115, &mut x116, x114, x90, x87);
    let x117: u32 = ((x116 as u32) + x88);
    let mut x118: u32 = 0;
    let mut x119: FqU1 = 0;
    fq_addcarryx_u32(&mut x118, &mut x119, 0x0, x71, x101);
    let mut x120: u32 = 0;
    let mut x121: FqU1 = 0;
    fq_addcarryx_u32(&mut x120, &mut x121, x119, x73, x103);
    let mut x122: u32 = 0;
    let mut x123: FqU1 = 0;
    fq_addcarryx_u32(&mut x122, &mut x123, x121, x75, x105);
    let mut x124: u32 = 0;
    let mut x125: FqU1 = 0;
    fq_addcarryx_u32(&mut x124, &mut x125, x123, x77, x107);
    let mut x126: u32 = 0;
    let mut x127: FqU1 = 0;
    fq_addcarryx_u32(&mut x126, &mut x127, x125, x79, x109);
    let mut x128: u32 = 0;
    let mut x129: FqU1 = 0;
    fq_addcarryx_u32(&mut x128, &mut x129, x127, x81, x111);
    let mut x130: u32 = 0;
    let mut x131: FqU1 = 0;
    fq_addcarryx_u32(&mut x130, &mut x131, x129, x83, x113);
    let mut x132: u32 = 0;
    let mut x133: FqU1 = 0;
    fq_addcarryx_u32(&mut x132, &mut x133, x131, x85, x115);
    let mut x134: u32 = 0;
    let mut x135: FqU1 = 0;
    fq_addcarryx_u32(&mut x134, &mut x135, x133, (x86 as u32), x117);
    let mut x136: u32 = 0;
    let mut x137: u32 = 0;
    fq_mulx_u32(&mut x136, &mut x137, x118, 0xffffffff);
    let mut x138: u32 = 0;
    let mut x139: u32 = 0;
    fq_mulx_u32(&mut x138, &mut x139, x136, 0x12ab655e);
    let mut x140: u32 = 0;
    let mut x141: u32 = 0;
    fq_mulx_u32(&mut x140, &mut x141, x136, 0x9a2ca556);
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    fq_mulx_u32(&mut x142, &mut x143, x136, 0x60b44d1e);
    let mut x144: u32 = 0;
    let mut x145: u32 = 0;
    fq_mulx_u32(&mut x144, &mut x145, x136, 0x5c37b001);
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    fq_mulx_u32(&mut x146, &mut x147, x136, 0x59aa76fe);
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    fq_mulx_u32(&mut x148, &mut x149, x136, 0xd0000001);
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    fq_mulx_u32(&mut x150, &mut x151, x136, 0xa118000);
    let mut x152: u32 = 0;
    let mut x153: FqU1 = 0;
    fq_addcarryx_u32(&mut x152, &mut x153, 0x0, x151, x148);
    let mut x154: u32 = 0;
    let mut x155: FqU1 = 0;
    fq_addcarryx_u32(&mut x154, &mut x155, x153, x149, x146);
    let mut x156: u32 = 0;
    let mut x157: FqU1 = 0;
    fq_addcarryx_u32(&mut x156, &mut x157, x155, x147, x144);
    let mut x158: u32 = 0;
    let mut x159: FqU1 = 0;
    fq_addcarryx_u32(&mut x158, &mut x159, x157, x145, x142);
    let mut x160: u32 = 0;
    let mut x161: FqU1 = 0;
    fq_addcarryx_u32(&mut x160, &mut x161, x159, x143, x140);
    let mut x162: u32 = 0;
    let mut x163: FqU1 = 0;
    fq_addcarryx_u32(&mut x162, &mut x163, x161, x141, x138);
    let x164: u32 = ((x163 as u32) + x139);
    let mut x165: u32 = 0;
    let mut x166: FqU1 = 0;
    fq_addcarryx_u32(&mut x165, &mut x166, 0x0, x118, x136);
    let mut x167: u32 = 0;
    let mut x168: FqU1 = 0;
    fq_addcarryx_u32(&mut x167, &mut x168, x166, x120, x150);
    let mut x169: u32 = 0;
    let mut x170: FqU1 = 0;
    fq_addcarryx_u32(&mut x169, &mut x170, x168, x122, x152);
    let mut x171: u32 = 0;
    let mut x172: FqU1 = 0;
    fq_addcarryx_u32(&mut x171, &mut x172, x170, x124, x154);
    let mut x173: u32 = 0;
    let mut x174: FqU1 = 0;
    fq_addcarryx_u32(&mut x173, &mut x174, x172, x126, x156);
    let mut x175: u32 = 0;
    let mut x176: FqU1 = 0;
    fq_addcarryx_u32(&mut x175, &mut x176, x174, x128, x158);
    let mut x177: u32 = 0;
    let mut x178: FqU1 = 0;
    fq_addcarryx_u32(&mut x177, &mut x178, x176, x130, x160);
    let mut x179: u32 = 0;
    let mut x180: FqU1 = 0;
    fq_addcarryx_u32(&mut x179, &mut x180, x178, x132, x162);
    let mut x181: u32 = 0;
    let mut x182: FqU1 = 0;
    fq_addcarryx_u32(&mut x181, &mut x182, x180, x134, x164);
    let x183: u32 = ((x182 as u32) + (x135 as u32));
    let mut x184: u32 = 0;
    let mut x185: u32 = 0;
    fq_mulx_u32(&mut x184, &mut x185, x2, (arg2[7]));
    let mut x186: u32 = 0;
    let mut x187: u32 = 0;
    fq_mulx_u32(&mut x186, &mut x187, x2, (arg2[6]));
    let mut x188: u32 = 0;
    let mut x189: u32 = 0;
    fq_mulx_u32(&mut x188, &mut x189, x2, (arg2[5]));
    let mut x190: u32 = 0;
    let mut x191: u32 = 0;
    fq_mulx_u32(&mut x190, &mut x191, x2, (arg2[4]));
    let mut x192: u32 = 0;
    let mut x193: u32 = 0;
    fq_mulx_u32(&mut x192, &mut x193, x2, (arg2[3]));
    let mut x194: u32 = 0;
    let mut x195: u32 = 0;
    fq_mulx_u32(&mut x194, &mut x195, x2, (arg2[2]));
    let mut x196: u32 = 0;
    let mut x197: u32 = 0;
    fq_mulx_u32(&mut x196, &mut x197, x2, (arg2[1]));
    let mut x198: u32 = 0;
    let mut x199: u32 = 0;
    fq_mulx_u32(&mut x198, &mut x199, x2, (arg2[0]));
    let mut x200: u32 = 0;
    let mut x201: FqU1 = 0;
    fq_addcarryx_u32(&mut x200, &mut x201, 0x0, x199, x196);
    let mut x202: u32 = 0;
    let mut x203: FqU1 = 0;
    fq_addcarryx_u32(&mut x202, &mut x203, x201, x197, x194);
    let mut x204: u32 = 0;
    let mut x205: FqU1 = 0;
    fq_addcarryx_u32(&mut x204, &mut x205, x203, x195, x192);
    let mut x206: u32 = 0;
    let mut x207: FqU1 = 0;
    fq_addcarryx_u32(&mut x206, &mut x207, x205, x193, x190);
    let mut x208: u32 = 0;
    let mut x209: FqU1 = 0;
    fq_addcarryx_u32(&mut x208, &mut x209, x207, x191, x188);
    let mut x210: u32 = 0;
    let mut x211: FqU1 = 0;
    fq_addcarryx_u32(&mut x210, &mut x211, x209, x189, x186);
    let mut x212: u32 = 0;
    let mut x213: FqU1 = 0;
    fq_addcarryx_u32(&mut x212, &mut x213, x211, x187, x184);
    let x214: u32 = ((x213 as u32) + x185);
    let mut x215: u32 = 0;
    let mut x216: FqU1 = 0;
    fq_addcarryx_u32(&mut x215, &mut x216, 0x0, x167, x198);
    let mut x217: u32 = 0;
    let mut x218: FqU1 = 0;
    fq_addcarryx_u32(&mut x217, &mut x218, x216, x169, x200);
    let mut x219: u32 = 0;
    let mut x220: FqU1 = 0;
    fq_addcarryx_u32(&mut x219, &mut x220, x218, x171, x202);
    let mut x221: u32 = 0;
    let mut x222: FqU1 = 0;
    fq_addcarryx_u32(&mut x221, &mut x222, x220, x173, x204);
    let mut x223: u32 = 0;
    let mut x224: FqU1 = 0;
    fq_addcarryx_u32(&mut x223, &mut x224, x222, x175, x206);
    let mut x225: u32 = 0;
    let mut x226: FqU1 = 0;
    fq_addcarryx_u32(&mut x225, &mut x226, x224, x177, x208);
    let mut x227: u32 = 0;
    let mut x228: FqU1 = 0;
    fq_addcarryx_u32(&mut x227, &mut x228, x226, x179, x210);
    let mut x229: u32 = 0;
    let mut x230: FqU1 = 0;
    fq_addcarryx_u32(&mut x229, &mut x230, x228, x181, x212);
    let mut x231: u32 = 0;
    let mut x232: FqU1 = 0;
    fq_addcarryx_u32(&mut x231, &mut x232, x230, x183, x214);
    let mut x233: u32 = 0;
    let mut x234: u32 = 0;
    fq_mulx_u32(&mut x233, &mut x234, x215, 0xffffffff);
    let mut x235: u32 = 0;
    let mut x236: u32 = 0;
    fq_mulx_u32(&mut x235, &mut x236, x233, 0x12ab655e);
    let mut x237: u32 = 0;
    let mut x238: u32 = 0;
    fq_mulx_u32(&mut x237, &mut x238, x233, 0x9a2ca556);
    let mut x239: u32 = 0;
    let mut x240: u32 = 0;
    fq_mulx_u32(&mut x239, &mut x240, x233, 0x60b44d1e);
    let mut x241: u32 = 0;
    let mut x242: u32 = 0;
    fq_mulx_u32(&mut x241, &mut x242, x233, 0x5c37b001);
    let mut x243: u32 = 0;
    let mut x244: u32 = 0;
    fq_mulx_u32(&mut x243, &mut x244, x233, 0x59aa76fe);
    let mut x245: u32 = 0;
    let mut x246: u32 = 0;
    fq_mulx_u32(&mut x245, &mut x246, x233, 0xd0000001);
    let mut x247: u32 = 0;
    let mut x248: u32 = 0;
    fq_mulx_u32(&mut x247, &mut x248, x233, 0xa118000);
    let mut x249: u32 = 0;
    let mut x250: FqU1 = 0;
    fq_addcarryx_u32(&mut x249, &mut x250, 0x0, x248, x245);
    let mut x251: u32 = 0;
    let mut x252: FqU1 = 0;
    fq_addcarryx_u32(&mut x251, &mut x252, x250, x246, x243);
    let mut x253: u32 = 0;
    let mut x254: FqU1 = 0;
    fq_addcarryx_u32(&mut x253, &mut x254, x252, x244, x241);
    let mut x255: u32 = 0;
    let mut x256: FqU1 = 0;
    fq_addcarryx_u32(&mut x255, &mut x256, x254, x242, x239);
    let mut x257: u32 = 0;
    let mut x258: FqU1 = 0;
    fq_addcarryx_u32(&mut x257, &mut x258, x256, x240, x237);
    let mut x259: u32 = 0;
    let mut x260: FqU1 = 0;
    fq_addcarryx_u32(&mut x259, &mut x260, x258, x238, x235);
    let x261: u32 = ((x260 as u32) + x236);
    let mut x262: u32 = 0;
    let mut x263: FqU1 = 0;
    fq_addcarryx_u32(&mut x262, &mut x263, 0x0, x215, x233);
    let mut x264: u32 = 0;
    let mut x265: FqU1 = 0;
    fq_addcarryx_u32(&mut x264, &mut x265, x263, x217, x247);
    let mut x266: u32 = 0;
    let mut x267: FqU1 = 0;
    fq_addcarryx_u32(&mut x266, &mut x267, x265, x219, x249);
    let mut x268: u32 = 0;
    let mut x269: FqU1 = 0;
    fq_addcarryx_u32(&mut x268, &mut x269, x267, x221, x251);
    let mut x270: u32 = 0;
    let mut x271: FqU1 = 0;
    fq_addcarryx_u32(&mut x270, &mut x271, x269, x223, x253);
    let mut x272: u32 = 0;
    let mut x273: FqU1 = 0;
    fq_addcarryx_u32(&mut x272, &mut x273, x271, x225, x255);
    let mut x274: u32 = 0;
    let mut x275: FqU1 = 0;
    fq_addcarryx_u32(&mut x274, &mut x275, x273, x227, x257);
    let mut x276: u32 = 0;
    let mut x277: FqU1 = 0;
    fq_addcarryx_u32(&mut x276, &mut x277, x275, x229, x259);
    let mut x278: u32 = 0;
    let mut x279: FqU1 = 0;
    fq_addcarryx_u32(&mut x278, &mut x279, x277, x231, x261);
    let x280: u32 = ((x279 as u32) + (x232 as u32));
    let mut x281: u32 = 0;
    let mut x282: u32 = 0;
    fq_mulx_u32(&mut x281, &mut x282, x3, (arg2[7]));
    let mut x283: u32 = 0;
    let mut x284: u32 = 0;
    fq_mulx_u32(&mut x283, &mut x284, x3, (arg2[6]));
    let mut x285: u32 = 0;
    let mut x286: u32 = 0;
    fq_mulx_u32(&mut x285, &mut x286, x3, (arg2[5]));
    let mut x287: u32 = 0;
    let mut x288: u32 = 0;
    fq_mulx_u32(&mut x287, &mut x288, x3, (arg2[4]));
    let mut x289: u32 = 0;
    let mut x290: u32 = 0;
    fq_mulx_u32(&mut x289, &mut x290, x3, (arg2[3]));
    let mut x291: u32 = 0;
    let mut x292: u32 = 0;
    fq_mulx_u32(&mut x291, &mut x292, x3, (arg2[2]));
    let mut x293: u32 = 0;
    let mut x294: u32 = 0;
    fq_mulx_u32(&mut x293, &mut x294, x3, (arg2[1]));
    let mut x295: u32 = 0;
    let mut x296: u32 = 0;
    fq_mulx_u32(&mut x295, &mut x296, x3, (arg2[0]));
    let mut x297: u32 = 0;
    let mut x298: FqU1 = 0;
    fq_addcarryx_u32(&mut x297, &mut x298, 0x0, x296, x293);
    let mut x299: u32 = 0;
    let mut x300: FqU1 = 0;
    fq_addcarryx_u32(&mut x299, &mut x300, x298, x294, x291);
    let mut x301: u32 = 0;
    let mut x302: FqU1 = 0;
    fq_addcarryx_u32(&mut x301, &mut x302, x300, x292, x289);
    let mut x303: u32 = 0;
    let mut x304: FqU1 = 0;
    fq_addcarryx_u32(&mut x303, &mut x304, x302, x290, x287);
    let mut x305: u32 = 0;
    let mut x306: FqU1 = 0;
    fq_addcarryx_u32(&mut x305, &mut x306, x304, x288, x285);
    let mut x307: u32 = 0;
    let mut x308: FqU1 = 0;
    fq_addcarryx_u32(&mut x307, &mut x308, x306, x286, x283);
    let mut x309: u32 = 0;
    let mut x310: FqU1 = 0;
    fq_addcarryx_u32(&mut x309, &mut x310, x308, x284, x281);
    let x311: u32 = ((x310 as u32) + x282);
    let mut x312: u32 = 0;
    let mut x313: FqU1 = 0;
    fq_addcarryx_u32(&mut x312, &mut x313, 0x0, x264, x295);
    let mut x314: u32 = 0;
    let mut x315: FqU1 = 0;
    fq_addcarryx_u32(&mut x314, &mut x315, x313, x266, x297);
    let mut x316: u32 = 0;
    let mut x317: FqU1 = 0;
    fq_addcarryx_u32(&mut x316, &mut x317, x315, x268, x299);
    let mut x318: u32 = 0;
    let mut x319: FqU1 = 0;
    fq_addcarryx_u32(&mut x318, &mut x319, x317, x270, x301);
    let mut x320: u32 = 0;
    let mut x321: FqU1 = 0;
    fq_addcarryx_u32(&mut x320, &mut x321, x319, x272, x303);
    let mut x322: u32 = 0;
    let mut x323: FqU1 = 0;
    fq_addcarryx_u32(&mut x322, &mut x323, x321, x274, x305);
    let mut x324: u32 = 0;
    let mut x325: FqU1 = 0;
    fq_addcarryx_u32(&mut x324, &mut x325, x323, x276, x307);
    let mut x326: u32 = 0;
    let mut x327: FqU1 = 0;
    fq_addcarryx_u32(&mut x326, &mut x327, x325, x278, x309);
    let mut x328: u32 = 0;
    let mut x329: FqU1 = 0;
    fq_addcarryx_u32(&mut x328, &mut x329, x327, x280, x311);
    let mut x330: u32 = 0;
    let mut x331: u32 = 0;
    fq_mulx_u32(&mut x330, &mut x331, x312, 0xffffffff);
    let mut x332: u32 = 0;
    let mut x333: u32 = 0;
    fq_mulx_u32(&mut x332, &mut x333, x330, 0x12ab655e);
    let mut x334: u32 = 0;
    let mut x335: u32 = 0;
    fq_mulx_u32(&mut x334, &mut x335, x330, 0x9a2ca556);
    let mut x336: u32 = 0;
    let mut x337: u32 = 0;
    fq_mulx_u32(&mut x336, &mut x337, x330, 0x60b44d1e);
    let mut x338: u32 = 0;
    let mut x339: u32 = 0;
    fq_mulx_u32(&mut x338, &mut x339, x330, 0x5c37b001);
    let mut x340: u32 = 0;
    let mut x341: u32 = 0;
    fq_mulx_u32(&mut x340, &mut x341, x330, 0x59aa76fe);
    let mut x342: u32 = 0;
    let mut x343: u32 = 0;
    fq_mulx_u32(&mut x342, &mut x343, x330, 0xd0000001);
    let mut x344: u32 = 0;
    let mut x345: u32 = 0;
    fq_mulx_u32(&mut x344, &mut x345, x330, 0xa118000);
    let mut x346: u32 = 0;
    let mut x347: FqU1 = 0;
    fq_addcarryx_u32(&mut x346, &mut x347, 0x0, x345, x342);
    let mut x348: u32 = 0;
    let mut x349: FqU1 = 0;
    fq_addcarryx_u32(&mut x348, &mut x349, x347, x343, x340);
    let mut x350: u32 = 0;
    let mut x351: FqU1 = 0;
    fq_addcarryx_u32(&mut x350, &mut x351, x349, x341, x338);
    let mut x352: u32 = 0;
    let mut x353: FqU1 = 0;
    fq_addcarryx_u32(&mut x352, &mut x353, x351, x339, x336);
    let mut x354: u32 = 0;
    let mut x355: FqU1 = 0;
    fq_addcarryx_u32(&mut x354, &mut x355, x353, x337, x334);
    let mut x356: u32 = 0;
    let mut x357: FqU1 = 0;
    fq_addcarryx_u32(&mut x356, &mut x357, x355, x335, x332);
    let x358: u32 = ((x357 as u32) + x333);
    let mut x359: u32 = 0;
    let mut x360: FqU1 = 0;
    fq_addcarryx_u32(&mut x359, &mut x360, 0x0, x312, x330);
    let mut x361: u32 = 0;
    let mut x362: FqU1 = 0;
    fq_addcarryx_u32(&mut x361, &mut x362, x360, x314, x344);
    let mut x363: u32 = 0;
    let mut x364: FqU1 = 0;
    fq_addcarryx_u32(&mut x363, &mut x364, x362, x316, x346);
    let mut x365: u32 = 0;
    let mut x366: FqU1 = 0;
    fq_addcarryx_u32(&mut x365, &mut x366, x364, x318, x348);
    let mut x367: u32 = 0;
    let mut x368: FqU1 = 0;
    fq_addcarryx_u32(&mut x367, &mut x368, x366, x320, x350);
    let mut x369: u32 = 0;
    let mut x370: FqU1 = 0;
    fq_addcarryx_u32(&mut x369, &mut x370, x368, x322, x352);
    let mut x371: u32 = 0;
    let mut x372: FqU1 = 0;
    fq_addcarryx_u32(&mut x371, &mut x372, x370, x324, x354);
    let mut x373: u32 = 0;
    let mut x374: FqU1 = 0;
    fq_addcarryx_u32(&mut x373, &mut x374, x372, x326, x356);
    let mut x375: u32 = 0;
    let mut x376: FqU1 = 0;
    fq_addcarryx_u32(&mut x375, &mut x376, x374, x328, x358);
    let x377: u32 = ((x376 as u32) + (x329 as u32));
    let mut x378: u32 = 0;
    let mut x379: u32 = 0;
    fq_mulx_u32(&mut x378, &mut x379, x4, (arg2[7]));
    let mut x380: u32 = 0;
    let mut x381: u32 = 0;
    fq_mulx_u32(&mut x380, &mut x381, x4, (arg2[6]));
    let mut x382: u32 = 0;
    let mut x383: u32 = 0;
    fq_mulx_u32(&mut x382, &mut x383, x4, (arg2[5]));
    let mut x384: u32 = 0;
    let mut x385: u32 = 0;
    fq_mulx_u32(&mut x384, &mut x385, x4, (arg2[4]));
    let mut x386: u32 = 0;
    let mut x387: u32 = 0;
    fq_mulx_u32(&mut x386, &mut x387, x4, (arg2[3]));
    let mut x388: u32 = 0;
    let mut x389: u32 = 0;
    fq_mulx_u32(&mut x388, &mut x389, x4, (arg2[2]));
    let mut x390: u32 = 0;
    let mut x391: u32 = 0;
    fq_mulx_u32(&mut x390, &mut x391, x4, (arg2[1]));
    let mut x392: u32 = 0;
    let mut x393: u32 = 0;
    fq_mulx_u32(&mut x392, &mut x393, x4, (arg2[0]));
    let mut x394: u32 = 0;
    let mut x395: FqU1 = 0;
    fq_addcarryx_u32(&mut x394, &mut x395, 0x0, x393, x390);
    let mut x396: u32 = 0;
    let mut x397: FqU1 = 0;
    fq_addcarryx_u32(&mut x396, &mut x397, x395, x391, x388);
    let mut x398: u32 = 0;
    let mut x399: FqU1 = 0;
    fq_addcarryx_u32(&mut x398, &mut x399, x397, x389, x386);
    let mut x400: u32 = 0;
    let mut x401: FqU1 = 0;
    fq_addcarryx_u32(&mut x400, &mut x401, x399, x387, x384);
    let mut x402: u32 = 0;
    let mut x403: FqU1 = 0;
    fq_addcarryx_u32(&mut x402, &mut x403, x401, x385, x382);
    let mut x404: u32 = 0;
    let mut x405: FqU1 = 0;
    fq_addcarryx_u32(&mut x404, &mut x405, x403, x383, x380);
    let mut x406: u32 = 0;
    let mut x407: FqU1 = 0;
    fq_addcarryx_u32(&mut x406, &mut x407, x405, x381, x378);
    let x408: u32 = ((x407 as u32) + x379);
    let mut x409: u32 = 0;
    let mut x410: FqU1 = 0;
    fq_addcarryx_u32(&mut x409, &mut x410, 0x0, x361, x392);
    let mut x411: u32 = 0;
    let mut x412: FqU1 = 0;
    fq_addcarryx_u32(&mut x411, &mut x412, x410, x363, x394);
    let mut x413: u32 = 0;
    let mut x414: FqU1 = 0;
    fq_addcarryx_u32(&mut x413, &mut x414, x412, x365, x396);
    let mut x415: u32 = 0;
    let mut x416: FqU1 = 0;
    fq_addcarryx_u32(&mut x415, &mut x416, x414, x367, x398);
    let mut x417: u32 = 0;
    let mut x418: FqU1 = 0;
    fq_addcarryx_u32(&mut x417, &mut x418, x416, x369, x400);
    let mut x419: u32 = 0;
    let mut x420: FqU1 = 0;
    fq_addcarryx_u32(&mut x419, &mut x420, x418, x371, x402);
    let mut x421: u32 = 0;
    let mut x422: FqU1 = 0;
    fq_addcarryx_u32(&mut x421, &mut x422, x420, x373, x404);
    let mut x423: u32 = 0;
    let mut x424: FqU1 = 0;
    fq_addcarryx_u32(&mut x423, &mut x424, x422, x375, x406);
    let mut x425: u32 = 0;
    let mut x426: FqU1 = 0;
    fq_addcarryx_u32(&mut x425, &mut x426, x424, x377, x408);
    let mut x427: u32 = 0;
    let mut x428: u32 = 0;
    fq_mulx_u32(&mut x427, &mut x428, x409, 0xffffffff);
    let mut x429: u32 = 0;
    let mut x430: u32 = 0;
    fq_mulx_u32(&mut x429, &mut x430, x427, 0x12ab655e);
    let mut x431: u32 = 0;
    let mut x432: u32 = 0;
    fq_mulx_u32(&mut x431, &mut x432, x427, 0x9a2ca556);
    let mut x433: u32 = 0;
    let mut x434: u32 = 0;
    fq_mulx_u32(&mut x433, &mut x434, x427, 0x60b44d1e);
    let mut x435: u32 = 0;
    let mut x436: u32 = 0;
    fq_mulx_u32(&mut x435, &mut x436, x427, 0x5c37b001);
    let mut x437: u32 = 0;
    let mut x438: u32 = 0;
    fq_mulx_u32(&mut x437, &mut x438, x427, 0x59aa76fe);
    let mut x439: u32 = 0;
    let mut x440: u32 = 0;
    fq_mulx_u32(&mut x439, &mut x440, x427, 0xd0000001);
    let mut x441: u32 = 0;
    let mut x442: u32 = 0;
    fq_mulx_u32(&mut x441, &mut x442, x427, 0xa118000);
    let mut x443: u32 = 0;
    let mut x444: FqU1 = 0;
    fq_addcarryx_u32(&mut x443, &mut x444, 0x0, x442, x439);
    let mut x445: u32 = 0;
    let mut x446: FqU1 = 0;
    fq_addcarryx_u32(&mut x445, &mut x446, x444, x440, x437);
    let mut x447: u32 = 0;
    let mut x448: FqU1 = 0;
    fq_addcarryx_u32(&mut x447, &mut x448, x446, x438, x435);
    let mut x449: u32 = 0;
    let mut x450: FqU1 = 0;
    fq_addcarryx_u32(&mut x449, &mut x450, x448, x436, x433);
    let mut x451: u32 = 0;
    let mut x452: FqU1 = 0;
    fq_addcarryx_u32(&mut x451, &mut x452, x450, x434, x431);
    let mut x453: u32 = 0;
    let mut x454: FqU1 = 0;
    fq_addcarryx_u32(&mut x453, &mut x454, x452, x432, x429);
    let x455: u32 = ((x454 as u32) + x430);
    let mut x456: u32 = 0;
    let mut x457: FqU1 = 0;
    fq_addcarryx_u32(&mut x456, &mut x457, 0x0, x409, x427);
    let mut x458: u32 = 0;
    let mut x459: FqU1 = 0;
    fq_addcarryx_u32(&mut x458, &mut x459, x457, x411, x441);
    let mut x460: u32 = 0;
    let mut x461: FqU1 = 0;
    fq_addcarryx_u32(&mut x460, &mut x461, x459, x413, x443);
    let mut x462: u32 = 0;
    let mut x463: FqU1 = 0;
    fq_addcarryx_u32(&mut x462, &mut x463, x461, x415, x445);
    let mut x464: u32 = 0;
    let mut x465: FqU1 = 0;
    fq_addcarryx_u32(&mut x464, &mut x465, x463, x417, x447);
    let mut x466: u32 = 0;
    let mut x467: FqU1 = 0;
    fq_addcarryx_u32(&mut x466, &mut x467, x465, x419, x449);
    let mut x468: u32 = 0;
    let mut x469: FqU1 = 0;
    fq_addcarryx_u32(&mut x468, &mut x469, x467, x421, x451);
    let mut x470: u32 = 0;
    let mut x471: FqU1 = 0;
    fq_addcarryx_u32(&mut x470, &mut x471, x469, x423, x453);
    let mut x472: u32 = 0;
    let mut x473: FqU1 = 0;
    fq_addcarryx_u32(&mut x472, &mut x473, x471, x425, x455);
    let x474: u32 = ((x473 as u32) + (x426 as u32));
    let mut x475: u32 = 0;
    let mut x476: u32 = 0;
    fq_mulx_u32(&mut x475, &mut x476, x5, (arg2[7]));
    let mut x477: u32 = 0;
    let mut x478: u32 = 0;
    fq_mulx_u32(&mut x477, &mut x478, x5, (arg2[6]));
    let mut x479: u32 = 0;
    let mut x480: u32 = 0;
    fq_mulx_u32(&mut x479, &mut x480, x5, (arg2[5]));
    let mut x481: u32 = 0;
    let mut x482: u32 = 0;
    fq_mulx_u32(&mut x481, &mut x482, x5, (arg2[4]));
    let mut x483: u32 = 0;
    let mut x484: u32 = 0;
    fq_mulx_u32(&mut x483, &mut x484, x5, (arg2[3]));
    let mut x485: u32 = 0;
    let mut x486: u32 = 0;
    fq_mulx_u32(&mut x485, &mut x486, x5, (arg2[2]));
    let mut x487: u32 = 0;
    let mut x488: u32 = 0;
    fq_mulx_u32(&mut x487, &mut x488, x5, (arg2[1]));
    let mut x489: u32 = 0;
    let mut x490: u32 = 0;
    fq_mulx_u32(&mut x489, &mut x490, x5, (arg2[0]));
    let mut x491: u32 = 0;
    let mut x492: FqU1 = 0;
    fq_addcarryx_u32(&mut x491, &mut x492, 0x0, x490, x487);
    let mut x493: u32 = 0;
    let mut x494: FqU1 = 0;
    fq_addcarryx_u32(&mut x493, &mut x494, x492, x488, x485);
    let mut x495: u32 = 0;
    let mut x496: FqU1 = 0;
    fq_addcarryx_u32(&mut x495, &mut x496, x494, x486, x483);
    let mut x497: u32 = 0;
    let mut x498: FqU1 = 0;
    fq_addcarryx_u32(&mut x497, &mut x498, x496, x484, x481);
    let mut x499: u32 = 0;
    let mut x500: FqU1 = 0;
    fq_addcarryx_u32(&mut x499, &mut x500, x498, x482, x479);
    let mut x501: u32 = 0;
    let mut x502: FqU1 = 0;
    fq_addcarryx_u32(&mut x501, &mut x502, x500, x480, x477);
    let mut x503: u32 = 0;
    let mut x504: FqU1 = 0;
    fq_addcarryx_u32(&mut x503, &mut x504, x502, x478, x475);
    let x505: u32 = ((x504 as u32) + x476);
    let mut x506: u32 = 0;
    let mut x507: FqU1 = 0;
    fq_addcarryx_u32(&mut x506, &mut x507, 0x0, x458, x489);
    let mut x508: u32 = 0;
    let mut x509: FqU1 = 0;
    fq_addcarryx_u32(&mut x508, &mut x509, x507, x460, x491);
    let mut x510: u32 = 0;
    let mut x511: FqU1 = 0;
    fq_addcarryx_u32(&mut x510, &mut x511, x509, x462, x493);
    let mut x512: u32 = 0;
    let mut x513: FqU1 = 0;
    fq_addcarryx_u32(&mut x512, &mut x513, x511, x464, x495);
    let mut x514: u32 = 0;
    let mut x515: FqU1 = 0;
    fq_addcarryx_u32(&mut x514, &mut x515, x513, x466, x497);
    let mut x516: u32 = 0;
    let mut x517: FqU1 = 0;
    fq_addcarryx_u32(&mut x516, &mut x517, x515, x468, x499);
    let mut x518: u32 = 0;
    let mut x519: FqU1 = 0;
    fq_addcarryx_u32(&mut x518, &mut x519, x517, x470, x501);
    let mut x520: u32 = 0;
    let mut x521: FqU1 = 0;
    fq_addcarryx_u32(&mut x520, &mut x521, x519, x472, x503);
    let mut x522: u32 = 0;
    let mut x523: FqU1 = 0;
    fq_addcarryx_u32(&mut x522, &mut x523, x521, x474, x505);
    let mut x524: u32 = 0;
    let mut x525: u32 = 0;
    fq_mulx_u32(&mut x524, &mut x525, x506, 0xffffffff);
    let mut x526: u32 = 0;
    let mut x527: u32 = 0;
    fq_mulx_u32(&mut x526, &mut x527, x524, 0x12ab655e);
    let mut x528: u32 = 0;
    let mut x529: u32 = 0;
    fq_mulx_u32(&mut x528, &mut x529, x524, 0x9a2ca556);
    let mut x530: u32 = 0;
    let mut x531: u32 = 0;
    fq_mulx_u32(&mut x530, &mut x531, x524, 0x60b44d1e);
    let mut x532: u32 = 0;
    let mut x533: u32 = 0;
    fq_mulx_u32(&mut x532, &mut x533, x524, 0x5c37b001);
    let mut x534: u32 = 0;
    let mut x535: u32 = 0;
    fq_mulx_u32(&mut x534, &mut x535, x524, 0x59aa76fe);
    let mut x536: u32 = 0;
    let mut x537: u32 = 0;
    fq_mulx_u32(&mut x536, &mut x537, x524, 0xd0000001);
    let mut x538: u32 = 0;
    let mut x539: u32 = 0;
    fq_mulx_u32(&mut x538, &mut x539, x524, 0xa118000);
    let mut x540: u32 = 0;
    let mut x541: FqU1 = 0;
    fq_addcarryx_u32(&mut x540, &mut x541, 0x0, x539, x536);
    let mut x542: u32 = 0;
    let mut x543: FqU1 = 0;
    fq_addcarryx_u32(&mut x542, &mut x543, x541, x537, x534);
    let mut x544: u32 = 0;
    let mut x545: FqU1 = 0;
    fq_addcarryx_u32(&mut x544, &mut x545, x543, x535, x532);
    let mut x546: u32 = 0;
    let mut x547: FqU1 = 0;
    fq_addcarryx_u32(&mut x546, &mut x547, x545, x533, x530);
    let mut x548: u32 = 0;
    let mut x549: FqU1 = 0;
    fq_addcarryx_u32(&mut x548, &mut x549, x547, x531, x528);
    let mut x550: u32 = 0;
    let mut x551: FqU1 = 0;
    fq_addcarryx_u32(&mut x550, &mut x551, x549, x529, x526);
    let x552: u32 = ((x551 as u32) + x527);
    let mut x553: u32 = 0;
    let mut x554: FqU1 = 0;
    fq_addcarryx_u32(&mut x553, &mut x554, 0x0, x506, x524);
    let mut x555: u32 = 0;
    let mut x556: FqU1 = 0;
    fq_addcarryx_u32(&mut x555, &mut x556, x554, x508, x538);
    let mut x557: u32 = 0;
    let mut x558: FqU1 = 0;
    fq_addcarryx_u32(&mut x557, &mut x558, x556, x510, x540);
    let mut x559: u32 = 0;
    let mut x560: FqU1 = 0;
    fq_addcarryx_u32(&mut x559, &mut x560, x558, x512, x542);
    let mut x561: u32 = 0;
    let mut x562: FqU1 = 0;
    fq_addcarryx_u32(&mut x561, &mut x562, x560, x514, x544);
    let mut x563: u32 = 0;
    let mut x564: FqU1 = 0;
    fq_addcarryx_u32(&mut x563, &mut x564, x562, x516, x546);
    let mut x565: u32 = 0;
    let mut x566: FqU1 = 0;
    fq_addcarryx_u32(&mut x565, &mut x566, x564, x518, x548);
    let mut x567: u32 = 0;
    let mut x568: FqU1 = 0;
    fq_addcarryx_u32(&mut x567, &mut x568, x566, x520, x550);
    let mut x569: u32 = 0;
    let mut x570: FqU1 = 0;
    fq_addcarryx_u32(&mut x569, &mut x570, x568, x522, x552);
    let x571: u32 = ((x570 as u32) + (x523 as u32));
    let mut x572: u32 = 0;
    let mut x573: u32 = 0;
    fq_mulx_u32(&mut x572, &mut x573, x6, (arg2[7]));
    let mut x574: u32 = 0;
    let mut x575: u32 = 0;
    fq_mulx_u32(&mut x574, &mut x575, x6, (arg2[6]));
    let mut x576: u32 = 0;
    let mut x577: u32 = 0;
    fq_mulx_u32(&mut x576, &mut x577, x6, (arg2[5]));
    let mut x578: u32 = 0;
    let mut x579: u32 = 0;
    fq_mulx_u32(&mut x578, &mut x579, x6, (arg2[4]));
    let mut x580: u32 = 0;
    let mut x581: u32 = 0;
    fq_mulx_u32(&mut x580, &mut x581, x6, (arg2[3]));
    let mut x582: u32 = 0;
    let mut x583: u32 = 0;
    fq_mulx_u32(&mut x582, &mut x583, x6, (arg2[2]));
    let mut x584: u32 = 0;
    let mut x585: u32 = 0;
    fq_mulx_u32(&mut x584, &mut x585, x6, (arg2[1]));
    let mut x586: u32 = 0;
    let mut x587: u32 = 0;
    fq_mulx_u32(&mut x586, &mut x587, x6, (arg2[0]));
    let mut x588: u32 = 0;
    let mut x589: FqU1 = 0;
    fq_addcarryx_u32(&mut x588, &mut x589, 0x0, x587, x584);
    let mut x590: u32 = 0;
    let mut x591: FqU1 = 0;
    fq_addcarryx_u32(&mut x590, &mut x591, x589, x585, x582);
    let mut x592: u32 = 0;
    let mut x593: FqU1 = 0;
    fq_addcarryx_u32(&mut x592, &mut x593, x591, x583, x580);
    let mut x594: u32 = 0;
    let mut x595: FqU1 = 0;
    fq_addcarryx_u32(&mut x594, &mut x595, x593, x581, x578);
    let mut x596: u32 = 0;
    let mut x597: FqU1 = 0;
    fq_addcarryx_u32(&mut x596, &mut x597, x595, x579, x576);
    let mut x598: u32 = 0;
    let mut x599: FqU1 = 0;
    fq_addcarryx_u32(&mut x598, &mut x599, x597, x577, x574);
    let mut x600: u32 = 0;
    let mut x601: FqU1 = 0;
    fq_addcarryx_u32(&mut x600, &mut x601, x599, x575, x572);
    let x602: u32 = ((x601 as u32) + x573);
    let mut x603: u32 = 0;
    let mut x604: FqU1 = 0;
    fq_addcarryx_u32(&mut x603, &mut x604, 0x0, x555, x586);
    let mut x605: u32 = 0;
    let mut x606: FqU1 = 0;
    fq_addcarryx_u32(&mut x605, &mut x606, x604, x557, x588);
    let mut x607: u32 = 0;
    let mut x608: FqU1 = 0;
    fq_addcarryx_u32(&mut x607, &mut x608, x606, x559, x590);
    let mut x609: u32 = 0;
    let mut x610: FqU1 = 0;
    fq_addcarryx_u32(&mut x609, &mut x610, x608, x561, x592);
    let mut x611: u32 = 0;
    let mut x612: FqU1 = 0;
    fq_addcarryx_u32(&mut x611, &mut x612, x610, x563, x594);
    let mut x613: u32 = 0;
    let mut x614: FqU1 = 0;
    fq_addcarryx_u32(&mut x613, &mut x614, x612, x565, x596);
    let mut x615: u32 = 0;
    let mut x616: FqU1 = 0;
    fq_addcarryx_u32(&mut x615, &mut x616, x614, x567, x598);
    let mut x617: u32 = 0;
    let mut x618: FqU1 = 0;
    fq_addcarryx_u32(&mut x617, &mut x618, x616, x569, x600);
    let mut x619: u32 = 0;
    let mut x620: FqU1 = 0;
    fq_addcarryx_u32(&mut x619, &mut x620, x618, x571, x602);
    let mut x621: u32 = 0;
    let mut x622: u32 = 0;
    fq_mulx_u32(&mut x621, &mut x622, x603, 0xffffffff);
    let mut x623: u32 = 0;
    let mut x624: u32 = 0;
    fq_mulx_u32(&mut x623, &mut x624, x621, 0x12ab655e);
    let mut x625: u32 = 0;
    let mut x626: u32 = 0;
    fq_mulx_u32(&mut x625, &mut x626, x621, 0x9a2ca556);
    let mut x627: u32 = 0;
    let mut x628: u32 = 0;
    fq_mulx_u32(&mut x627, &mut x628, x621, 0x60b44d1e);
    let mut x629: u32 = 0;
    let mut x630: u32 = 0;
    fq_mulx_u32(&mut x629, &mut x630, x621, 0x5c37b001);
    let mut x631: u32 = 0;
    let mut x632: u32 = 0;
    fq_mulx_u32(&mut x631, &mut x632, x621, 0x59aa76fe);
    let mut x633: u32 = 0;
    let mut x634: u32 = 0;
    fq_mulx_u32(&mut x633, &mut x634, x621, 0xd0000001);
    let mut x635: u32 = 0;
    let mut x636: u32 = 0;
    fq_mulx_u32(&mut x635, &mut x636, x621, 0xa118000);
    let mut x637: u32 = 0;
    let mut x638: FqU1 = 0;
    fq_addcarryx_u32(&mut x637, &mut x638, 0x0, x636, x633);
    let mut x639: u32 = 0;
    let mut x640: FqU1 = 0;
    fq_addcarryx_u32(&mut x639, &mut x640, x638, x634, x631);
    let mut x641: u32 = 0;
    let mut x642: FqU1 = 0;
    fq_addcarryx_u32(&mut x641, &mut x642, x640, x632, x629);
    let mut x643: u32 = 0;
    let mut x644: FqU1 = 0;
    fq_addcarryx_u32(&mut x643, &mut x644, x642, x630, x627);
    let mut x645: u32 = 0;
    let mut x646: FqU1 = 0;
    fq_addcarryx_u32(&mut x645, &mut x646, x644, x628, x625);
    let mut x647: u32 = 0;
    let mut x648: FqU1 = 0;
    fq_addcarryx_u32(&mut x647, &mut x648, x646, x626, x623);
    let x649: u32 = ((x648 as u32) + x624);
    let mut x650: u32 = 0;
    let mut x651: FqU1 = 0;
    fq_addcarryx_u32(&mut x650, &mut x651, 0x0, x603, x621);
    let mut x652: u32 = 0;
    let mut x653: FqU1 = 0;
    fq_addcarryx_u32(&mut x652, &mut x653, x651, x605, x635);
    let mut x654: u32 = 0;
    let mut x655: FqU1 = 0;
    fq_addcarryx_u32(&mut x654, &mut x655, x653, x607, x637);
    let mut x656: u32 = 0;
    let mut x657: FqU1 = 0;
    fq_addcarryx_u32(&mut x656, &mut x657, x655, x609, x639);
    let mut x658: u32 = 0;
    let mut x659: FqU1 = 0;
    fq_addcarryx_u32(&mut x658, &mut x659, x657, x611, x641);
    let mut x660: u32 = 0;
    let mut x661: FqU1 = 0;
    fq_addcarryx_u32(&mut x660, &mut x661, x659, x613, x643);
    let mut x662: u32 = 0;
    let mut x663: FqU1 = 0;
    fq_addcarryx_u32(&mut x662, &mut x663, x661, x615, x645);
    let mut x664: u32 = 0;
    let mut x665: FqU1 = 0;
    fq_addcarryx_u32(&mut x664, &mut x665, x663, x617, x647);
    let mut x666: u32 = 0;
    let mut x667: FqU1 = 0;
    fq_addcarryx_u32(&mut x666, &mut x667, x665, x619, x649);
    let x668: u32 = ((x667 as u32) + (x620 as u32));
    let mut x669: u32 = 0;
    let mut x670: u32 = 0;
    fq_mulx_u32(&mut x669, &mut x670, x7, (arg2[7]));
    let mut x671: u32 = 0;
    let mut x672: u32 = 0;
    fq_mulx_u32(&mut x671, &mut x672, x7, (arg2[6]));
    let mut x673: u32 = 0;
    let mut x674: u32 = 0;
    fq_mulx_u32(&mut x673, &mut x674, x7, (arg2[5]));
    let mut x675: u32 = 0;
    let mut x676: u32 = 0;
    fq_mulx_u32(&mut x675, &mut x676, x7, (arg2[4]));
    let mut x677: u32 = 0;
    let mut x678: u32 = 0;
    fq_mulx_u32(&mut x677, &mut x678, x7, (arg2[3]));
    let mut x679: u32 = 0;
    let mut x680: u32 = 0;
    fq_mulx_u32(&mut x679, &mut x680, x7, (arg2[2]));
    let mut x681: u32 = 0;
    let mut x682: u32 = 0;
    fq_mulx_u32(&mut x681, &mut x682, x7, (arg2[1]));
    let mut x683: u32 = 0;
    let mut x684: u32 = 0;
    fq_mulx_u32(&mut x683, &mut x684, x7, (arg2[0]));
    let mut x685: u32 = 0;
    let mut x686: FqU1 = 0;
    fq_addcarryx_u32(&mut x685, &mut x686, 0x0, x684, x681);
    let mut x687: u32 = 0;
    let mut x688: FqU1 = 0;
    fq_addcarryx_u32(&mut x687, &mut x688, x686, x682, x679);
    let mut x689: u32 = 0;
    let mut x690: FqU1 = 0;
    fq_addcarryx_u32(&mut x689, &mut x690, x688, x680, x677);
    let mut x691: u32 = 0;
    let mut x692: FqU1 = 0;
    fq_addcarryx_u32(&mut x691, &mut x692, x690, x678, x675);
    let mut x693: u32 = 0;
    let mut x694: FqU1 = 0;
    fq_addcarryx_u32(&mut x693, &mut x694, x692, x676, x673);
    let mut x695: u32 = 0;
    let mut x696: FqU1 = 0;
    fq_addcarryx_u32(&mut x695, &mut x696, x694, x674, x671);
    let mut x697: u32 = 0;
    let mut x698: FqU1 = 0;
    fq_addcarryx_u32(&mut x697, &mut x698, x696, x672, x669);
    let x699: u32 = ((x698 as u32) + x670);
    let mut x700: u32 = 0;
    let mut x701: FqU1 = 0;
    fq_addcarryx_u32(&mut x700, &mut x701, 0x0, x652, x683);
    let mut x702: u32 = 0;
    let mut x703: FqU1 = 0;
    fq_addcarryx_u32(&mut x702, &mut x703, x701, x654, x685);
    let mut x704: u32 = 0;
    let mut x705: FqU1 = 0;
    fq_addcarryx_u32(&mut x704, &mut x705, x703, x656, x687);
    let mut x706: u32 = 0;
    let mut x707: FqU1 = 0;
    fq_addcarryx_u32(&mut x706, &mut x707, x705, x658, x689);
    let mut x708: u32 = 0;
    let mut x709: FqU1 = 0;
    fq_addcarryx_u32(&mut x708, &mut x709, x707, x660, x691);
    let mut x710: u32 = 0;
    let mut x711: FqU1 = 0;
    fq_addcarryx_u32(&mut x710, &mut x711, x709, x662, x693);
    let mut x712: u32 = 0;
    let mut x713: FqU1 = 0;
    fq_addcarryx_u32(&mut x712, &mut x713, x711, x664, x695);
    let mut x714: u32 = 0;
    let mut x715: FqU1 = 0;
    fq_addcarryx_u32(&mut x714, &mut x715, x713, x666, x697);
    let mut x716: u32 = 0;
    let mut x717: FqU1 = 0;
    fq_addcarryx_u32(&mut x716, &mut x717, x715, x668, x699);
    let mut x718: u32 = 0;
    let mut x719: u32 = 0;
    fq_mulx_u32(&mut x718, &mut x719, x700, 0xffffffff);
    let mut x720: u32 = 0;
    let mut x721: u32 = 0;
    fq_mulx_u32(&mut x720, &mut x721, x718, 0x12ab655e);
    let mut x722: u32 = 0;
    let mut x723: u32 = 0;
    fq_mulx_u32(&mut x722, &mut x723, x718, 0x9a2ca556);
    let mut x724: u32 = 0;
    let mut x725: u32 = 0;
    fq_mulx_u32(&mut x724, &mut x725, x718, 0x60b44d1e);
    let mut x726: u32 = 0;
    let mut x727: u32 = 0;
    fq_mulx_u32(&mut x726, &mut x727, x718, 0x5c37b001);
    let mut x728: u32 = 0;
    let mut x729: u32 = 0;
    fq_mulx_u32(&mut x728, &mut x729, x718, 0x59aa76fe);
    let mut x730: u32 = 0;
    let mut x731: u32 = 0;
    fq_mulx_u32(&mut x730, &mut x731, x718, 0xd0000001);
    let mut x732: u32 = 0;
    let mut x733: u32 = 0;
    fq_mulx_u32(&mut x732, &mut x733, x718, 0xa118000);
    let mut x734: u32 = 0;
    let mut x735: FqU1 = 0;
    fq_addcarryx_u32(&mut x734, &mut x735, 0x0, x733, x730);
    let mut x736: u32 = 0;
    let mut x737: FqU1 = 0;
    fq_addcarryx_u32(&mut x736, &mut x737, x735, x731, x728);
    let mut x738: u32 = 0;
    let mut x739: FqU1 = 0;
    fq_addcarryx_u32(&mut x738, &mut x739, x737, x729, x726);
    let mut x740: u32 = 0;
    let mut x741: FqU1 = 0;
    fq_addcarryx_u32(&mut x740, &mut x741, x739, x727, x724);
    let mut x742: u32 = 0;
    let mut x743: FqU1 = 0;
    fq_addcarryx_u32(&mut x742, &mut x743, x741, x725, x722);
    let mut x744: u32 = 0;
    let mut x745: FqU1 = 0;
    fq_addcarryx_u32(&mut x744, &mut x745, x743, x723, x720);
    let x746: u32 = ((x745 as u32) + x721);
    let mut x747: u32 = 0;
    let mut x748: FqU1 = 0;
    fq_addcarryx_u32(&mut x747, &mut x748, 0x0, x700, x718);
    let mut x749: u32 = 0;
    let mut x750: FqU1 = 0;
    fq_addcarryx_u32(&mut x749, &mut x750, x748, x702, x732);
    let mut x751: u32 = 0;
    let mut x752: FqU1 = 0;
    fq_addcarryx_u32(&mut x751, &mut x752, x750, x704, x734);
    let mut x753: u32 = 0;
    let mut x754: FqU1 = 0;
    fq_addcarryx_u32(&mut x753, &mut x754, x752, x706, x736);
    let mut x755: u32 = 0;
    let mut x756: FqU1 = 0;
    fq_addcarryx_u32(&mut x755, &mut x756, x754, x708, x738);
    let mut x757: u32 = 0;
    let mut x758: FqU1 = 0;
    fq_addcarryx_u32(&mut x757, &mut x758, x756, x710, x740);
    let mut x759: u32 = 0;
    let mut x760: FqU1 = 0;
    fq_addcarryx_u32(&mut x759, &mut x760, x758, x712, x742);
    let mut x761: u32 = 0;
    let mut x762: FqU1 = 0;
    fq_addcarryx_u32(&mut x761, &mut x762, x760, x714, x744);
    let mut x763: u32 = 0;
    let mut x764: FqU1 = 0;
    fq_addcarryx_u32(&mut x763, &mut x764, x762, x716, x746);
    let x765: u32 = ((x764 as u32) + (x717 as u32));
    let mut x766: u32 = 0;
    let mut x767: FqU1 = 0;
    fq_subborrowx_u32(&mut x766, &mut x767, 0x0, x749, (0x1 as u32));
    let mut x768: u32 = 0;
    let mut x769: FqU1 = 0;
    fq_subborrowx_u32(&mut x768, &mut x769, x767, x751, 0xa118000);
    let mut x770: u32 = 0;
    let mut x771: FqU1 = 0;
    fq_subborrowx_u32(&mut x770, &mut x771, x769, x753, 0xd0000001);
    let mut x772: u32 = 0;
    let mut x773: FqU1 = 0;
    fq_subborrowx_u32(&mut x772, &mut x773, x771, x755, 0x59aa76fe);
    let mut x774: u32 = 0;
    let mut x775: FqU1 = 0;
    fq_subborrowx_u32(&mut x774, &mut x775, x773, x757, 0x5c37b001);
    let mut x776: u32 = 0;
    let mut x777: FqU1 = 0;
    fq_subborrowx_u32(&mut x776, &mut x777, x775, x759, 0x60b44d1e);
    let mut x778: u32 = 0;
    let mut x779: FqU1 = 0;
    fq_subborrowx_u32(&mut x778, &mut x779, x777, x761, 0x9a2ca556);
    let mut x780: u32 = 0;
    let mut x781: FqU1 = 0;
    fq_subborrowx_u32(&mut x780, &mut x781, x779, x763, 0x12ab655e);
    let mut x782: u32 = 0;
    let mut x783: FqU1 = 0;
    fq_subborrowx_u32(&mut x782, &mut x783, x781, x765, (0x0 as u32));
    let mut x784: u32 = 0;
    fq_cmovznz_u32(&mut x784, x783, x766, x749);
    let mut x785: u32 = 0;
    fq_cmovznz_u32(&mut x785, x783, x768, x751);
    let mut x786: u32 = 0;
    fq_cmovznz_u32(&mut x786, x783, x770, x753);
    let mut x787: u32 = 0;
    fq_cmovznz_u32(&mut x787, x783, x772, x755);
    let mut x788: u32 = 0;
    fq_cmovznz_u32(&mut x788, x783, x774, x757);
    let mut x789: u32 = 0;
    fq_cmovznz_u32(&mut x789, x783, x776, x759);
    let mut x790: u32 = 0;
    fq_cmovznz_u32(&mut x790, x783, x778, x761);
    let mut x791: u32 = 0;
    fq_cmovznz_u32(&mut x791, x783, x780, x763);
    out1[0] = x784;
    out1[1] = x785;
    out1[2] = x786;
    out1[3] = x787;
    out1[4] = x788;
    out1[5] = x789;
    out1[6] = x790;
    out1[7] = x791;
}

/// The function fq_square squares a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
///   0 ≤ eval out1 < m
///
pub fn fq_square(out1: &mut FqMontgomeryDomainFieldElement, arg1: &FqMontgomeryDomainFieldElement) {
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[6]);
    let x7: u32 = (arg1[7]);
    let x8: u32 = (arg1[0]);
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    fq_mulx_u32(&mut x9, &mut x10, x8, (arg1[7]));
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    fq_mulx_u32(&mut x11, &mut x12, x8, (arg1[6]));
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    fq_mulx_u32(&mut x13, &mut x14, x8, (arg1[5]));
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    fq_mulx_u32(&mut x15, &mut x16, x8, (arg1[4]));
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    fq_mulx_u32(&mut x17, &mut x18, x8, (arg1[3]));
    let mut x19: u32 = 0;
    let mut x20: u32 = 0;
    fq_mulx_u32(&mut x19, &mut x20, x8, (arg1[2]));
    let mut x21: u32 = 0;
    let mut x22: u32 = 0;
    fq_mulx_u32(&mut x21, &mut x22, x8, (arg1[1]));
    let mut x23: u32 = 0;
    let mut x24: u32 = 0;
    fq_mulx_u32(&mut x23, &mut x24, x8, (arg1[0]));
    let mut x25: u32 = 0;
    let mut x26: FqU1 = 0;
    fq_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
    let mut x27: u32 = 0;
    let mut x28: FqU1 = 0;
    fq_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
    let mut x29: u32 = 0;
    let mut x30: FqU1 = 0;
    fq_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
    let mut x31: u32 = 0;
    let mut x32: FqU1 = 0;
    fq_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
    let mut x33: u32 = 0;
    let mut x34: FqU1 = 0;
    fq_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
    let mut x35: u32 = 0;
    let mut x36: FqU1 = 0;
    fq_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
    let mut x37: u32 = 0;
    let mut x38: FqU1 = 0;
    fq_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
    let x39: u32 = ((x38 as u32) + x10);
    let mut x40: u32 = 0;
    let mut x41: u32 = 0;
    fq_mulx_u32(&mut x40, &mut x41, x23, 0xffffffff);
    let mut x42: u32 = 0;
    let mut x43: u32 = 0;
    fq_mulx_u32(&mut x42, &mut x43, x40, 0x12ab655e);
    let mut x44: u32 = 0;
    let mut x45: u32 = 0;
    fq_mulx_u32(&mut x44, &mut x45, x40, 0x9a2ca556);
    let mut x46: u32 = 0;
    let mut x47: u32 = 0;
    fq_mulx_u32(&mut x46, &mut x47, x40, 0x60b44d1e);
    let mut x48: u32 = 0;
    let mut x49: u32 = 0;
    fq_mulx_u32(&mut x48, &mut x49, x40, 0x5c37b001);
    let mut x50: u32 = 0;
    let mut x51: u32 = 0;
    fq_mulx_u32(&mut x50, &mut x51, x40, 0x59aa76fe);
    let mut x52: u32 = 0;
    let mut x53: u32 = 0;
    fq_mulx_u32(&mut x52, &mut x53, x40, 0xd0000001);
    let mut x54: u32 = 0;
    let mut x55: u32 = 0;
    fq_mulx_u32(&mut x54, &mut x55, x40, 0xa118000);
    let mut x56: u32 = 0;
    let mut x57: FqU1 = 0;
    fq_addcarryx_u32(&mut x56, &mut x57, 0x0, x55, x52);
    let mut x58: u32 = 0;
    let mut x59: FqU1 = 0;
    fq_addcarryx_u32(&mut x58, &mut x59, x57, x53, x50);
    let mut x60: u32 = 0;
    let mut x61: FqU1 = 0;
    fq_addcarryx_u32(&mut x60, &mut x61, x59, x51, x48);
    let mut x62: u32 = 0;
    let mut x63: FqU1 = 0;
    fq_addcarryx_u32(&mut x62, &mut x63, x61, x49, x46);
    let mut x64: u32 = 0;
    let mut x65: FqU1 = 0;
    fq_addcarryx_u32(&mut x64, &mut x65, x63, x47, x44);
    let mut x66: u32 = 0;
    let mut x67: FqU1 = 0;
    fq_addcarryx_u32(&mut x66, &mut x67, x65, x45, x42);
    let x68: u32 = ((x67 as u32) + x43);
    let mut x69: u32 = 0;
    let mut x70: FqU1 = 0;
    fq_addcarryx_u32(&mut x69, &mut x70, 0x0, x23, x40);
    let mut x71: u32 = 0;
    let mut x72: FqU1 = 0;
    fq_addcarryx_u32(&mut x71, &mut x72, x70, x25, x54);
    let mut x73: u32 = 0;
    let mut x74: FqU1 = 0;
    fq_addcarryx_u32(&mut x73, &mut x74, x72, x27, x56);
    let mut x75: u32 = 0;
    let mut x76: FqU1 = 0;
    fq_addcarryx_u32(&mut x75, &mut x76, x74, x29, x58);
    let mut x77: u32 = 0;
    let mut x78: FqU1 = 0;
    fq_addcarryx_u32(&mut x77, &mut x78, x76, x31, x60);
    let mut x79: u32 = 0;
    let mut x80: FqU1 = 0;
    fq_addcarryx_u32(&mut x79, &mut x80, x78, x33, x62);
    let mut x81: u32 = 0;
    let mut x82: FqU1 = 0;
    fq_addcarryx_u32(&mut x81, &mut x82, x80, x35, x64);
    let mut x83: u32 = 0;
    let mut x84: FqU1 = 0;
    fq_addcarryx_u32(&mut x83, &mut x84, x82, x37, x66);
    let mut x85: u32 = 0;
    let mut x86: FqU1 = 0;
    fq_addcarryx_u32(&mut x85, &mut x86, x84, x39, x68);
    let mut x87: u32 = 0;
    let mut x88: u32 = 0;
    fq_mulx_u32(&mut x87, &mut x88, x1, (arg1[7]));
    let mut x89: u32 = 0;
    let mut x90: u32 = 0;
    fq_mulx_u32(&mut x89, &mut x90, x1, (arg1[6]));
    let mut x91: u32 = 0;
    let mut x92: u32 = 0;
    fq_mulx_u32(&mut x91, &mut x92, x1, (arg1[5]));
    let mut x93: u32 = 0;
    let mut x94: u32 = 0;
    fq_mulx_u32(&mut x93, &mut x94, x1, (arg1[4]));
    let mut x95: u32 = 0;
    let mut x96: u32 = 0;
    fq_mulx_u32(&mut x95, &mut x96, x1, (arg1[3]));
    let mut x97: u32 = 0;
    let mut x98: u32 = 0;
    fq_mulx_u32(&mut x97, &mut x98, x1, (arg1[2]));
    let mut x99: u32 = 0;
    let mut x100: u32 = 0;
    fq_mulx_u32(&mut x99, &mut x100, x1, (arg1[1]));
    let mut x101: u32 = 0;
    let mut x102: u32 = 0;
    fq_mulx_u32(&mut x101, &mut x102, x1, (arg1[0]));
    let mut x103: u32 = 0;
    let mut x104: FqU1 = 0;
    fq_addcarryx_u32(&mut x103, &mut x104, 0x0, x102, x99);
    let mut x105: u32 = 0;
    let mut x106: FqU1 = 0;
    fq_addcarryx_u32(&mut x105, &mut x106, x104, x100, x97);
    let mut x107: u32 = 0;
    let mut x108: FqU1 = 0;
    fq_addcarryx_u32(&mut x107, &mut x108, x106, x98, x95);
    let mut x109: u32 = 0;
    let mut x110: FqU1 = 0;
    fq_addcarryx_u32(&mut x109, &mut x110, x108, x96, x93);
    let mut x111: u32 = 0;
    let mut x112: FqU1 = 0;
    fq_addcarryx_u32(&mut x111, &mut x112, x110, x94, x91);
    let mut x113: u32 = 0;
    let mut x114: FqU1 = 0;
    fq_addcarryx_u32(&mut x113, &mut x114, x112, x92, x89);
    let mut x115: u32 = 0;
    let mut x116: FqU1 = 0;
    fq_addcarryx_u32(&mut x115, &mut x116, x114, x90, x87);
    let x117: u32 = ((x116 as u32) + x88);
    let mut x118: u32 = 0;
    let mut x119: FqU1 = 0;
    fq_addcarryx_u32(&mut x118, &mut x119, 0x0, x71, x101);
    let mut x120: u32 = 0;
    let mut x121: FqU1 = 0;
    fq_addcarryx_u32(&mut x120, &mut x121, x119, x73, x103);
    let mut x122: u32 = 0;
    let mut x123: FqU1 = 0;
    fq_addcarryx_u32(&mut x122, &mut x123, x121, x75, x105);
    let mut x124: u32 = 0;
    let mut x125: FqU1 = 0;
    fq_addcarryx_u32(&mut x124, &mut x125, x123, x77, x107);
    let mut x126: u32 = 0;
    let mut x127: FqU1 = 0;
    fq_addcarryx_u32(&mut x126, &mut x127, x125, x79, x109);
    let mut x128: u32 = 0;
    let mut x129: FqU1 = 0;
    fq_addcarryx_u32(&mut x128, &mut x129, x127, x81, x111);
    let mut x130: u32 = 0;
    let mut x131: FqU1 = 0;
    fq_addcarryx_u32(&mut x130, &mut x131, x129, x83, x113);
    let mut x132: u32 = 0;
    let mut x133: FqU1 = 0;
    fq_addcarryx_u32(&mut x132, &mut x133, x131, x85, x115);
    let mut x134: u32 = 0;
    let mut x135: FqU1 = 0;
    fq_addcarryx_u32(&mut x134, &mut x135, x133, (x86 as u32), x117);
    let mut x136: u32 = 0;
    let mut x137: u32 = 0;
    fq_mulx_u32(&mut x136, &mut x137, x118, 0xffffffff);
    let mut x138: u32 = 0;
    let mut x139: u32 = 0;
    fq_mulx_u32(&mut x138, &mut x139, x136, 0x12ab655e);
    let mut x140: u32 = 0;
    let mut x141: u32 = 0;
    fq_mulx_u32(&mut x140, &mut x141, x136, 0x9a2ca556);
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    fq_mulx_u32(&mut x142, &mut x143, x136, 0x60b44d1e);
    let mut x144: u32 = 0;
    let mut x145: u32 = 0;
    fq_mulx_u32(&mut x144, &mut x145, x136, 0x5c37b001);
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    fq_mulx_u32(&mut x146, &mut x147, x136, 0x59aa76fe);
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    fq_mulx_u32(&mut x148, &mut x149, x136, 0xd0000001);
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    fq_mulx_u32(&mut x150, &mut x151, x136, 0xa118000);
    let mut x152: u32 = 0;
    let mut x153: FqU1 = 0;
    fq_addcarryx_u32(&mut x152, &mut x153, 0x0, x151, x148);
    let mut x154: u32 = 0;
    let mut x155: FqU1 = 0;
    fq_addcarryx_u32(&mut x154, &mut x155, x153, x149, x146);
    let mut x156: u32 = 0;
    let mut x157: FqU1 = 0;
    fq_addcarryx_u32(&mut x156, &mut x157, x155, x147, x144);
    let mut x158: u32 = 0;
    let mut x159: FqU1 = 0;
    fq_addcarryx_u32(&mut x158, &mut x159, x157, x145, x142);
    let mut x160: u32 = 0;
    let mut x161: FqU1 = 0;
    fq_addcarryx_u32(&mut x160, &mut x161, x159, x143, x140);
    let mut x162: u32 = 0;
    let mut x163: FqU1 = 0;
    fq_addcarryx_u32(&mut x162, &mut x163, x161, x141, x138);
    let x164: u32 = ((x163 as u32) + x139);
    let mut x165: u32 = 0;
    let mut x166: FqU1 = 0;
    fq_addcarryx_u32(&mut x165, &mut x166, 0x0, x118, x136);
    let mut x167: u32 = 0;
    let mut x168: FqU1 = 0;
    fq_addcarryx_u32(&mut x167, &mut x168, x166, x120, x150);
    let mut x169: u32 = 0;
    let mut x170: FqU1 = 0;
    fq_addcarryx_u32(&mut x169, &mut x170, x168, x122, x152);
    let mut x171: u32 = 0;
    let mut x172: FqU1 = 0;
    fq_addcarryx_u32(&mut x171, &mut x172, x170, x124, x154);
    let mut x173: u32 = 0;
    let mut x174: FqU1 = 0;
    fq_addcarryx_u32(&mut x173, &mut x174, x172, x126, x156);
    let mut x175: u32 = 0;
    let mut x176: FqU1 = 0;
    fq_addcarryx_u32(&mut x175, &mut x176, x174, x128, x158);
    let mut x177: u32 = 0;
    let mut x178: FqU1 = 0;
    fq_addcarryx_u32(&mut x177, &mut x178, x176, x130, x160);
    let mut x179: u32 = 0;
    let mut x180: FqU1 = 0;
    fq_addcarryx_u32(&mut x179, &mut x180, x178, x132, x162);
    let mut x181: u32 = 0;
    let mut x182: FqU1 = 0;
    fq_addcarryx_u32(&mut x181, &mut x182, x180, x134, x164);
    let x183: u32 = ((x182 as u32) + (x135 as u32));
    let mut x184: u32 = 0;
    let mut x185: u32 = 0;
    fq_mulx_u32(&mut x184, &mut x185, x2, (arg1[7]));
    let mut x186: u32 = 0;
    let mut x187: u32 = 0;
    fq_mulx_u32(&mut x186, &mut x187, x2, (arg1[6]));
    let mut x188: u32 = 0;
    let mut x189: u32 = 0;
    fq_mulx_u32(&mut x188, &mut x189, x2, (arg1[5]));
    let mut x190: u32 = 0;
    let mut x191: u32 = 0;
    fq_mulx_u32(&mut x190, &mut x191, x2, (arg1[4]));
    let mut x192: u32 = 0;
    let mut x193: u32 = 0;
    fq_mulx_u32(&mut x192, &mut x193, x2, (arg1[3]));
    let mut x194: u32 = 0;
    let mut x195: u32 = 0;
    fq_mulx_u32(&mut x194, &mut x195, x2, (arg1[2]));
    let mut x196: u32 = 0;
    let mut x197: u32 = 0;
    fq_mulx_u32(&mut x196, &mut x197, x2, (arg1[1]));
    let mut x198: u32 = 0;
    let mut x199: u32 = 0;
    fq_mulx_u32(&mut x198, &mut x199, x2, (arg1[0]));
    let mut x200: u32 = 0;
    let mut x201: FqU1 = 0;
    fq_addcarryx_u32(&mut x200, &mut x201, 0x0, x199, x196);
    let mut x202: u32 = 0;
    let mut x203: FqU1 = 0;
    fq_addcarryx_u32(&mut x202, &mut x203, x201, x197, x194);
    let mut x204: u32 = 0;
    let mut x205: FqU1 = 0;
    fq_addcarryx_u32(&mut x204, &mut x205, x203, x195, x192);
    let mut x206: u32 = 0;
    let mut x207: FqU1 = 0;
    fq_addcarryx_u32(&mut x206, &mut x207, x205, x193, x190);
    let mut x208: u32 = 0;
    let mut x209: FqU1 = 0;
    fq_addcarryx_u32(&mut x208, &mut x209, x207, x191, x188);
    let mut x210: u32 = 0;
    let mut x211: FqU1 = 0;
    fq_addcarryx_u32(&mut x210, &mut x211, x209, x189, x186);
    let mut x212: u32 = 0;
    let mut x213: FqU1 = 0;
    fq_addcarryx_u32(&mut x212, &mut x213, x211, x187, x184);
    let x214: u32 = ((x213 as u32) + x185);
    let mut x215: u32 = 0;
    let mut x216: FqU1 = 0;
    fq_addcarryx_u32(&mut x215, &mut x216, 0x0, x167, x198);
    let mut x217: u32 = 0;
    let mut x218: FqU1 = 0;
    fq_addcarryx_u32(&mut x217, &mut x218, x216, x169, x200);
    let mut x219: u32 = 0;
    let mut x220: FqU1 = 0;
    fq_addcarryx_u32(&mut x219, &mut x220, x218, x171, x202);
    let mut x221: u32 = 0;
    let mut x222: FqU1 = 0;
    fq_addcarryx_u32(&mut x221, &mut x222, x220, x173, x204);
    let mut x223: u32 = 0;
    let mut x224: FqU1 = 0;
    fq_addcarryx_u32(&mut x223, &mut x224, x222, x175, x206);
    let mut x225: u32 = 0;
    let mut x226: FqU1 = 0;
    fq_addcarryx_u32(&mut x225, &mut x226, x224, x177, x208);
    let mut x227: u32 = 0;
    let mut x228: FqU1 = 0;
    fq_addcarryx_u32(&mut x227, &mut x228, x226, x179, x210);
    let mut x229: u32 = 0;
    let mut x230: FqU1 = 0;
    fq_addcarryx_u32(&mut x229, &mut x230, x228, x181, x212);
    let mut x231: u32 = 0;
    let mut x232: FqU1 = 0;
    fq_addcarryx_u32(&mut x231, &mut x232, x230, x183, x214);
    let mut x233: u32 = 0;
    let mut x234: u32 = 0;
    fq_mulx_u32(&mut x233, &mut x234, x215, 0xffffffff);
    let mut x235: u32 = 0;
    let mut x236: u32 = 0;
    fq_mulx_u32(&mut x235, &mut x236, x233, 0x12ab655e);
    let mut x237: u32 = 0;
    let mut x238: u32 = 0;
    fq_mulx_u32(&mut x237, &mut x238, x233, 0x9a2ca556);
    let mut x239: u32 = 0;
    let mut x240: u32 = 0;
    fq_mulx_u32(&mut x239, &mut x240, x233, 0x60b44d1e);
    let mut x241: u32 = 0;
    let mut x242: u32 = 0;
    fq_mulx_u32(&mut x241, &mut x242, x233, 0x5c37b001);
    let mut x243: u32 = 0;
    let mut x244: u32 = 0;
    fq_mulx_u32(&mut x243, &mut x244, x233, 0x59aa76fe);
    let mut x245: u32 = 0;
    let mut x246: u32 = 0;
    fq_mulx_u32(&mut x245, &mut x246, x233, 0xd0000001);
    let mut x247: u32 = 0;
    let mut x248: u32 = 0;
    fq_mulx_u32(&mut x247, &mut x248, x233, 0xa118000);
    let mut x249: u32 = 0;
    let mut x250: FqU1 = 0;
    fq_addcarryx_u32(&mut x249, &mut x250, 0x0, x248, x245);
    let mut x251: u32 = 0;
    let mut x252: FqU1 = 0;
    fq_addcarryx_u32(&mut x251, &mut x252, x250, x246, x243);
    let mut x253: u32 = 0;
    let mut x254: FqU1 = 0;
    fq_addcarryx_u32(&mut x253, &mut x254, x252, x244, x241);
    let mut x255: u32 = 0;
    let mut x256: FqU1 = 0;
    fq_addcarryx_u32(&mut x255, &mut x256, x254, x242, x239);
    let mut x257: u32 = 0;
    let mut x258: FqU1 = 0;
    fq_addcarryx_u32(&mut x257, &mut x258, x256, x240, x237);
    let mut x259: u32 = 0;
    let mut x260: FqU1 = 0;
    fq_addcarryx_u32(&mut x259, &mut x260, x258, x238, x235);
    let x261: u32 = ((x260 as u32) + x236);
    let mut x262: u32 = 0;
    let mut x263: FqU1 = 0;
    fq_addcarryx_u32(&mut x262, &mut x263, 0x0, x215, x233);
    let mut x264: u32 = 0;
    let mut x265: FqU1 = 0;
    fq_addcarryx_u32(&mut x264, &mut x265, x263, x217, x247);
    let mut x266: u32 = 0;
    let mut x267: FqU1 = 0;
    fq_addcarryx_u32(&mut x266, &mut x267, x265, x219, x249);
    let mut x268: u32 = 0;
    let mut x269: FqU1 = 0;
    fq_addcarryx_u32(&mut x268, &mut x269, x267, x221, x251);
    let mut x270: u32 = 0;
    let mut x271: FqU1 = 0;
    fq_addcarryx_u32(&mut x270, &mut x271, x269, x223, x253);
    let mut x272: u32 = 0;
    let mut x273: FqU1 = 0;
    fq_addcarryx_u32(&mut x272, &mut x273, x271, x225, x255);
    let mut x274: u32 = 0;
    let mut x275: FqU1 = 0;
    fq_addcarryx_u32(&mut x274, &mut x275, x273, x227, x257);
    let mut x276: u32 = 0;
    let mut x277: FqU1 = 0;
    fq_addcarryx_u32(&mut x276, &mut x277, x275, x229, x259);
    let mut x278: u32 = 0;
    let mut x279: FqU1 = 0;
    fq_addcarryx_u32(&mut x278, &mut x279, x277, x231, x261);
    let x280: u32 = ((x279 as u32) + (x232 as u32));
    let mut x281: u32 = 0;
    let mut x282: u32 = 0;
    fq_mulx_u32(&mut x281, &mut x282, x3, (arg1[7]));
    let mut x283: u32 = 0;
    let mut x284: u32 = 0;
    fq_mulx_u32(&mut x283, &mut x284, x3, (arg1[6]));
    let mut x285: u32 = 0;
    let mut x286: u32 = 0;
    fq_mulx_u32(&mut x285, &mut x286, x3, (arg1[5]));
    let mut x287: u32 = 0;
    let mut x288: u32 = 0;
    fq_mulx_u32(&mut x287, &mut x288, x3, (arg1[4]));
    let mut x289: u32 = 0;
    let mut x290: u32 = 0;
    fq_mulx_u32(&mut x289, &mut x290, x3, (arg1[3]));
    let mut x291: u32 = 0;
    let mut x292: u32 = 0;
    fq_mulx_u32(&mut x291, &mut x292, x3, (arg1[2]));
    let mut x293: u32 = 0;
    let mut x294: u32 = 0;
    fq_mulx_u32(&mut x293, &mut x294, x3, (arg1[1]));
    let mut x295: u32 = 0;
    let mut x296: u32 = 0;
    fq_mulx_u32(&mut x295, &mut x296, x3, (arg1[0]));
    let mut x297: u32 = 0;
    let mut x298: FqU1 = 0;
    fq_addcarryx_u32(&mut x297, &mut x298, 0x0, x296, x293);
    let mut x299: u32 = 0;
    let mut x300: FqU1 = 0;
    fq_addcarryx_u32(&mut x299, &mut x300, x298, x294, x291);
    let mut x301: u32 = 0;
    let mut x302: FqU1 = 0;
    fq_addcarryx_u32(&mut x301, &mut x302, x300, x292, x289);
    let mut x303: u32 = 0;
    let mut x304: FqU1 = 0;
    fq_addcarryx_u32(&mut x303, &mut x304, x302, x290, x287);
    let mut x305: u32 = 0;
    let mut x306: FqU1 = 0;
    fq_addcarryx_u32(&mut x305, &mut x306, x304, x288, x285);
    let mut x307: u32 = 0;
    let mut x308: FqU1 = 0;
    fq_addcarryx_u32(&mut x307, &mut x308, x306, x286, x283);
    let mut x309: u32 = 0;
    let mut x310: FqU1 = 0;
    fq_addcarryx_u32(&mut x309, &mut x310, x308, x284, x281);
    let x311: u32 = ((x310 as u32) + x282);
    let mut x312: u32 = 0;
    let mut x313: FqU1 = 0;
    fq_addcarryx_u32(&mut x312, &mut x313, 0x0, x264, x295);
    let mut x314: u32 = 0;
    let mut x315: FqU1 = 0;
    fq_addcarryx_u32(&mut x314, &mut x315, x313, x266, x297);
    let mut x316: u32 = 0;
    let mut x317: FqU1 = 0;
    fq_addcarryx_u32(&mut x316, &mut x317, x315, x268, x299);
    let mut x318: u32 = 0;
    let mut x319: FqU1 = 0;
    fq_addcarryx_u32(&mut x318, &mut x319, x317, x270, x301);
    let mut x320: u32 = 0;
    let mut x321: FqU1 = 0;
    fq_addcarryx_u32(&mut x320, &mut x321, x319, x272, x303);
    let mut x322: u32 = 0;
    let mut x323: FqU1 = 0;
    fq_addcarryx_u32(&mut x322, &mut x323, x321, x274, x305);
    let mut x324: u32 = 0;
    let mut x325: FqU1 = 0;
    fq_addcarryx_u32(&mut x324, &mut x325, x323, x276, x307);
    let mut x326: u32 = 0;
    let mut x327: FqU1 = 0;
    fq_addcarryx_u32(&mut x326, &mut x327, x325, x278, x309);
    let mut x328: u32 = 0;
    let mut x329: FqU1 = 0;
    fq_addcarryx_u32(&mut x328, &mut x329, x327, x280, x311);
    let mut x330: u32 = 0;
    let mut x331: u32 = 0;
    fq_mulx_u32(&mut x330, &mut x331, x312, 0xffffffff);
    let mut x332: u32 = 0;
    let mut x333: u32 = 0;
    fq_mulx_u32(&mut x332, &mut x333, x330, 0x12ab655e);
    let mut x334: u32 = 0;
    let mut x335: u32 = 0;
    fq_mulx_u32(&mut x334, &mut x335, x330, 0x9a2ca556);
    let mut x336: u32 = 0;
    let mut x337: u32 = 0;
    fq_mulx_u32(&mut x336, &mut x337, x330, 0x60b44d1e);
    let mut x338: u32 = 0;
    let mut x339: u32 = 0;
    fq_mulx_u32(&mut x338, &mut x339, x330, 0x5c37b001);
    let mut x340: u32 = 0;
    let mut x341: u32 = 0;
    fq_mulx_u32(&mut x340, &mut x341, x330, 0x59aa76fe);
    let mut x342: u32 = 0;
    let mut x343: u32 = 0;
    fq_mulx_u32(&mut x342, &mut x343, x330, 0xd0000001);
    let mut x344: u32 = 0;
    let mut x345: u32 = 0;
    fq_mulx_u32(&mut x344, &mut x345, x330, 0xa118000);
    let mut x346: u32 = 0;
    let mut x347: FqU1 = 0;
    fq_addcarryx_u32(&mut x346, &mut x347, 0x0, x345, x342);
    let mut x348: u32 = 0;
    let mut x349: FqU1 = 0;
    fq_addcarryx_u32(&mut x348, &mut x349, x347, x343, x340);
    let mut x350: u32 = 0;
    let mut x351: FqU1 = 0;
    fq_addcarryx_u32(&mut x350, &mut x351, x349, x341, x338);
    let mut x352: u32 = 0;
    let mut x353: FqU1 = 0;
    fq_addcarryx_u32(&mut x352, &mut x353, x351, x339, x336);
    let mut x354: u32 = 0;
    let mut x355: FqU1 = 0;
    fq_addcarryx_u32(&mut x354, &mut x355, x353, x337, x334);
    let mut x356: u32 = 0;
    let mut x357: FqU1 = 0;
    fq_addcarryx_u32(&mut x356, &mut x357, x355, x335, x332);
    let x358: u32 = ((x357 as u32) + x333);
    let mut x359: u32 = 0;
    let mut x360: FqU1 = 0;
    fq_addcarryx_u32(&mut x359, &mut x360, 0x0, x312, x330);
    let mut x361: u32 = 0;
    let mut x362: FqU1 = 0;
    fq_addcarryx_u32(&mut x361, &mut x362, x360, x314, x344);
    let mut x363: u32 = 0;
    let mut x364: FqU1 = 0;
    fq_addcarryx_u32(&mut x363, &mut x364, x362, x316, x346);
    let mut x365: u32 = 0;
    let mut x366: FqU1 = 0;
    fq_addcarryx_u32(&mut x365, &mut x366, x364, x318, x348);
    let mut x367: u32 = 0;
    let mut x368: FqU1 = 0;
    fq_addcarryx_u32(&mut x367, &mut x368, x366, x320, x350);
    let mut x369: u32 = 0;
    let mut x370: FqU1 = 0;
    fq_addcarryx_u32(&mut x369, &mut x370, x368, x322, x352);
    let mut x371: u32 = 0;
    let mut x372: FqU1 = 0;
    fq_addcarryx_u32(&mut x371, &mut x372, x370, x324, x354);
    let mut x373: u32 = 0;
    let mut x374: FqU1 = 0;
    fq_addcarryx_u32(&mut x373, &mut x374, x372, x326, x356);
    let mut x375: u32 = 0;
    let mut x376: FqU1 = 0;
    fq_addcarryx_u32(&mut x375, &mut x376, x374, x328, x358);
    let x377: u32 = ((x376 as u32) + (x329 as u32));
    let mut x378: u32 = 0;
    let mut x379: u32 = 0;
    fq_mulx_u32(&mut x378, &mut x379, x4, (arg1[7]));
    let mut x380: u32 = 0;
    let mut x381: u32 = 0;
    fq_mulx_u32(&mut x380, &mut x381, x4, (arg1[6]));
    let mut x382: u32 = 0;
    let mut x383: u32 = 0;
    fq_mulx_u32(&mut x382, &mut x383, x4, (arg1[5]));
    let mut x384: u32 = 0;
    let mut x385: u32 = 0;
    fq_mulx_u32(&mut x384, &mut x385, x4, (arg1[4]));
    let mut x386: u32 = 0;
    let mut x387: u32 = 0;
    fq_mulx_u32(&mut x386, &mut x387, x4, (arg1[3]));
    let mut x388: u32 = 0;
    let mut x389: u32 = 0;
    fq_mulx_u32(&mut x388, &mut x389, x4, (arg1[2]));
    let mut x390: u32 = 0;
    let mut x391: u32 = 0;
    fq_mulx_u32(&mut x390, &mut x391, x4, (arg1[1]));
    let mut x392: u32 = 0;
    let mut x393: u32 = 0;
    fq_mulx_u32(&mut x392, &mut x393, x4, (arg1[0]));
    let mut x394: u32 = 0;
    let mut x395: FqU1 = 0;
    fq_addcarryx_u32(&mut x394, &mut x395, 0x0, x393, x390);
    let mut x396: u32 = 0;
    let mut x397: FqU1 = 0;
    fq_addcarryx_u32(&mut x396, &mut x397, x395, x391, x388);
    let mut x398: u32 = 0;
    let mut x399: FqU1 = 0;
    fq_addcarryx_u32(&mut x398, &mut x399, x397, x389, x386);
    let mut x400: u32 = 0;
    let mut x401: FqU1 = 0;
    fq_addcarryx_u32(&mut x400, &mut x401, x399, x387, x384);
    let mut x402: u32 = 0;
    let mut x403: FqU1 = 0;
    fq_addcarryx_u32(&mut x402, &mut x403, x401, x385, x382);
    let mut x404: u32 = 0;
    let mut x405: FqU1 = 0;
    fq_addcarryx_u32(&mut x404, &mut x405, x403, x383, x380);
    let mut x406: u32 = 0;
    let mut x407: FqU1 = 0;
    fq_addcarryx_u32(&mut x406, &mut x407, x405, x381, x378);
    let x408: u32 = ((x407 as u32) + x379);
    let mut x409: u32 = 0;
    let mut x410: FqU1 = 0;
    fq_addcarryx_u32(&mut x409, &mut x410, 0x0, x361, x392);
    let mut x411: u32 = 0;
    let mut x412: FqU1 = 0;
    fq_addcarryx_u32(&mut x411, &mut x412, x410, x363, x394);
    let mut x413: u32 = 0;
    let mut x414: FqU1 = 0;
    fq_addcarryx_u32(&mut x413, &mut x414, x412, x365, x396);
    let mut x415: u32 = 0;
    let mut x416: FqU1 = 0;
    fq_addcarryx_u32(&mut x415, &mut x416, x414, x367, x398);
    let mut x417: u32 = 0;
    let mut x418: FqU1 = 0;
    fq_addcarryx_u32(&mut x417, &mut x418, x416, x369, x400);
    let mut x419: u32 = 0;
    let mut x420: FqU1 = 0;
    fq_addcarryx_u32(&mut x419, &mut x420, x418, x371, x402);
    let mut x421: u32 = 0;
    let mut x422: FqU1 = 0;
    fq_addcarryx_u32(&mut x421, &mut x422, x420, x373, x404);
    let mut x423: u32 = 0;
    let mut x424: FqU1 = 0;
    fq_addcarryx_u32(&mut x423, &mut x424, x422, x375, x406);
    let mut x425: u32 = 0;
    let mut x426: FqU1 = 0;
    fq_addcarryx_u32(&mut x425, &mut x426, x424, x377, x408);
    let mut x427: u32 = 0;
    let mut x428: u32 = 0;
    fq_mulx_u32(&mut x427, &mut x428, x409, 0xffffffff);
    let mut x429: u32 = 0;
    let mut x430: u32 = 0;
    fq_mulx_u32(&mut x429, &mut x430, x427, 0x12ab655e);
    let mut x431: u32 = 0;
    let mut x432: u32 = 0;
    fq_mulx_u32(&mut x431, &mut x432, x427, 0x9a2ca556);
    let mut x433: u32 = 0;
    let mut x434: u32 = 0;
    fq_mulx_u32(&mut x433, &mut x434, x427, 0x60b44d1e);
    let mut x435: u32 = 0;
    let mut x436: u32 = 0;
    fq_mulx_u32(&mut x435, &mut x436, x427, 0x5c37b001);
    let mut x437: u32 = 0;
    let mut x438: u32 = 0;
    fq_mulx_u32(&mut x437, &mut x438, x427, 0x59aa76fe);
    let mut x439: u32 = 0;
    let mut x440: u32 = 0;
    fq_mulx_u32(&mut x439, &mut x440, x427, 0xd0000001);
    let mut x441: u32 = 0;
    let mut x442: u32 = 0;
    fq_mulx_u32(&mut x441, &mut x442, x427, 0xa118000);
    let mut x443: u32 = 0;
    let mut x444: FqU1 = 0;
    fq_addcarryx_u32(&mut x443, &mut x444, 0x0, x442, x439);
    let mut x445: u32 = 0;
    let mut x446: FqU1 = 0;
    fq_addcarryx_u32(&mut x445, &mut x446, x444, x440, x437);
    let mut x447: u32 = 0;
    let mut x448: FqU1 = 0;
    fq_addcarryx_u32(&mut x447, &mut x448, x446, x438, x435);
    let mut x449: u32 = 0;
    let mut x450: FqU1 = 0;
    fq_addcarryx_u32(&mut x449, &mut x450, x448, x436, x433);
    let mut x451: u32 = 0;
    let mut x452: FqU1 = 0;
    fq_addcarryx_u32(&mut x451, &mut x452, x450, x434, x431);
    let mut x453: u32 = 0;
    let mut x454: FqU1 = 0;
    fq_addcarryx_u32(&mut x453, &mut x454, x452, x432, x429);
    let x455: u32 = ((x454 as u32) + x430);
    let mut x456: u32 = 0;
    let mut x457: FqU1 = 0;
    fq_addcarryx_u32(&mut x456, &mut x457, 0x0, x409, x427);
    let mut x458: u32 = 0;
    let mut x459: FqU1 = 0;
    fq_addcarryx_u32(&mut x458, &mut x459, x457, x411, x441);
    let mut x460: u32 = 0;
    let mut x461: FqU1 = 0;
    fq_addcarryx_u32(&mut x460, &mut x461, x459, x413, x443);
    let mut x462: u32 = 0;
    let mut x463: FqU1 = 0;
    fq_addcarryx_u32(&mut x462, &mut x463, x461, x415, x445);
    let mut x464: u32 = 0;
    let mut x465: FqU1 = 0;
    fq_addcarryx_u32(&mut x464, &mut x465, x463, x417, x447);
    let mut x466: u32 = 0;
    let mut x467: FqU1 = 0;
    fq_addcarryx_u32(&mut x466, &mut x467, x465, x419, x449);
    let mut x468: u32 = 0;
    let mut x469: FqU1 = 0;
    fq_addcarryx_u32(&mut x468, &mut x469, x467, x421, x451);
    let mut x470: u32 = 0;
    let mut x471: FqU1 = 0;
    fq_addcarryx_u32(&mut x470, &mut x471, x469, x423, x453);
    let mut x472: u32 = 0;
    let mut x473: FqU1 = 0;
    fq_addcarryx_u32(&mut x472, &mut x473, x471, x425, x455);
    let x474: u32 = ((x473 as u32) + (x426 as u32));
    let mut x475: u32 = 0;
    let mut x476: u32 = 0;
    fq_mulx_u32(&mut x475, &mut x476, x5, (arg1[7]));
    let mut x477: u32 = 0;
    let mut x478: u32 = 0;
    fq_mulx_u32(&mut x477, &mut x478, x5, (arg1[6]));
    let mut x479: u32 = 0;
    let mut x480: u32 = 0;
    fq_mulx_u32(&mut x479, &mut x480, x5, (arg1[5]));
    let mut x481: u32 = 0;
    let mut x482: u32 = 0;
    fq_mulx_u32(&mut x481, &mut x482, x5, (arg1[4]));
    let mut x483: u32 = 0;
    let mut x484: u32 = 0;
    fq_mulx_u32(&mut x483, &mut x484, x5, (arg1[3]));
    let mut x485: u32 = 0;
    let mut x486: u32 = 0;
    fq_mulx_u32(&mut x485, &mut x486, x5, (arg1[2]));
    let mut x487: u32 = 0;
    let mut x488: u32 = 0;
    fq_mulx_u32(&mut x487, &mut x488, x5, (arg1[1]));
    let mut x489: u32 = 0;
    let mut x490: u32 = 0;
    fq_mulx_u32(&mut x489, &mut x490, x5, (arg1[0]));
    let mut x491: u32 = 0;
    let mut x492: FqU1 = 0;
    fq_addcarryx_u32(&mut x491, &mut x492, 0x0, x490, x487);
    let mut x493: u32 = 0;
    let mut x494: FqU1 = 0;
    fq_addcarryx_u32(&mut x493, &mut x494, x492, x488, x485);
    let mut x495: u32 = 0;
    let mut x496: FqU1 = 0;
    fq_addcarryx_u32(&mut x495, &mut x496, x494, x486, x483);
    let mut x497: u32 = 0;
    let mut x498: FqU1 = 0;
    fq_addcarryx_u32(&mut x497, &mut x498, x496, x484, x481);
    let mut x499: u32 = 0;
    let mut x500: FqU1 = 0;
    fq_addcarryx_u32(&mut x499, &mut x500, x498, x482, x479);
    let mut x501: u32 = 0;
    let mut x502: FqU1 = 0;
    fq_addcarryx_u32(&mut x501, &mut x502, x500, x480, x477);
    let mut x503: u32 = 0;
    let mut x504: FqU1 = 0;
    fq_addcarryx_u32(&mut x503, &mut x504, x502, x478, x475);
    let x505: u32 = ((x504 as u32) + x476);
    let mut x506: u32 = 0;
    let mut x507: FqU1 = 0;
    fq_addcarryx_u32(&mut x506, &mut x507, 0x0, x458, x489);
    let mut x508: u32 = 0;
    let mut x509: FqU1 = 0;
    fq_addcarryx_u32(&mut x508, &mut x509, x507, x460, x491);
    let mut x510: u32 = 0;
    let mut x511: FqU1 = 0;
    fq_addcarryx_u32(&mut x510, &mut x511, x509, x462, x493);
    let mut x512: u32 = 0;
    let mut x513: FqU1 = 0;
    fq_addcarryx_u32(&mut x512, &mut x513, x511, x464, x495);
    let mut x514: u32 = 0;
    let mut x515: FqU1 = 0;
    fq_addcarryx_u32(&mut x514, &mut x515, x513, x466, x497);
    let mut x516: u32 = 0;
    let mut x517: FqU1 = 0;
    fq_addcarryx_u32(&mut x516, &mut x517, x515, x468, x499);
    let mut x518: u32 = 0;
    let mut x519: FqU1 = 0;
    fq_addcarryx_u32(&mut x518, &mut x519, x517, x470, x501);
    let mut x520: u32 = 0;
    let mut x521: FqU1 = 0;
    fq_addcarryx_u32(&mut x520, &mut x521, x519, x472, x503);
    let mut x522: u32 = 0;
    let mut x523: FqU1 = 0;
    fq_addcarryx_u32(&mut x522, &mut x523, x521, x474, x505);
    let mut x524: u32 = 0;
    let mut x525: u32 = 0;
    fq_mulx_u32(&mut x524, &mut x525, x506, 0xffffffff);
    let mut x526: u32 = 0;
    let mut x527: u32 = 0;
    fq_mulx_u32(&mut x526, &mut x527, x524, 0x12ab655e);
    let mut x528: u32 = 0;
    let mut x529: u32 = 0;
    fq_mulx_u32(&mut x528, &mut x529, x524, 0x9a2ca556);
    let mut x530: u32 = 0;
    let mut x531: u32 = 0;
    fq_mulx_u32(&mut x530, &mut x531, x524, 0x60b44d1e);
    let mut x532: u32 = 0;
    let mut x533: u32 = 0;
    fq_mulx_u32(&mut x532, &mut x533, x524, 0x5c37b001);
    let mut x534: u32 = 0;
    let mut x535: u32 = 0;
    fq_mulx_u32(&mut x534, &mut x535, x524, 0x59aa76fe);
    let mut x536: u32 = 0;
    let mut x537: u32 = 0;
    fq_mulx_u32(&mut x536, &mut x537, x524, 0xd0000001);
    let mut x538: u32 = 0;
    let mut x539: u32 = 0;
    fq_mulx_u32(&mut x538, &mut x539, x524, 0xa118000);
    let mut x540: u32 = 0;
    let mut x541: FqU1 = 0;
    fq_addcarryx_u32(&mut x540, &mut x541, 0x0, x539, x536);
    let mut x542: u32 = 0;
    let mut x543: FqU1 = 0;
    fq_addcarryx_u32(&mut x542, &mut x543, x541, x537, x534);
    let mut x544: u32 = 0;
    let mut x545: FqU1 = 0;
    fq_addcarryx_u32(&mut x544, &mut x545, x543, x535, x532);
    let mut x546: u32 = 0;
    let mut x547: FqU1 = 0;
    fq_addcarryx_u32(&mut x546, &mut x547, x545, x533, x530);
    let mut x548: u32 = 0;
    let mut x549: FqU1 = 0;
    fq_addcarryx_u32(&mut x548, &mut x549, x547, x531, x528);
    let mut x550: u32 = 0;
    let mut x551: FqU1 = 0;
    fq_addcarryx_u32(&mut x550, &mut x551, x549, x529, x526);
    let x552: u32 = ((x551 as u32) + x527);
    let mut x553: u32 = 0;
    let mut x554: FqU1 = 0;
    fq_addcarryx_u32(&mut x553, &mut x554, 0x0, x506, x524);
    let mut x555: u32 = 0;
    let mut x556: FqU1 = 0;
    fq_addcarryx_u32(&mut x555, &mut x556, x554, x508, x538);
    let mut x557: u32 = 0;
    let mut x558: FqU1 = 0;
    fq_addcarryx_u32(&mut x557, &mut x558, x556, x510, x540);
    let mut x559: u32 = 0;
    let mut x560: FqU1 = 0;
    fq_addcarryx_u32(&mut x559, &mut x560, x558, x512, x542);
    let mut x561: u32 = 0;
    let mut x562: FqU1 = 0;
    fq_addcarryx_u32(&mut x561, &mut x562, x560, x514, x544);
    let mut x563: u32 = 0;
    let mut x564: FqU1 = 0;
    fq_addcarryx_u32(&mut x563, &mut x564, x562, x516, x546);
    let mut x565: u32 = 0;
    let mut x566: FqU1 = 0;
    fq_addcarryx_u32(&mut x565, &mut x566, x564, x518, x548);
    let mut x567: u32 = 0;
    let mut x568: FqU1 = 0;
    fq_addcarryx_u32(&mut x567, &mut x568, x566, x520, x550);
    let mut x569: u32 = 0;
    let mut x570: FqU1 = 0;
    fq_addcarryx_u32(&mut x569, &mut x570, x568, x522, x552);
    let x571: u32 = ((x570 as u32) + (x523 as u32));
    let mut x572: u32 = 0;
    let mut x573: u32 = 0;
    fq_mulx_u32(&mut x572, &mut x573, x6, (arg1[7]));
    let mut x574: u32 = 0;
    let mut x575: u32 = 0;
    fq_mulx_u32(&mut x574, &mut x575, x6, (arg1[6]));
    let mut x576: u32 = 0;
    let mut x577: u32 = 0;
    fq_mulx_u32(&mut x576, &mut x577, x6, (arg1[5]));
    let mut x578: u32 = 0;
    let mut x579: u32 = 0;
    fq_mulx_u32(&mut x578, &mut x579, x6, (arg1[4]));
    let mut x580: u32 = 0;
    let mut x581: u32 = 0;
    fq_mulx_u32(&mut x580, &mut x581, x6, (arg1[3]));
    let mut x582: u32 = 0;
    let mut x583: u32 = 0;
    fq_mulx_u32(&mut x582, &mut x583, x6, (arg1[2]));
    let mut x584: u32 = 0;
    let mut x585: u32 = 0;
    fq_mulx_u32(&mut x584, &mut x585, x6, (arg1[1]));
    let mut x586: u32 = 0;
    let mut x587: u32 = 0;
    fq_mulx_u32(&mut x586, &mut x587, x6, (arg1[0]));
    let mut x588: u32 = 0;
    let mut x589: FqU1 = 0;
    fq_addcarryx_u32(&mut x588, &mut x589, 0x0, x587, x584);
    let mut x590: u32 = 0;
    let mut x591: FqU1 = 0;
    fq_addcarryx_u32(&mut x590, &mut x591, x589, x585, x582);
    let mut x592: u32 = 0;
    let mut x593: FqU1 = 0;
    fq_addcarryx_u32(&mut x592, &mut x593, x591, x583, x580);
    let mut x594: u32 = 0;
    let mut x595: FqU1 = 0;
    fq_addcarryx_u32(&mut x594, &mut x595, x593, x581, x578);
    let mut x596: u32 = 0;
    let mut x597: FqU1 = 0;
    fq_addcarryx_u32(&mut x596, &mut x597, x595, x579, x576);
    let mut x598: u32 = 0;
    let mut x599: FqU1 = 0;
    fq_addcarryx_u32(&mut x598, &mut x599, x597, x577, x574);
    let mut x600: u32 = 0;
    let mut x601: FqU1 = 0;
    fq_addcarryx_u32(&mut x600, &mut x601, x599, x575, x572);
    let x602: u32 = ((x601 as u32) + x573);
    let mut x603: u32 = 0;
    let mut x604: FqU1 = 0;
    fq_addcarryx_u32(&mut x603, &mut x604, 0x0, x555, x586);
    let mut x605: u32 = 0;
    let mut x606: FqU1 = 0;
    fq_addcarryx_u32(&mut x605, &mut x606, x604, x557, x588);
    let mut x607: u32 = 0;
    let mut x608: FqU1 = 0;
    fq_addcarryx_u32(&mut x607, &mut x608, x606, x559, x590);
    let mut x609: u32 = 0;
    let mut x610: FqU1 = 0;
    fq_addcarryx_u32(&mut x609, &mut x610, x608, x561, x592);
    let mut x611: u32 = 0;
    let mut x612: FqU1 = 0;
    fq_addcarryx_u32(&mut x611, &mut x612, x610, x563, x594);
    let mut x613: u32 = 0;
    let mut x614: FqU1 = 0;
    fq_addcarryx_u32(&mut x613, &mut x614, x612, x565, x596);
    let mut x615: u32 = 0;
    let mut x616: FqU1 = 0;
    fq_addcarryx_u32(&mut x615, &mut x616, x614, x567, x598);
    let mut x617: u32 = 0;
    let mut x618: FqU1 = 0;
    fq_addcarryx_u32(&mut x617, &mut x618, x616, x569, x600);
    let mut x619: u32 = 0;
    let mut x620: FqU1 = 0;
    fq_addcarryx_u32(&mut x619, &mut x620, x618, x571, x602);
    let mut x621: u32 = 0;
    let mut x622: u32 = 0;
    fq_mulx_u32(&mut x621, &mut x622, x603, 0xffffffff);
    let mut x623: u32 = 0;
    let mut x624: u32 = 0;
    fq_mulx_u32(&mut x623, &mut x624, x621, 0x12ab655e);
    let mut x625: u32 = 0;
    let mut x626: u32 = 0;
    fq_mulx_u32(&mut x625, &mut x626, x621, 0x9a2ca556);
    let mut x627: u32 = 0;
    let mut x628: u32 = 0;
    fq_mulx_u32(&mut x627, &mut x628, x621, 0x60b44d1e);
    let mut x629: u32 = 0;
    let mut x630: u32 = 0;
    fq_mulx_u32(&mut x629, &mut x630, x621, 0x5c37b001);
    let mut x631: u32 = 0;
    let mut x632: u32 = 0;
    fq_mulx_u32(&mut x631, &mut x632, x621, 0x59aa76fe);
    let mut x633: u32 = 0;
    let mut x634: u32 = 0;
    fq_mulx_u32(&mut x633, &mut x634, x621, 0xd0000001);
    let mut x635: u32 = 0;
    let mut x636: u32 = 0;
    fq_mulx_u32(&mut x635, &mut x636, x621, 0xa118000);
    let mut x637: u32 = 0;
    let mut x638: FqU1 = 0;
    fq_addcarryx_u32(&mut x637, &mut x638, 0x0, x636, x633);
    let mut x639: u32 = 0;
    let mut x640: FqU1 = 0;
    fq_addcarryx_u32(&mut x639, &mut x640, x638, x634, x631);
    let mut x641: u32 = 0;
    let mut x642: FqU1 = 0;
    fq_addcarryx_u32(&mut x641, &mut x642, x640, x632, x629);
    let mut x643: u32 = 0;
    let mut x644: FqU1 = 0;
    fq_addcarryx_u32(&mut x643, &mut x644, x642, x630, x627);
    let mut x645: u32 = 0;
    let mut x646: FqU1 = 0;
    fq_addcarryx_u32(&mut x645, &mut x646, x644, x628, x625);
    let mut x647: u32 = 0;
    let mut x648: FqU1 = 0;
    fq_addcarryx_u32(&mut x647, &mut x648, x646, x626, x623);
    let x649: u32 = ((x648 as u32) + x624);
    let mut x650: u32 = 0;
    let mut x651: FqU1 = 0;
    fq_addcarryx_u32(&mut x650, &mut x651, 0x0, x603, x621);
    let mut x652: u32 = 0;
    let mut x653: FqU1 = 0;
    fq_addcarryx_u32(&mut x652, &mut x653, x651, x605, x635);
    let mut x654: u32 = 0;
    let mut x655: FqU1 = 0;
    fq_addcarryx_u32(&mut x654, &mut x655, x653, x607, x637);
    let mut x656: u32 = 0;
    let mut x657: FqU1 = 0;
    fq_addcarryx_u32(&mut x656, &mut x657, x655, x609, x639);
    let mut x658: u32 = 0;
    let mut x659: FqU1 = 0;
    fq_addcarryx_u32(&mut x658, &mut x659, x657, x611, x641);
    let mut x660: u32 = 0;
    let mut x661: FqU1 = 0;
    fq_addcarryx_u32(&mut x660, &mut x661, x659, x613, x643);
    let mut x662: u32 = 0;
    let mut x663: FqU1 = 0;
    fq_addcarryx_u32(&mut x662, &mut x663, x661, x615, x645);
    let mut x664: u32 = 0;
    let mut x665: FqU1 = 0;
    fq_addcarryx_u32(&mut x664, &mut x665, x663, x617, x647);
    let mut x666: u32 = 0;
    let mut x667: FqU1 = 0;
    fq_addcarryx_u32(&mut x666, &mut x667, x665, x619, x649);
    let x668: u32 = ((x667 as u32) + (x620 as u32));
    let mut x669: u32 = 0;
    let mut x670: u32 = 0;
    fq_mulx_u32(&mut x669, &mut x670, x7, (arg1[7]));
    let mut x671: u32 = 0;
    let mut x672: u32 = 0;
    fq_mulx_u32(&mut x671, &mut x672, x7, (arg1[6]));
    let mut x673: u32 = 0;
    let mut x674: u32 = 0;
    fq_mulx_u32(&mut x673, &mut x674, x7, (arg1[5]));
    let mut x675: u32 = 0;
    let mut x676: u32 = 0;
    fq_mulx_u32(&mut x675, &mut x676, x7, (arg1[4]));
    let mut x677: u32 = 0;
    let mut x678: u32 = 0;
    fq_mulx_u32(&mut x677, &mut x678, x7, (arg1[3]));
    let mut x679: u32 = 0;
    let mut x680: u32 = 0;
    fq_mulx_u32(&mut x679, &mut x680, x7, (arg1[2]));
    let mut x681: u32 = 0;
    let mut x682: u32 = 0;
    fq_mulx_u32(&mut x681, &mut x682, x7, (arg1[1]));
    let mut x683: u32 = 0;
    let mut x684: u32 = 0;
    fq_mulx_u32(&mut x683, &mut x684, x7, (arg1[0]));
    let mut x685: u32 = 0;
    let mut x686: FqU1 = 0;
    fq_addcarryx_u32(&mut x685, &mut x686, 0x0, x684, x681);
    let mut x687: u32 = 0;
    let mut x688: FqU1 = 0;
    fq_addcarryx_u32(&mut x687, &mut x688, x686, x682, x679);
    let mut x689: u32 = 0;
    let mut x690: FqU1 = 0;
    fq_addcarryx_u32(&mut x689, &mut x690, x688, x680, x677);
    let mut x691: u32 = 0;
    let mut x692: FqU1 = 0;
    fq_addcarryx_u32(&mut x691, &mut x692, x690, x678, x675);
    let mut x693: u32 = 0;
    let mut x694: FqU1 = 0;
    fq_addcarryx_u32(&mut x693, &mut x694, x692, x676, x673);
    let mut x695: u32 = 0;
    let mut x696: FqU1 = 0;
    fq_addcarryx_u32(&mut x695, &mut x696, x694, x674, x671);
    let mut x697: u32 = 0;
    let mut x698: FqU1 = 0;
    fq_addcarryx_u32(&mut x697, &mut x698, x696, x672, x669);
    let x699: u32 = ((x698 as u32) + x670);
    let mut x700: u32 = 0;
    let mut x701: FqU1 = 0;
    fq_addcarryx_u32(&mut x700, &mut x701, 0x0, x652, x683);
    let mut x702: u32 = 0;
    let mut x703: FqU1 = 0;
    fq_addcarryx_u32(&mut x702, &mut x703, x701, x654, x685);
    let mut x704: u32 = 0;
    let mut x705: FqU1 = 0;
    fq_addcarryx_u32(&mut x704, &mut x705, x703, x656, x687);
    let mut x706: u32 = 0;
    let mut x707: FqU1 = 0;
    fq_addcarryx_u32(&mut x706, &mut x707, x705, x658, x689);
    let mut x708: u32 = 0;
    let mut x709: FqU1 = 0;
    fq_addcarryx_u32(&mut x708, &mut x709, x707, x660, x691);
    let mut x710: u32 = 0;
    let mut x711: FqU1 = 0;
    fq_addcarryx_u32(&mut x710, &mut x711, x709, x662, x693);
    let mut x712: u32 = 0;
    let mut x713: FqU1 = 0;
    fq_addcarryx_u32(&mut x712, &mut x713, x711, x664, x695);
    let mut x714: u32 = 0;
    let mut x715: FqU1 = 0;
    fq_addcarryx_u32(&mut x714, &mut x715, x713, x666, x697);
    let mut x716: u32 = 0;
    let mut x717: FqU1 = 0;
    fq_addcarryx_u32(&mut x716, &mut x717, x715, x668, x699);
    let mut x718: u32 = 0;
    let mut x719: u32 = 0;
    fq_mulx_u32(&mut x718, &mut x719, x700, 0xffffffff);
    let mut x720: u32 = 0;
    let mut x721: u32 = 0;
    fq_mulx_u32(&mut x720, &mut x721, x718, 0x12ab655e);
    let mut x722: u32 = 0;
    let mut x723: u32 = 0;
    fq_mulx_u32(&mut x722, &mut x723, x718, 0x9a2ca556);
    let mut x724: u32 = 0;
    let mut x725: u32 = 0;
    fq_mulx_u32(&mut x724, &mut x725, x718, 0x60b44d1e);
    let mut x726: u32 = 0;
    let mut x727: u32 = 0;
    fq_mulx_u32(&mut x726, &mut x727, x718, 0x5c37b001);
    let mut x728: u32 = 0;
    let mut x729: u32 = 0;
    fq_mulx_u32(&mut x728, &mut x729, x718, 0x59aa76fe);
    let mut x730: u32 = 0;
    let mut x731: u32 = 0;
    fq_mulx_u32(&mut x730, &mut x731, x718, 0xd0000001);
    let mut x732: u32 = 0;
    let mut x733: u32 = 0;
    fq_mulx_u32(&mut x732, &mut x733, x718, 0xa118000);
    let mut x734: u32 = 0;
    let mut x735: FqU1 = 0;
    fq_addcarryx_u32(&mut x734, &mut x735, 0x0, x733, x730);
    let mut x736: u32 = 0;
    let mut x737: FqU1 = 0;
    fq_addcarryx_u32(&mut x736, &mut x737, x735, x731, x728);
    let mut x738: u32 = 0;
    let mut x739: FqU1 = 0;
    fq_addcarryx_u32(&mut x738, &mut x739, x737, x729, x726);
    let mut x740: u32 = 0;
    let mut x741: FqU1 = 0;
    fq_addcarryx_u32(&mut x740, &mut x741, x739, x727, x724);
    let mut x742: u32 = 0;
    let mut x743: FqU1 = 0;
    fq_addcarryx_u32(&mut x742, &mut x743, x741, x725, x722);
    let mut x744: u32 = 0;
    let mut x745: FqU1 = 0;
    fq_addcarryx_u32(&mut x744, &mut x745, x743, x723, x720);
    let x746: u32 = ((x745 as u32) + x721);
    let mut x747: u32 = 0;
    let mut x748: FqU1 = 0;
    fq_addcarryx_u32(&mut x747, &mut x748, 0x0, x700, x718);
    let mut x749: u32 = 0;
    let mut x750: FqU1 = 0;
    fq_addcarryx_u32(&mut x749, &mut x750, x748, x702, x732);
    let mut x751: u32 = 0;
    let mut x752: FqU1 = 0;
    fq_addcarryx_u32(&mut x751, &mut x752, x750, x704, x734);
    let mut x753: u32 = 0;
    let mut x754: FqU1 = 0;
    fq_addcarryx_u32(&mut x753, &mut x754, x752, x706, x736);
    let mut x755: u32 = 0;
    let mut x756: FqU1 = 0;
    fq_addcarryx_u32(&mut x755, &mut x756, x754, x708, x738);
    let mut x757: u32 = 0;
    let mut x758: FqU1 = 0;
    fq_addcarryx_u32(&mut x757, &mut x758, x756, x710, x740);
    let mut x759: u32 = 0;
    let mut x760: FqU1 = 0;
    fq_addcarryx_u32(&mut x759, &mut x760, x758, x712, x742);
    let mut x761: u32 = 0;
    let mut x762: FqU1 = 0;
    fq_addcarryx_u32(&mut x761, &mut x762, x760, x714, x744);
    let mut x763: u32 = 0;
    let mut x764: FqU1 = 0;
    fq_addcarryx_u32(&mut x763, &mut x764, x762, x716, x746);
    let x765: u32 = ((x764 as u32) + (x717 as u32));
    let mut x766: u32 = 0;
    let mut x767: FqU1 = 0;
    fq_subborrowx_u32(&mut x766, &mut x767, 0x0, x749, (0x1 as u32));
    let mut x768: u32 = 0;
    let mut x769: FqU1 = 0;
    fq_subborrowx_u32(&mut x768, &mut x769, x767, x751, 0xa118000);
    let mut x770: u32 = 0;
    let mut x771: FqU1 = 0;
    fq_subborrowx_u32(&mut x770, &mut x771, x769, x753, 0xd0000001);
    let mut x772: u32 = 0;
    let mut x773: FqU1 = 0;
    fq_subborrowx_u32(&mut x772, &mut x773, x771, x755, 0x59aa76fe);
    let mut x774: u32 = 0;
    let mut x775: FqU1 = 0;
    fq_subborrowx_u32(&mut x774, &mut x775, x773, x757, 0x5c37b001);
    let mut x776: u32 = 0;
    let mut x777: FqU1 = 0;
    fq_subborrowx_u32(&mut x776, &mut x777, x775, x759, 0x60b44d1e);
    let mut x778: u32 = 0;
    let mut x779: FqU1 = 0;
    fq_subborrowx_u32(&mut x778, &mut x779, x777, x761, 0x9a2ca556);
    let mut x780: u32 = 0;
    let mut x781: FqU1 = 0;
    fq_subborrowx_u32(&mut x780, &mut x781, x779, x763, 0x12ab655e);
    let mut x782: u32 = 0;
    let mut x783: FqU1 = 0;
    fq_subborrowx_u32(&mut x782, &mut x783, x781, x765, (0x0 as u32));
    let mut x784: u32 = 0;
    fq_cmovznz_u32(&mut x784, x783, x766, x749);
    let mut x785: u32 = 0;
    fq_cmovznz_u32(&mut x785, x783, x768, x751);
    let mut x786: u32 = 0;
    fq_cmovznz_u32(&mut x786, x783, x770, x753);
    let mut x787: u32 = 0;
    fq_cmovznz_u32(&mut x787, x783, x772, x755);
    let mut x788: u32 = 0;
    fq_cmovznz_u32(&mut x788, x783, x774, x757);
    let mut x789: u32 = 0;
    fq_cmovznz_u32(&mut x789, x783, x776, x759);
    let mut x790: u32 = 0;
    fq_cmovznz_u32(&mut x790, x783, x778, x761);
    let mut x791: u32 = 0;
    fq_cmovznz_u32(&mut x791, x783, x780, x763);
    out1[0] = x784;
    out1[1] = x785;
    out1[2] = x786;
    out1[3] = x787;
    out1[4] = x788;
    out1[5] = x789;
    out1[6] = x790;
    out1[7] = x791;
}

/// The function fq_add adds two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
pub fn fq_add(
    out1: &mut FqMontgomeryDomainFieldElement,
    arg1: &FqMontgomeryDomainFieldElement,
    arg2: &FqMontgomeryDomainFieldElement,
) {
    let mut x1: u32 = 0;
    let mut x2: FqU1 = 0;
    fq_addcarryx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
    let mut x3: u32 = 0;
    let mut x4: FqU1 = 0;
    fq_addcarryx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
    let mut x5: u32 = 0;
    let mut x6: FqU1 = 0;
    fq_addcarryx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
    let mut x7: u32 = 0;
    let mut x8: FqU1 = 0;
    fq_addcarryx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
    let mut x9: u32 = 0;
    let mut x10: FqU1 = 0;
    fq_addcarryx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
    let mut x11: u32 = 0;
    let mut x12: FqU1 = 0;
    fq_addcarryx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
    let mut x13: u32 = 0;
    let mut x14: FqU1 = 0;
    fq_addcarryx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
    let mut x15: u32 = 0;
    let mut x16: FqU1 = 0;
    fq_addcarryx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
    let mut x17: u32 = 0;
    let mut x18: FqU1 = 0;
    fq_subborrowx_u32(&mut x17, &mut x18, 0x0, x1, (0x1 as u32));
    let mut x19: u32 = 0;
    let mut x20: FqU1 = 0;
    fq_subborrowx_u32(&mut x19, &mut x20, x18, x3, 0xa118000);
    let mut x21: u32 = 0;
    let mut x22: FqU1 = 0;
    fq_subborrowx_u32(&mut x21, &mut x22, x20, x5, 0xd0000001);
    let mut x23: u32 = 0;
    let mut x24: FqU1 = 0;
    fq_subborrowx_u32(&mut x23, &mut x24, x22, x7, 0x59aa76fe);
    let mut x25: u32 = 0;
    let mut x26: FqU1 = 0;
    fq_subborrowx_u32(&mut x25, &mut x26, x24, x9, 0x5c37b001);
    let mut x27: u32 = 0;
    let mut x28: FqU1 = 0;
    fq_subborrowx_u32(&mut x27, &mut x28, x26, x11, 0x60b44d1e);
    let mut x29: u32 = 0;
    let mut x30: FqU1 = 0;
    fq_subborrowx_u32(&mut x29, &mut x30, x28, x13, 0x9a2ca556);
    let mut x31: u32 = 0;
    let mut x32: FqU1 = 0;
    fq_subborrowx_u32(&mut x31, &mut x32, x30, x15, 0x12ab655e);
    let mut x33: u32 = 0;
    let mut x34: FqU1 = 0;
    fq_subborrowx_u32(&mut x33, &mut x34, x32, (x16 as u32), (0x0 as u32));
    let mut x35: u32 = 0;
    fq_cmovznz_u32(&mut x35, x34, x17, x1);
    let mut x36: u32 = 0;
    fq_cmovznz_u32(&mut x36, x34, x19, x3);
    let mut x37: u32 = 0;
    fq_cmovznz_u32(&mut x37, x34, x21, x5);
    let mut x38: u32 = 0;
    fq_cmovznz_u32(&mut x38, x34, x23, x7);
    let mut x39: u32 = 0;
    fq_cmovznz_u32(&mut x39, x34, x25, x9);
    let mut x40: u32 = 0;
    fq_cmovznz_u32(&mut x40, x34, x27, x11);
    let mut x41: u32 = 0;
    fq_cmovznz_u32(&mut x41, x34, x29, x13);
    let mut x42: u32 = 0;
    fq_cmovznz_u32(&mut x42, x34, x31, x15);
    out1[0] = x35;
    out1[1] = x36;
    out1[2] = x37;
    out1[3] = x38;
    out1[4] = x39;
    out1[5] = x40;
    out1[6] = x41;
    out1[7] = x42;
}

/// The function fq_sub subtracts two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
pub fn fq_sub(
    out1: &mut FqMontgomeryDomainFieldElement,
    arg1: &FqMontgomeryDomainFieldElement,
    arg2: &FqMontgomeryDomainFieldElement,
) {
    let mut x1: u32 = 0;
    let mut x2: FqU1 = 0;
    fq_subborrowx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
    let mut x3: u32 = 0;
    let mut x4: FqU1 = 0;
    fq_subborrowx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
    let mut x5: u32 = 0;
    let mut x6: FqU1 = 0;
    fq_subborrowx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
    let mut x7: u32 = 0;
    let mut x8: FqU1 = 0;
    fq_subborrowx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
    let mut x9: u32 = 0;
    let mut x10: FqU1 = 0;
    fq_subborrowx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
    let mut x11: u32 = 0;
    let mut x12: FqU1 = 0;
    fq_subborrowx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
    let mut x13: u32 = 0;
    let mut x14: FqU1 = 0;
    fq_subborrowx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
    let mut x15: u32 = 0;
    let mut x16: FqU1 = 0;
    fq_subborrowx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
    let mut x17: u32 = 0;
    fq_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
    let mut x18: u32 = 0;
    let mut x19: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x18,
        &mut x19,
        0x0,
        x1,
        (((x17 & (0x1 as u32)) as FqU1) as u32),
    );
    let mut x20: u32 = 0;
    let mut x21: FqU1 = 0;
    fq_addcarryx_u32(&mut x20, &mut x21, x19, x3, (x17 & 0xa118000));
    let mut x22: u32 = 0;
    let mut x23: FqU1 = 0;
    fq_addcarryx_u32(&mut x22, &mut x23, x21, x5, (x17 & 0xd0000001));
    let mut x24: u32 = 0;
    let mut x25: FqU1 = 0;
    fq_addcarryx_u32(&mut x24, &mut x25, x23, x7, (x17 & 0x59aa76fe));
    let mut x26: u32 = 0;
    let mut x27: FqU1 = 0;
    fq_addcarryx_u32(&mut x26, &mut x27, x25, x9, (x17 & 0x5c37b001));
    let mut x28: u32 = 0;
    let mut x29: FqU1 = 0;
    fq_addcarryx_u32(&mut x28, &mut x29, x27, x11, (x17 & 0x60b44d1e));
    let mut x30: u32 = 0;
    let mut x31: FqU1 = 0;
    fq_addcarryx_u32(&mut x30, &mut x31, x29, x13, (x17 & 0x9a2ca556));
    let mut x32: u32 = 0;
    let mut x33: FqU1 = 0;
    fq_addcarryx_u32(&mut x32, &mut x33, x31, x15, (x17 & 0x12ab655e));
    out1[0] = x18;
    out1[1] = x20;
    out1[2] = x22;
    out1[3] = x24;
    out1[4] = x26;
    out1[5] = x28;
    out1[6] = x30;
    out1[7] = x32;
}

/// The function fq_opp negates a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
///   0 ≤ eval out1 < m
///
pub fn fq_opp(out1: &mut FqMontgomeryDomainFieldElement, arg1: &FqMontgomeryDomainFieldElement) {
    let mut x1: u32 = 0;
    let mut x2: FqU1 = 0;
    fq_subborrowx_u32(&mut x1, &mut x2, 0x0, (0x0 as u32), (arg1[0]));
    let mut x3: u32 = 0;
    let mut x4: FqU1 = 0;
    fq_subborrowx_u32(&mut x3, &mut x4, x2, (0x0 as u32), (arg1[1]));
    let mut x5: u32 = 0;
    let mut x6: FqU1 = 0;
    fq_subborrowx_u32(&mut x5, &mut x6, x4, (0x0 as u32), (arg1[2]));
    let mut x7: u32 = 0;
    let mut x8: FqU1 = 0;
    fq_subborrowx_u32(&mut x7, &mut x8, x6, (0x0 as u32), (arg1[3]));
    let mut x9: u32 = 0;
    let mut x10: FqU1 = 0;
    fq_subborrowx_u32(&mut x9, &mut x10, x8, (0x0 as u32), (arg1[4]));
    let mut x11: u32 = 0;
    let mut x12: FqU1 = 0;
    fq_subborrowx_u32(&mut x11, &mut x12, x10, (0x0 as u32), (arg1[5]));
    let mut x13: u32 = 0;
    let mut x14: FqU1 = 0;
    fq_subborrowx_u32(&mut x13, &mut x14, x12, (0x0 as u32), (arg1[6]));
    let mut x15: u32 = 0;
    let mut x16: FqU1 = 0;
    fq_subborrowx_u32(&mut x15, &mut x16, x14, (0x0 as u32), (arg1[7]));
    let mut x17: u32 = 0;
    fq_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
    let mut x18: u32 = 0;
    let mut x19: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x18,
        &mut x19,
        0x0,
        x1,
        (((x17 & (0x1 as u32)) as FqU1) as u32),
    );
    let mut x20: u32 = 0;
    let mut x21: FqU1 = 0;
    fq_addcarryx_u32(&mut x20, &mut x21, x19, x3, (x17 & 0xa118000));
    let mut x22: u32 = 0;
    let mut x23: FqU1 = 0;
    fq_addcarryx_u32(&mut x22, &mut x23, x21, x5, (x17 & 0xd0000001));
    let mut x24: u32 = 0;
    let mut x25: FqU1 = 0;
    fq_addcarryx_u32(&mut x24, &mut x25, x23, x7, (x17 & 0x59aa76fe));
    let mut x26: u32 = 0;
    let mut x27: FqU1 = 0;
    fq_addcarryx_u32(&mut x26, &mut x27, x25, x9, (x17 & 0x5c37b001));
    let mut x28: u32 = 0;
    let mut x29: FqU1 = 0;
    fq_addcarryx_u32(&mut x28, &mut x29, x27, x11, (x17 & 0x60b44d1e));
    let mut x30: u32 = 0;
    let mut x31: FqU1 = 0;
    fq_addcarryx_u32(&mut x30, &mut x31, x29, x13, (x17 & 0x9a2ca556));
    let mut x32: u32 = 0;
    let mut x33: FqU1 = 0;
    fq_addcarryx_u32(&mut x32, &mut x33, x31, x15, (x17 & 0x12ab655e));
    out1[0] = x18;
    out1[1] = x20;
    out1[2] = x22;
    out1[3] = x24;
    out1[4] = x26;
    out1[5] = x28;
    out1[6] = x30;
    out1[7] = x32;
}

/// The function fq_from_montgomery translates a field element out of the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
///   0 ≤ eval out1 < m
///
pub fn fq_from_montgomery(
    out1: &mut FqNonMontgomeryDomainFieldElement,
    arg1: &FqMontgomeryDomainFieldElement,
) {
    let x1: u32 = (arg1[0]);
    let mut x2: u32 = 0;
    let mut x3: u32 = 0;
    fq_mulx_u32(&mut x2, &mut x3, x1, 0xffffffff);
    let mut x4: u32 = 0;
    let mut x5: u32 = 0;
    fq_mulx_u32(&mut x4, &mut x5, x2, 0x12ab655e);
    let mut x6: u32 = 0;
    let mut x7: u32 = 0;
    fq_mulx_u32(&mut x6, &mut x7, x2, 0x9a2ca556);
    let mut x8: u32 = 0;
    let mut x9: u32 = 0;
    fq_mulx_u32(&mut x8, &mut x9, x2, 0x60b44d1e);
    let mut x10: u32 = 0;
    let mut x11: u32 = 0;
    fq_mulx_u32(&mut x10, &mut x11, x2, 0x5c37b001);
    let mut x12: u32 = 0;
    let mut x13: u32 = 0;
    fq_mulx_u32(&mut x12, &mut x13, x2, 0x59aa76fe);
    let mut x14: u32 = 0;
    let mut x15: u32 = 0;
    fq_mulx_u32(&mut x14, &mut x15, x2, 0xd0000001);
    let mut x16: u32 = 0;
    let mut x17: u32 = 0;
    fq_mulx_u32(&mut x16, &mut x17, x2, 0xa118000);
    let mut x18: u32 = 0;
    let mut x19: FqU1 = 0;
    fq_addcarryx_u32(&mut x18, &mut x19, 0x0, x17, x14);
    let mut x20: u32 = 0;
    let mut x21: FqU1 = 0;
    fq_addcarryx_u32(&mut x20, &mut x21, x19, x15, x12);
    let mut x22: u32 = 0;
    let mut x23: FqU1 = 0;
    fq_addcarryx_u32(&mut x22, &mut x23, x21, x13, x10);
    let mut x24: u32 = 0;
    let mut x25: FqU1 = 0;
    fq_addcarryx_u32(&mut x24, &mut x25, x23, x11, x8);
    let mut x26: u32 = 0;
    let mut x27: FqU1 = 0;
    fq_addcarryx_u32(&mut x26, &mut x27, x25, x9, x6);
    let mut x28: u32 = 0;
    let mut x29: FqU1 = 0;
    fq_addcarryx_u32(&mut x28, &mut x29, x27, x7, x4);
    let mut x30: u32 = 0;
    let mut x31: FqU1 = 0;
    fq_addcarryx_u32(&mut x30, &mut x31, 0x0, x1, x2);
    let mut x32: u32 = 0;
    let mut x33: FqU1 = 0;
    fq_addcarryx_u32(&mut x32, &mut x33, x31, (0x0 as u32), x16);
    let mut x34: u32 = 0;
    let mut x35: FqU1 = 0;
    fq_addcarryx_u32(&mut x34, &mut x35, x33, (0x0 as u32), x18);
    let mut x36: u32 = 0;
    let mut x37: FqU1 = 0;
    fq_addcarryx_u32(&mut x36, &mut x37, x35, (0x0 as u32), x20);
    let mut x38: u32 = 0;
    let mut x39: FqU1 = 0;
    fq_addcarryx_u32(&mut x38, &mut x39, x37, (0x0 as u32), x22);
    let mut x40: u32 = 0;
    let mut x41: FqU1 = 0;
    fq_addcarryx_u32(&mut x40, &mut x41, x39, (0x0 as u32), x24);
    let mut x42: u32 = 0;
    let mut x43: FqU1 = 0;
    fq_addcarryx_u32(&mut x42, &mut x43, x41, (0x0 as u32), x26);
    let mut x44: u32 = 0;
    let mut x45: FqU1 = 0;
    fq_addcarryx_u32(&mut x44, &mut x45, x43, (0x0 as u32), x28);
    let mut x46: u32 = 0;
    let mut x47: FqU1 = 0;
    fq_addcarryx_u32(&mut x46, &mut x47, 0x0, x32, (arg1[1]));
    let mut x48: u32 = 0;
    let mut x49: FqU1 = 0;
    fq_addcarryx_u32(&mut x48, &mut x49, x47, x34, (0x0 as u32));
    let mut x50: u32 = 0;
    let mut x51: FqU1 = 0;
    fq_addcarryx_u32(&mut x50, &mut x51, x49, x36, (0x0 as u32));
    let mut x52: u32 = 0;
    let mut x53: FqU1 = 0;
    fq_addcarryx_u32(&mut x52, &mut x53, x51, x38, (0x0 as u32));
    let mut x54: u32 = 0;
    let mut x55: FqU1 = 0;
    fq_addcarryx_u32(&mut x54, &mut x55, x53, x40, (0x0 as u32));
    let mut x56: u32 = 0;
    let mut x57: FqU1 = 0;
    fq_addcarryx_u32(&mut x56, &mut x57, x55, x42, (0x0 as u32));
    let mut x58: u32 = 0;
    let mut x59: FqU1 = 0;
    fq_addcarryx_u32(&mut x58, &mut x59, x57, x44, (0x0 as u32));
    let mut x60: u32 = 0;
    let mut x61: u32 = 0;
    fq_mulx_u32(&mut x60, &mut x61, x46, 0xffffffff);
    let mut x62: u32 = 0;
    let mut x63: u32 = 0;
    fq_mulx_u32(&mut x62, &mut x63, x60, 0x12ab655e);
    let mut x64: u32 = 0;
    let mut x65: u32 = 0;
    fq_mulx_u32(&mut x64, &mut x65, x60, 0x9a2ca556);
    let mut x66: u32 = 0;
    let mut x67: u32 = 0;
    fq_mulx_u32(&mut x66, &mut x67, x60, 0x60b44d1e);
    let mut x68: u32 = 0;
    let mut x69: u32 = 0;
    fq_mulx_u32(&mut x68, &mut x69, x60, 0x5c37b001);
    let mut x70: u32 = 0;
    let mut x71: u32 = 0;
    fq_mulx_u32(&mut x70, &mut x71, x60, 0x59aa76fe);
    let mut x72: u32 = 0;
    let mut x73: u32 = 0;
    fq_mulx_u32(&mut x72, &mut x73, x60, 0xd0000001);
    let mut x74: u32 = 0;
    let mut x75: u32 = 0;
    fq_mulx_u32(&mut x74, &mut x75, x60, 0xa118000);
    let mut x76: u32 = 0;
    let mut x77: FqU1 = 0;
    fq_addcarryx_u32(&mut x76, &mut x77, 0x0, x75, x72);
    let mut x78: u32 = 0;
    let mut x79: FqU1 = 0;
    fq_addcarryx_u32(&mut x78, &mut x79, x77, x73, x70);
    let mut x80: u32 = 0;
    let mut x81: FqU1 = 0;
    fq_addcarryx_u32(&mut x80, &mut x81, x79, x71, x68);
    let mut x82: u32 = 0;
    let mut x83: FqU1 = 0;
    fq_addcarryx_u32(&mut x82, &mut x83, x81, x69, x66);
    let mut x84: u32 = 0;
    let mut x85: FqU1 = 0;
    fq_addcarryx_u32(&mut x84, &mut x85, x83, x67, x64);
    let mut x86: u32 = 0;
    let mut x87: FqU1 = 0;
    fq_addcarryx_u32(&mut x86, &mut x87, x85, x65, x62);
    let mut x88: u32 = 0;
    let mut x89: FqU1 = 0;
    fq_addcarryx_u32(&mut x88, &mut x89, 0x0, x46, x60);
    let mut x90: u32 = 0;
    let mut x91: FqU1 = 0;
    fq_addcarryx_u32(&mut x90, &mut x91, x89, x48, x74);
    let mut x92: u32 = 0;
    let mut x93: FqU1 = 0;
    fq_addcarryx_u32(&mut x92, &mut x93, x91, x50, x76);
    let mut x94: u32 = 0;
    let mut x95: FqU1 = 0;
    fq_addcarryx_u32(&mut x94, &mut x95, x93, x52, x78);
    let mut x96: u32 = 0;
    let mut x97: FqU1 = 0;
    fq_addcarryx_u32(&mut x96, &mut x97, x95, x54, x80);
    let mut x98: u32 = 0;
    let mut x99: FqU1 = 0;
    fq_addcarryx_u32(&mut x98, &mut x99, x97, x56, x82);
    let mut x100: u32 = 0;
    let mut x101: FqU1 = 0;
    fq_addcarryx_u32(&mut x100, &mut x101, x99, x58, x84);
    let mut x102: u32 = 0;
    let mut x103: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x102,
        &mut x103,
        x101,
        ((x59 as u32) + ((x45 as u32) + ((x29 as u32) + x5))),
        x86,
    );
    let mut x104: u32 = 0;
    let mut x105: FqU1 = 0;
    fq_addcarryx_u32(&mut x104, &mut x105, 0x0, x90, (arg1[2]));
    let mut x106: u32 = 0;
    let mut x107: FqU1 = 0;
    fq_addcarryx_u32(&mut x106, &mut x107, x105, x92, (0x0 as u32));
    let mut x108: u32 = 0;
    let mut x109: FqU1 = 0;
    fq_addcarryx_u32(&mut x108, &mut x109, x107, x94, (0x0 as u32));
    let mut x110: u32 = 0;
    let mut x111: FqU1 = 0;
    fq_addcarryx_u32(&mut x110, &mut x111, x109, x96, (0x0 as u32));
    let mut x112: u32 = 0;
    let mut x113: FqU1 = 0;
    fq_addcarryx_u32(&mut x112, &mut x113, x111, x98, (0x0 as u32));
    let mut x114: u32 = 0;
    let mut x115: FqU1 = 0;
    fq_addcarryx_u32(&mut x114, &mut x115, x113, x100, (0x0 as u32));
    let mut x116: u32 = 0;
    let mut x117: FqU1 = 0;
    fq_addcarryx_u32(&mut x116, &mut x117, x115, x102, (0x0 as u32));
    let mut x118: u32 = 0;
    let mut x119: u32 = 0;
    fq_mulx_u32(&mut x118, &mut x119, x104, 0xffffffff);
    let mut x120: u32 = 0;
    let mut x121: u32 = 0;
    fq_mulx_u32(&mut x120, &mut x121, x118, 0x12ab655e);
    let mut x122: u32 = 0;
    let mut x123: u32 = 0;
    fq_mulx_u32(&mut x122, &mut x123, x118, 0x9a2ca556);
    let mut x124: u32 = 0;
    let mut x125: u32 = 0;
    fq_mulx_u32(&mut x124, &mut x125, x118, 0x60b44d1e);
    let mut x126: u32 = 0;
    let mut x127: u32 = 0;
    fq_mulx_u32(&mut x126, &mut x127, x118, 0x5c37b001);
    let mut x128: u32 = 0;
    let mut x129: u32 = 0;
    fq_mulx_u32(&mut x128, &mut x129, x118, 0x59aa76fe);
    let mut x130: u32 = 0;
    let mut x131: u32 = 0;
    fq_mulx_u32(&mut x130, &mut x131, x118, 0xd0000001);
    let mut x132: u32 = 0;
    let mut x133: u32 = 0;
    fq_mulx_u32(&mut x132, &mut x133, x118, 0xa118000);
    let mut x134: u32 = 0;
    let mut x135: FqU1 = 0;
    fq_addcarryx_u32(&mut x134, &mut x135, 0x0, x133, x130);
    let mut x136: u32 = 0;
    let mut x137: FqU1 = 0;
    fq_addcarryx_u32(&mut x136, &mut x137, x135, x131, x128);
    let mut x138: u32 = 0;
    let mut x139: FqU1 = 0;
    fq_addcarryx_u32(&mut x138, &mut x139, x137, x129, x126);
    let mut x140: u32 = 0;
    let mut x141: FqU1 = 0;
    fq_addcarryx_u32(&mut x140, &mut x141, x139, x127, x124);
    let mut x142: u32 = 0;
    let mut x143: FqU1 = 0;
    fq_addcarryx_u32(&mut x142, &mut x143, x141, x125, x122);
    let mut x144: u32 = 0;
    let mut x145: FqU1 = 0;
    fq_addcarryx_u32(&mut x144, &mut x145, x143, x123, x120);
    let mut x146: u32 = 0;
    let mut x147: FqU1 = 0;
    fq_addcarryx_u32(&mut x146, &mut x147, 0x0, x104, x118);
    let mut x148: u32 = 0;
    let mut x149: FqU1 = 0;
    fq_addcarryx_u32(&mut x148, &mut x149, x147, x106, x132);
    let mut x150: u32 = 0;
    let mut x151: FqU1 = 0;
    fq_addcarryx_u32(&mut x150, &mut x151, x149, x108, x134);
    let mut x152: u32 = 0;
    let mut x153: FqU1 = 0;
    fq_addcarryx_u32(&mut x152, &mut x153, x151, x110, x136);
    let mut x154: u32 = 0;
    let mut x155: FqU1 = 0;
    fq_addcarryx_u32(&mut x154, &mut x155, x153, x112, x138);
    let mut x156: u32 = 0;
    let mut x157: FqU1 = 0;
    fq_addcarryx_u32(&mut x156, &mut x157, x155, x114, x140);
    let mut x158: u32 = 0;
    let mut x159: FqU1 = 0;
    fq_addcarryx_u32(&mut x158, &mut x159, x157, x116, x142);
    let mut x160: u32 = 0;
    let mut x161: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x160,
        &mut x161,
        x159,
        ((x117 as u32) + ((x103 as u32) + ((x87 as u32) + x63))),
        x144,
    );
    let mut x162: u32 = 0;
    let mut x163: FqU1 = 0;
    fq_addcarryx_u32(&mut x162, &mut x163, 0x0, x148, (arg1[3]));
    let mut x164: u32 = 0;
    let mut x165: FqU1 = 0;
    fq_addcarryx_u32(&mut x164, &mut x165, x163, x150, (0x0 as u32));
    let mut x166: u32 = 0;
    let mut x167: FqU1 = 0;
    fq_addcarryx_u32(&mut x166, &mut x167, x165, x152, (0x0 as u32));
    let mut x168: u32 = 0;
    let mut x169: FqU1 = 0;
    fq_addcarryx_u32(&mut x168, &mut x169, x167, x154, (0x0 as u32));
    let mut x170: u32 = 0;
    let mut x171: FqU1 = 0;
    fq_addcarryx_u32(&mut x170, &mut x171, x169, x156, (0x0 as u32));
    let mut x172: u32 = 0;
    let mut x173: FqU1 = 0;
    fq_addcarryx_u32(&mut x172, &mut x173, x171, x158, (0x0 as u32));
    let mut x174: u32 = 0;
    let mut x175: FqU1 = 0;
    fq_addcarryx_u32(&mut x174, &mut x175, x173, x160, (0x0 as u32));
    let mut x176: u32 = 0;
    let mut x177: u32 = 0;
    fq_mulx_u32(&mut x176, &mut x177, x162, 0xffffffff);
    let mut x178: u32 = 0;
    let mut x179: u32 = 0;
    fq_mulx_u32(&mut x178, &mut x179, x176, 0x12ab655e);
    let mut x180: u32 = 0;
    let mut x181: u32 = 0;
    fq_mulx_u32(&mut x180, &mut x181, x176, 0x9a2ca556);
    let mut x182: u32 = 0;
    let mut x183: u32 = 0;
    fq_mulx_u32(&mut x182, &mut x183, x176, 0x60b44d1e);
    let mut x184: u32 = 0;
    let mut x185: u32 = 0;
    fq_mulx_u32(&mut x184, &mut x185, x176, 0x5c37b001);
    let mut x186: u32 = 0;
    let mut x187: u32 = 0;
    fq_mulx_u32(&mut x186, &mut x187, x176, 0x59aa76fe);
    let mut x188: u32 = 0;
    let mut x189: u32 = 0;
    fq_mulx_u32(&mut x188, &mut x189, x176, 0xd0000001);
    let mut x190: u32 = 0;
    let mut x191: u32 = 0;
    fq_mulx_u32(&mut x190, &mut x191, x176, 0xa118000);
    let mut x192: u32 = 0;
    let mut x193: FqU1 = 0;
    fq_addcarryx_u32(&mut x192, &mut x193, 0x0, x191, x188);
    let mut x194: u32 = 0;
    let mut x195: FqU1 = 0;
    fq_addcarryx_u32(&mut x194, &mut x195, x193, x189, x186);
    let mut x196: u32 = 0;
    let mut x197: FqU1 = 0;
    fq_addcarryx_u32(&mut x196, &mut x197, x195, x187, x184);
    let mut x198: u32 = 0;
    let mut x199: FqU1 = 0;
    fq_addcarryx_u32(&mut x198, &mut x199, x197, x185, x182);
    let mut x200: u32 = 0;
    let mut x201: FqU1 = 0;
    fq_addcarryx_u32(&mut x200, &mut x201, x199, x183, x180);
    let mut x202: u32 = 0;
    let mut x203: FqU1 = 0;
    fq_addcarryx_u32(&mut x202, &mut x203, x201, x181, x178);
    let mut x204: u32 = 0;
    let mut x205: FqU1 = 0;
    fq_addcarryx_u32(&mut x204, &mut x205, 0x0, x162, x176);
    let mut x206: u32 = 0;
    let mut x207: FqU1 = 0;
    fq_addcarryx_u32(&mut x206, &mut x207, x205, x164, x190);
    let mut x208: u32 = 0;
    let mut x209: FqU1 = 0;
    fq_addcarryx_u32(&mut x208, &mut x209, x207, x166, x192);
    let mut x210: u32 = 0;
    let mut x211: FqU1 = 0;
    fq_addcarryx_u32(&mut x210, &mut x211, x209, x168, x194);
    let mut x212: u32 = 0;
    let mut x213: FqU1 = 0;
    fq_addcarryx_u32(&mut x212, &mut x213, x211, x170, x196);
    let mut x214: u32 = 0;
    let mut x215: FqU1 = 0;
    fq_addcarryx_u32(&mut x214, &mut x215, x213, x172, x198);
    let mut x216: u32 = 0;
    let mut x217: FqU1 = 0;
    fq_addcarryx_u32(&mut x216, &mut x217, x215, x174, x200);
    let mut x218: u32 = 0;
    let mut x219: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x218,
        &mut x219,
        x217,
        ((x175 as u32) + ((x161 as u32) + ((x145 as u32) + x121))),
        x202,
    );
    let mut x220: u32 = 0;
    let mut x221: FqU1 = 0;
    fq_addcarryx_u32(&mut x220, &mut x221, 0x0, x206, (arg1[4]));
    let mut x222: u32 = 0;
    let mut x223: FqU1 = 0;
    fq_addcarryx_u32(&mut x222, &mut x223, x221, x208, (0x0 as u32));
    let mut x224: u32 = 0;
    let mut x225: FqU1 = 0;
    fq_addcarryx_u32(&mut x224, &mut x225, x223, x210, (0x0 as u32));
    let mut x226: u32 = 0;
    let mut x227: FqU1 = 0;
    fq_addcarryx_u32(&mut x226, &mut x227, x225, x212, (0x0 as u32));
    let mut x228: u32 = 0;
    let mut x229: FqU1 = 0;
    fq_addcarryx_u32(&mut x228, &mut x229, x227, x214, (0x0 as u32));
    let mut x230: u32 = 0;
    let mut x231: FqU1 = 0;
    fq_addcarryx_u32(&mut x230, &mut x231, x229, x216, (0x0 as u32));
    let mut x232: u32 = 0;
    let mut x233: FqU1 = 0;
    fq_addcarryx_u32(&mut x232, &mut x233, x231, x218, (0x0 as u32));
    let mut x234: u32 = 0;
    let mut x235: u32 = 0;
    fq_mulx_u32(&mut x234, &mut x235, x220, 0xffffffff);
    let mut x236: u32 = 0;
    let mut x237: u32 = 0;
    fq_mulx_u32(&mut x236, &mut x237, x234, 0x12ab655e);
    let mut x238: u32 = 0;
    let mut x239: u32 = 0;
    fq_mulx_u32(&mut x238, &mut x239, x234, 0x9a2ca556);
    let mut x240: u32 = 0;
    let mut x241: u32 = 0;
    fq_mulx_u32(&mut x240, &mut x241, x234, 0x60b44d1e);
    let mut x242: u32 = 0;
    let mut x243: u32 = 0;
    fq_mulx_u32(&mut x242, &mut x243, x234, 0x5c37b001);
    let mut x244: u32 = 0;
    let mut x245: u32 = 0;
    fq_mulx_u32(&mut x244, &mut x245, x234, 0x59aa76fe);
    let mut x246: u32 = 0;
    let mut x247: u32 = 0;
    fq_mulx_u32(&mut x246, &mut x247, x234, 0xd0000001);
    let mut x248: u32 = 0;
    let mut x249: u32 = 0;
    fq_mulx_u32(&mut x248, &mut x249, x234, 0xa118000);
    let mut x250: u32 = 0;
    let mut x251: FqU1 = 0;
    fq_addcarryx_u32(&mut x250, &mut x251, 0x0, x249, x246);
    let mut x252: u32 = 0;
    let mut x253: FqU1 = 0;
    fq_addcarryx_u32(&mut x252, &mut x253, x251, x247, x244);
    let mut x254: u32 = 0;
    let mut x255: FqU1 = 0;
    fq_addcarryx_u32(&mut x254, &mut x255, x253, x245, x242);
    let mut x256: u32 = 0;
    let mut x257: FqU1 = 0;
    fq_addcarryx_u32(&mut x256, &mut x257, x255, x243, x240);
    let mut x258: u32 = 0;
    let mut x259: FqU1 = 0;
    fq_addcarryx_u32(&mut x258, &mut x259, x257, x241, x238);
    let mut x260: u32 = 0;
    let mut x261: FqU1 = 0;
    fq_addcarryx_u32(&mut x260, &mut x261, x259, x239, x236);
    let mut x262: u32 = 0;
    let mut x263: FqU1 = 0;
    fq_addcarryx_u32(&mut x262, &mut x263, 0x0, x220, x234);
    let mut x264: u32 = 0;
    let mut x265: FqU1 = 0;
    fq_addcarryx_u32(&mut x264, &mut x265, x263, x222, x248);
    let mut x266: u32 = 0;
    let mut x267: FqU1 = 0;
    fq_addcarryx_u32(&mut x266, &mut x267, x265, x224, x250);
    let mut x268: u32 = 0;
    let mut x269: FqU1 = 0;
    fq_addcarryx_u32(&mut x268, &mut x269, x267, x226, x252);
    let mut x270: u32 = 0;
    let mut x271: FqU1 = 0;
    fq_addcarryx_u32(&mut x270, &mut x271, x269, x228, x254);
    let mut x272: u32 = 0;
    let mut x273: FqU1 = 0;
    fq_addcarryx_u32(&mut x272, &mut x273, x271, x230, x256);
    let mut x274: u32 = 0;
    let mut x275: FqU1 = 0;
    fq_addcarryx_u32(&mut x274, &mut x275, x273, x232, x258);
    let mut x276: u32 = 0;
    let mut x277: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x276,
        &mut x277,
        x275,
        ((x233 as u32) + ((x219 as u32) + ((x203 as u32) + x179))),
        x260,
    );
    let mut x278: u32 = 0;
    let mut x279: FqU1 = 0;
    fq_addcarryx_u32(&mut x278, &mut x279, 0x0, x264, (arg1[5]));
    let mut x280: u32 = 0;
    let mut x281: FqU1 = 0;
    fq_addcarryx_u32(&mut x280, &mut x281, x279, x266, (0x0 as u32));
    let mut x282: u32 = 0;
    let mut x283: FqU1 = 0;
    fq_addcarryx_u32(&mut x282, &mut x283, x281, x268, (0x0 as u32));
    let mut x284: u32 = 0;
    let mut x285: FqU1 = 0;
    fq_addcarryx_u32(&mut x284, &mut x285, x283, x270, (0x0 as u32));
    let mut x286: u32 = 0;
    let mut x287: FqU1 = 0;
    fq_addcarryx_u32(&mut x286, &mut x287, x285, x272, (0x0 as u32));
    let mut x288: u32 = 0;
    let mut x289: FqU1 = 0;
    fq_addcarryx_u32(&mut x288, &mut x289, x287, x274, (0x0 as u32));
    let mut x290: u32 = 0;
    let mut x291: FqU1 = 0;
    fq_addcarryx_u32(&mut x290, &mut x291, x289, x276, (0x0 as u32));
    let mut x292: u32 = 0;
    let mut x293: u32 = 0;
    fq_mulx_u32(&mut x292, &mut x293, x278, 0xffffffff);
    let mut x294: u32 = 0;
    let mut x295: u32 = 0;
    fq_mulx_u32(&mut x294, &mut x295, x292, 0x12ab655e);
    let mut x296: u32 = 0;
    let mut x297: u32 = 0;
    fq_mulx_u32(&mut x296, &mut x297, x292, 0x9a2ca556);
    let mut x298: u32 = 0;
    let mut x299: u32 = 0;
    fq_mulx_u32(&mut x298, &mut x299, x292, 0x60b44d1e);
    let mut x300: u32 = 0;
    let mut x301: u32 = 0;
    fq_mulx_u32(&mut x300, &mut x301, x292, 0x5c37b001);
    let mut x302: u32 = 0;
    let mut x303: u32 = 0;
    fq_mulx_u32(&mut x302, &mut x303, x292, 0x59aa76fe);
    let mut x304: u32 = 0;
    let mut x305: u32 = 0;
    fq_mulx_u32(&mut x304, &mut x305, x292, 0xd0000001);
    let mut x306: u32 = 0;
    let mut x307: u32 = 0;
    fq_mulx_u32(&mut x306, &mut x307, x292, 0xa118000);
    let mut x308: u32 = 0;
    let mut x309: FqU1 = 0;
    fq_addcarryx_u32(&mut x308, &mut x309, 0x0, x307, x304);
    let mut x310: u32 = 0;
    let mut x311: FqU1 = 0;
    fq_addcarryx_u32(&mut x310, &mut x311, x309, x305, x302);
    let mut x312: u32 = 0;
    let mut x313: FqU1 = 0;
    fq_addcarryx_u32(&mut x312, &mut x313, x311, x303, x300);
    let mut x314: u32 = 0;
    let mut x315: FqU1 = 0;
    fq_addcarryx_u32(&mut x314, &mut x315, x313, x301, x298);
    let mut x316: u32 = 0;
    let mut x317: FqU1 = 0;
    fq_addcarryx_u32(&mut x316, &mut x317, x315, x299, x296);
    let mut x318: u32 = 0;
    let mut x319: FqU1 = 0;
    fq_addcarryx_u32(&mut x318, &mut x319, x317, x297, x294);
    let mut x320: u32 = 0;
    let mut x321: FqU1 = 0;
    fq_addcarryx_u32(&mut x320, &mut x321, 0x0, x278, x292);
    let mut x322: u32 = 0;
    let mut x323: FqU1 = 0;
    fq_addcarryx_u32(&mut x322, &mut x323, x321, x280, x306);
    let mut x324: u32 = 0;
    let mut x325: FqU1 = 0;
    fq_addcarryx_u32(&mut x324, &mut x325, x323, x282, x308);
    let mut x326: u32 = 0;
    let mut x327: FqU1 = 0;
    fq_addcarryx_u32(&mut x326, &mut x327, x325, x284, x310);
    let mut x328: u32 = 0;
    let mut x329: FqU1 = 0;
    fq_addcarryx_u32(&mut x328, &mut x329, x327, x286, x312);
    let mut x330: u32 = 0;
    let mut x331: FqU1 = 0;
    fq_addcarryx_u32(&mut x330, &mut x331, x329, x288, x314);
    let mut x332: u32 = 0;
    let mut x333: FqU1 = 0;
    fq_addcarryx_u32(&mut x332, &mut x333, x331, x290, x316);
    let mut x334: u32 = 0;
    let mut x335: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x334,
        &mut x335,
        x333,
        ((x291 as u32) + ((x277 as u32) + ((x261 as u32) + x237))),
        x318,
    );
    let mut x336: u32 = 0;
    let mut x337: FqU1 = 0;
    fq_addcarryx_u32(&mut x336, &mut x337, 0x0, x322, (arg1[6]));
    let mut x338: u32 = 0;
    let mut x339: FqU1 = 0;
    fq_addcarryx_u32(&mut x338, &mut x339, x337, x324, (0x0 as u32));
    let mut x340: u32 = 0;
    let mut x341: FqU1 = 0;
    fq_addcarryx_u32(&mut x340, &mut x341, x339, x326, (0x0 as u32));
    let mut x342: u32 = 0;
    let mut x343: FqU1 = 0;
    fq_addcarryx_u32(&mut x342, &mut x343, x341, x328, (0x0 as u32));
    let mut x344: u32 = 0;
    let mut x345: FqU1 = 0;
    fq_addcarryx_u32(&mut x344, &mut x345, x343, x330, (0x0 as u32));
    let mut x346: u32 = 0;
    let mut x347: FqU1 = 0;
    fq_addcarryx_u32(&mut x346, &mut x347, x345, x332, (0x0 as u32));
    let mut x348: u32 = 0;
    let mut x349: FqU1 = 0;
    fq_addcarryx_u32(&mut x348, &mut x349, x347, x334, (0x0 as u32));
    let mut x350: u32 = 0;
    let mut x351: u32 = 0;
    fq_mulx_u32(&mut x350, &mut x351, x336, 0xffffffff);
    let mut x352: u32 = 0;
    let mut x353: u32 = 0;
    fq_mulx_u32(&mut x352, &mut x353, x350, 0x12ab655e);
    let mut x354: u32 = 0;
    let mut x355: u32 = 0;
    fq_mulx_u32(&mut x354, &mut x355, x350, 0x9a2ca556);
    let mut x356: u32 = 0;
    let mut x357: u32 = 0;
    fq_mulx_u32(&mut x356, &mut x357, x350, 0x60b44d1e);
    let mut x358: u32 = 0;
    let mut x359: u32 = 0;
    fq_mulx_u32(&mut x358, &mut x359, x350, 0x5c37b001);
    let mut x360: u32 = 0;
    let mut x361: u32 = 0;
    fq_mulx_u32(&mut x360, &mut x361, x350, 0x59aa76fe);
    let mut x362: u32 = 0;
    let mut x363: u32 = 0;
    fq_mulx_u32(&mut x362, &mut x363, x350, 0xd0000001);
    let mut x364: u32 = 0;
    let mut x365: u32 = 0;
    fq_mulx_u32(&mut x364, &mut x365, x350, 0xa118000);
    let mut x366: u32 = 0;
    let mut x367: FqU1 = 0;
    fq_addcarryx_u32(&mut x366, &mut x367, 0x0, x365, x362);
    let mut x368: u32 = 0;
    let mut x369: FqU1 = 0;
    fq_addcarryx_u32(&mut x368, &mut x369, x367, x363, x360);
    let mut x370: u32 = 0;
    let mut x371: FqU1 = 0;
    fq_addcarryx_u32(&mut x370, &mut x371, x369, x361, x358);
    let mut x372: u32 = 0;
    let mut x373: FqU1 = 0;
    fq_addcarryx_u32(&mut x372, &mut x373, x371, x359, x356);
    let mut x374: u32 = 0;
    let mut x375: FqU1 = 0;
    fq_addcarryx_u32(&mut x374, &mut x375, x373, x357, x354);
    let mut x376: u32 = 0;
    let mut x377: FqU1 = 0;
    fq_addcarryx_u32(&mut x376, &mut x377, x375, x355, x352);
    let mut x378: u32 = 0;
    let mut x379: FqU1 = 0;
    fq_addcarryx_u32(&mut x378, &mut x379, 0x0, x336, x350);
    let mut x380: u32 = 0;
    let mut x381: FqU1 = 0;
    fq_addcarryx_u32(&mut x380, &mut x381, x379, x338, x364);
    let mut x382: u32 = 0;
    let mut x383: FqU1 = 0;
    fq_addcarryx_u32(&mut x382, &mut x383, x381, x340, x366);
    let mut x384: u32 = 0;
    let mut x385: FqU1 = 0;
    fq_addcarryx_u32(&mut x384, &mut x385, x383, x342, x368);
    let mut x386: u32 = 0;
    let mut x387: FqU1 = 0;
    fq_addcarryx_u32(&mut x386, &mut x387, x385, x344, x370);
    let mut x388: u32 = 0;
    let mut x389: FqU1 = 0;
    fq_addcarryx_u32(&mut x388, &mut x389, x387, x346, x372);
    let mut x390: u32 = 0;
    let mut x391: FqU1 = 0;
    fq_addcarryx_u32(&mut x390, &mut x391, x389, x348, x374);
    let mut x392: u32 = 0;
    let mut x393: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x392,
        &mut x393,
        x391,
        ((x349 as u32) + ((x335 as u32) + ((x319 as u32) + x295))),
        x376,
    );
    let mut x394: u32 = 0;
    let mut x395: FqU1 = 0;
    fq_addcarryx_u32(&mut x394, &mut x395, 0x0, x380, (arg1[7]));
    let mut x396: u32 = 0;
    let mut x397: FqU1 = 0;
    fq_addcarryx_u32(&mut x396, &mut x397, x395, x382, (0x0 as u32));
    let mut x398: u32 = 0;
    let mut x399: FqU1 = 0;
    fq_addcarryx_u32(&mut x398, &mut x399, x397, x384, (0x0 as u32));
    let mut x400: u32 = 0;
    let mut x401: FqU1 = 0;
    fq_addcarryx_u32(&mut x400, &mut x401, x399, x386, (0x0 as u32));
    let mut x402: u32 = 0;
    let mut x403: FqU1 = 0;
    fq_addcarryx_u32(&mut x402, &mut x403, x401, x388, (0x0 as u32));
    let mut x404: u32 = 0;
    let mut x405: FqU1 = 0;
    fq_addcarryx_u32(&mut x404, &mut x405, x403, x390, (0x0 as u32));
    let mut x406: u32 = 0;
    let mut x407: FqU1 = 0;
    fq_addcarryx_u32(&mut x406, &mut x407, x405, x392, (0x0 as u32));
    let mut x408: u32 = 0;
    let mut x409: u32 = 0;
    fq_mulx_u32(&mut x408, &mut x409, x394, 0xffffffff);
    let mut x410: u32 = 0;
    let mut x411: u32 = 0;
    fq_mulx_u32(&mut x410, &mut x411, x408, 0x12ab655e);
    let mut x412: u32 = 0;
    let mut x413: u32 = 0;
    fq_mulx_u32(&mut x412, &mut x413, x408, 0x9a2ca556);
    let mut x414: u32 = 0;
    let mut x415: u32 = 0;
    fq_mulx_u32(&mut x414, &mut x415, x408, 0x60b44d1e);
    let mut x416: u32 = 0;
    let mut x417: u32 = 0;
    fq_mulx_u32(&mut x416, &mut x417, x408, 0x5c37b001);
    let mut x418: u32 = 0;
    let mut x419: u32 = 0;
    fq_mulx_u32(&mut x418, &mut x419, x408, 0x59aa76fe);
    let mut x420: u32 = 0;
    let mut x421: u32 = 0;
    fq_mulx_u32(&mut x420, &mut x421, x408, 0xd0000001);
    let mut x422: u32 = 0;
    let mut x423: u32 = 0;
    fq_mulx_u32(&mut x422, &mut x423, x408, 0xa118000);
    let mut x424: u32 = 0;
    let mut x425: FqU1 = 0;
    fq_addcarryx_u32(&mut x424, &mut x425, 0x0, x423, x420);
    let mut x426: u32 = 0;
    let mut x427: FqU1 = 0;
    fq_addcarryx_u32(&mut x426, &mut x427, x425, x421, x418);
    let mut x428: u32 = 0;
    let mut x429: FqU1 = 0;
    fq_addcarryx_u32(&mut x428, &mut x429, x427, x419, x416);
    let mut x430: u32 = 0;
    let mut x431: FqU1 = 0;
    fq_addcarryx_u32(&mut x430, &mut x431, x429, x417, x414);
    let mut x432: u32 = 0;
    let mut x433: FqU1 = 0;
    fq_addcarryx_u32(&mut x432, &mut x433, x431, x415, x412);
    let mut x434: u32 = 0;
    let mut x435: FqU1 = 0;
    fq_addcarryx_u32(&mut x434, &mut x435, x433, x413, x410);
    let mut x436: u32 = 0;
    let mut x437: FqU1 = 0;
    fq_addcarryx_u32(&mut x436, &mut x437, 0x0, x394, x408);
    let mut x438: u32 = 0;
    let mut x439: FqU1 = 0;
    fq_addcarryx_u32(&mut x438, &mut x439, x437, x396, x422);
    let mut x440: u32 = 0;
    let mut x441: FqU1 = 0;
    fq_addcarryx_u32(&mut x440, &mut x441, x439, x398, x424);
    let mut x442: u32 = 0;
    let mut x443: FqU1 = 0;
    fq_addcarryx_u32(&mut x442, &mut x443, x441, x400, x426);
    let mut x444: u32 = 0;
    let mut x445: FqU1 = 0;
    fq_addcarryx_u32(&mut x444, &mut x445, x443, x402, x428);
    let mut x446: u32 = 0;
    let mut x447: FqU1 = 0;
    fq_addcarryx_u32(&mut x446, &mut x447, x445, x404, x430);
    let mut x448: u32 = 0;
    let mut x449: FqU1 = 0;
    fq_addcarryx_u32(&mut x448, &mut x449, x447, x406, x432);
    let mut x450: u32 = 0;
    let mut x451: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x450,
        &mut x451,
        x449,
        ((x407 as u32) + ((x393 as u32) + ((x377 as u32) + x353))),
        x434,
    );
    let x452: u32 = ((x451 as u32) + ((x435 as u32) + x411));
    let mut x453: u32 = 0;
    let mut x454: FqU1 = 0;
    fq_subborrowx_u32(&mut x453, &mut x454, 0x0, x438, (0x1 as u32));
    let mut x455: u32 = 0;
    let mut x456: FqU1 = 0;
    fq_subborrowx_u32(&mut x455, &mut x456, x454, x440, 0xa118000);
    let mut x457: u32 = 0;
    let mut x458: FqU1 = 0;
    fq_subborrowx_u32(&mut x457, &mut x458, x456, x442, 0xd0000001);
    let mut x459: u32 = 0;
    let mut x460: FqU1 = 0;
    fq_subborrowx_u32(&mut x459, &mut x460, x458, x444, 0x59aa76fe);
    let mut x461: u32 = 0;
    let mut x462: FqU1 = 0;
    fq_subborrowx_u32(&mut x461, &mut x462, x460, x446, 0x5c37b001);
    let mut x463: u32 = 0;
    let mut x464: FqU1 = 0;
    fq_subborrowx_u32(&mut x463, &mut x464, x462, x448, 0x60b44d1e);
    let mut x465: u32 = 0;
    let mut x466: FqU1 = 0;
    fq_subborrowx_u32(&mut x465, &mut x466, x464, x450, 0x9a2ca556);
    let mut x467: u32 = 0;
    let mut x468: FqU1 = 0;
    fq_subborrowx_u32(&mut x467, &mut x468, x466, x452, 0x12ab655e);
    let mut x469: u32 = 0;
    let mut x470: FqU1 = 0;
    fq_subborrowx_u32(&mut x469, &mut x470, x468, (0x0 as u32), (0x0 as u32));
    let mut x471: u32 = 0;
    fq_cmovznz_u32(&mut x471, x470, x453, x438);
    let mut x472: u32 = 0;
    fq_cmovznz_u32(&mut x472, x470, x455, x440);
    let mut x473: u32 = 0;
    fq_cmovznz_u32(&mut x473, x470, x457, x442);
    let mut x474: u32 = 0;
    fq_cmovznz_u32(&mut x474, x470, x459, x444);
    let mut x475: u32 = 0;
    fq_cmovznz_u32(&mut x475, x470, x461, x446);
    let mut x476: u32 = 0;
    fq_cmovznz_u32(&mut x476, x470, x463, x448);
    let mut x477: u32 = 0;
    fq_cmovznz_u32(&mut x477, x470, x465, x450);
    let mut x478: u32 = 0;
    fq_cmovznz_u32(&mut x478, x470, x467, x452);
    out1[0] = x471;
    out1[1] = x472;
    out1[2] = x473;
    out1[3] = x474;
    out1[4] = x475;
    out1[5] = x476;
    out1[6] = x477;
    out1[7] = x478;
}

/// The function fq_to_montgomery translates a field element into the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = eval arg1 mod m
///   0 ≤ eval out1 < m
///
pub fn fq_to_montgomery(
    out1: &mut FqMontgomeryDomainFieldElement,
    arg1: &FqNonMontgomeryDomainFieldElement,
) {
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[6]);
    let x7: u32 = (arg1[7]);
    let x8: u32 = (arg1[0]);
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    fq_mulx_u32(&mut x9, &mut x10, x8, 0x11fdae7);
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    fq_mulx_u32(&mut x11, &mut x12, x8, 0xeff1c939);
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    fq_mulx_u32(&mut x13, &mut x14, x8, 0xa7cc008f);
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    fq_mulx_u32(&mut x15, &mut x16, x8, 0xe5dc8593);
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    fq_mulx_u32(&mut x17, &mut x18, x8, 0xcc2c27b5);
    let mut x19: u32 = 0;
    let mut x20: u32 = 0;
    fq_mulx_u32(&mut x19, &mut x20, x8, 0x8860591f);
    let mut x21: u32 = 0;
    let mut x22: u32 = 0;
    fq_mulx_u32(&mut x21, &mut x22, x8, 0x25d577ba);
    let mut x23: u32 = 0;
    let mut x24: u32 = 0;
    fq_mulx_u32(&mut x23, &mut x24, x8, 0xb861857b);
    let mut x25: u32 = 0;
    let mut x26: FqU1 = 0;
    fq_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
    let mut x27: u32 = 0;
    let mut x28: FqU1 = 0;
    fq_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
    let mut x29: u32 = 0;
    let mut x30: FqU1 = 0;
    fq_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
    let mut x31: u32 = 0;
    let mut x32: FqU1 = 0;
    fq_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
    let mut x33: u32 = 0;
    let mut x34: FqU1 = 0;
    fq_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
    let mut x35: u32 = 0;
    let mut x36: FqU1 = 0;
    fq_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
    let mut x37: u32 = 0;
    let mut x38: FqU1 = 0;
    fq_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
    let mut x39: u32 = 0;
    let mut x40: u32 = 0;
    fq_mulx_u32(&mut x39, &mut x40, x23, 0xffffffff);
    let mut x41: u32 = 0;
    let mut x42: u32 = 0;
    fq_mulx_u32(&mut x41, &mut x42, x39, 0x12ab655e);
    let mut x43: u32 = 0;
    let mut x44: u32 = 0;
    fq_mulx_u32(&mut x43, &mut x44, x39, 0x9a2ca556);
    let mut x45: u32 = 0;
    let mut x46: u32 = 0;
    fq_mulx_u32(&mut x45, &mut x46, x39, 0x60b44d1e);
    let mut x47: u32 = 0;
    let mut x48: u32 = 0;
    fq_mulx_u32(&mut x47, &mut x48, x39, 0x5c37b001);
    let mut x49: u32 = 0;
    let mut x50: u32 = 0;
    fq_mulx_u32(&mut x49, &mut x50, x39, 0x59aa76fe);
    let mut x51: u32 = 0;
    let mut x52: u32 = 0;
    fq_mulx_u32(&mut x51, &mut x52, x39, 0xd0000001);
    let mut x53: u32 = 0;
    let mut x54: u32 = 0;
    fq_mulx_u32(&mut x53, &mut x54, x39, 0xa118000);
    let mut x55: u32 = 0;
    let mut x56: FqU1 = 0;
    fq_addcarryx_u32(&mut x55, &mut x56, 0x0, x54, x51);
    let mut x57: u32 = 0;
    let mut x58: FqU1 = 0;
    fq_addcarryx_u32(&mut x57, &mut x58, x56, x52, x49);
    let mut x59: u32 = 0;
    let mut x60: FqU1 = 0;
    fq_addcarryx_u32(&mut x59, &mut x60, x58, x50, x47);
    let mut x61: u32 = 0;
    let mut x62: FqU1 = 0;
    fq_addcarryx_u32(&mut x61, &mut x62, x60, x48, x45);
    let mut x63: u32 = 0;
    let mut x64: FqU1 = 0;
    fq_addcarryx_u32(&mut x63, &mut x64, x62, x46, x43);
    let mut x65: u32 = 0;
    let mut x66: FqU1 = 0;
    fq_addcarryx_u32(&mut x65, &mut x66, x64, x44, x41);
    let mut x67: u32 = 0;
    let mut x68: FqU1 = 0;
    fq_addcarryx_u32(&mut x67, &mut x68, 0x0, x23, x39);
    let mut x69: u32 = 0;
    let mut x70: FqU1 = 0;
    fq_addcarryx_u32(&mut x69, &mut x70, x68, x25, x53);
    let mut x71: u32 = 0;
    let mut x72: FqU1 = 0;
    fq_addcarryx_u32(&mut x71, &mut x72, x70, x27, x55);
    let mut x73: u32 = 0;
    let mut x74: FqU1 = 0;
    fq_addcarryx_u32(&mut x73, &mut x74, x72, x29, x57);
    let mut x75: u32 = 0;
    let mut x76: FqU1 = 0;
    fq_addcarryx_u32(&mut x75, &mut x76, x74, x31, x59);
    let mut x77: u32 = 0;
    let mut x78: FqU1 = 0;
    fq_addcarryx_u32(&mut x77, &mut x78, x76, x33, x61);
    let mut x79: u32 = 0;
    let mut x80: FqU1 = 0;
    fq_addcarryx_u32(&mut x79, &mut x80, x78, x35, x63);
    let mut x81: u32 = 0;
    let mut x82: FqU1 = 0;
    fq_addcarryx_u32(&mut x81, &mut x82, x80, x37, x65);
    let mut x83: u32 = 0;
    let mut x84: u32 = 0;
    fq_mulx_u32(&mut x83, &mut x84, x1, 0x11fdae7);
    let mut x85: u32 = 0;
    let mut x86: u32 = 0;
    fq_mulx_u32(&mut x85, &mut x86, x1, 0xeff1c939);
    let mut x87: u32 = 0;
    let mut x88: u32 = 0;
    fq_mulx_u32(&mut x87, &mut x88, x1, 0xa7cc008f);
    let mut x89: u32 = 0;
    let mut x90: u32 = 0;
    fq_mulx_u32(&mut x89, &mut x90, x1, 0xe5dc8593);
    let mut x91: u32 = 0;
    let mut x92: u32 = 0;
    fq_mulx_u32(&mut x91, &mut x92, x1, 0xcc2c27b5);
    let mut x93: u32 = 0;
    let mut x94: u32 = 0;
    fq_mulx_u32(&mut x93, &mut x94, x1, 0x8860591f);
    let mut x95: u32 = 0;
    let mut x96: u32 = 0;
    fq_mulx_u32(&mut x95, &mut x96, x1, 0x25d577ba);
    let mut x97: u32 = 0;
    let mut x98: u32 = 0;
    fq_mulx_u32(&mut x97, &mut x98, x1, 0xb861857b);
    let mut x99: u32 = 0;
    let mut x100: FqU1 = 0;
    fq_addcarryx_u32(&mut x99, &mut x100, 0x0, x98, x95);
    let mut x101: u32 = 0;
    let mut x102: FqU1 = 0;
    fq_addcarryx_u32(&mut x101, &mut x102, x100, x96, x93);
    let mut x103: u32 = 0;
    let mut x104: FqU1 = 0;
    fq_addcarryx_u32(&mut x103, &mut x104, x102, x94, x91);
    let mut x105: u32 = 0;
    let mut x106: FqU1 = 0;
    fq_addcarryx_u32(&mut x105, &mut x106, x104, x92, x89);
    let mut x107: u32 = 0;
    let mut x108: FqU1 = 0;
    fq_addcarryx_u32(&mut x107, &mut x108, x106, x90, x87);
    let mut x109: u32 = 0;
    let mut x110: FqU1 = 0;
    fq_addcarryx_u32(&mut x109, &mut x110, x108, x88, x85);
    let mut x111: u32 = 0;
    let mut x112: FqU1 = 0;
    fq_addcarryx_u32(&mut x111, &mut x112, x110, x86, x83);
    let mut x113: u32 = 0;
    let mut x114: FqU1 = 0;
    fq_addcarryx_u32(&mut x113, &mut x114, 0x0, x69, x97);
    let mut x115: u32 = 0;
    let mut x116: FqU1 = 0;
    fq_addcarryx_u32(&mut x115, &mut x116, x114, x71, x99);
    let mut x117: u32 = 0;
    let mut x118: FqU1 = 0;
    fq_addcarryx_u32(&mut x117, &mut x118, x116, x73, x101);
    let mut x119: u32 = 0;
    let mut x120: FqU1 = 0;
    fq_addcarryx_u32(&mut x119, &mut x120, x118, x75, x103);
    let mut x121: u32 = 0;
    let mut x122: FqU1 = 0;
    fq_addcarryx_u32(&mut x121, &mut x122, x120, x77, x105);
    let mut x123: u32 = 0;
    let mut x124: FqU1 = 0;
    fq_addcarryx_u32(&mut x123, &mut x124, x122, x79, x107);
    let mut x125: u32 = 0;
    let mut x126: FqU1 = 0;
    fq_addcarryx_u32(&mut x125, &mut x126, x124, x81, x109);
    let mut x127: u32 = 0;
    let mut x128: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x127,
        &mut x128,
        x126,
        (((x82 as u32) + ((x38 as u32) + x10)) + ((x66 as u32) + x42)),
        x111,
    );
    let mut x129: u32 = 0;
    let mut x130: u32 = 0;
    fq_mulx_u32(&mut x129, &mut x130, x113, 0xffffffff);
    let mut x131: u32 = 0;
    let mut x132: u32 = 0;
    fq_mulx_u32(&mut x131, &mut x132, x129, 0x12ab655e);
    let mut x133: u32 = 0;
    let mut x134: u32 = 0;
    fq_mulx_u32(&mut x133, &mut x134, x129, 0x9a2ca556);
    let mut x135: u32 = 0;
    let mut x136: u32 = 0;
    fq_mulx_u32(&mut x135, &mut x136, x129, 0x60b44d1e);
    let mut x137: u32 = 0;
    let mut x138: u32 = 0;
    fq_mulx_u32(&mut x137, &mut x138, x129, 0x5c37b001);
    let mut x139: u32 = 0;
    let mut x140: u32 = 0;
    fq_mulx_u32(&mut x139, &mut x140, x129, 0x59aa76fe);
    let mut x141: u32 = 0;
    let mut x142: u32 = 0;
    fq_mulx_u32(&mut x141, &mut x142, x129, 0xd0000001);
    let mut x143: u32 = 0;
    let mut x144: u32 = 0;
    fq_mulx_u32(&mut x143, &mut x144, x129, 0xa118000);
    let mut x145: u32 = 0;
    let mut x146: FqU1 = 0;
    fq_addcarryx_u32(&mut x145, &mut x146, 0x0, x144, x141);
    let mut x147: u32 = 0;
    let mut x148: FqU1 = 0;
    fq_addcarryx_u32(&mut x147, &mut x148, x146, x142, x139);
    let mut x149: u32 = 0;
    let mut x150: FqU1 = 0;
    fq_addcarryx_u32(&mut x149, &mut x150, x148, x140, x137);
    let mut x151: u32 = 0;
    let mut x152: FqU1 = 0;
    fq_addcarryx_u32(&mut x151, &mut x152, x150, x138, x135);
    let mut x153: u32 = 0;
    let mut x154: FqU1 = 0;
    fq_addcarryx_u32(&mut x153, &mut x154, x152, x136, x133);
    let mut x155: u32 = 0;
    let mut x156: FqU1 = 0;
    fq_addcarryx_u32(&mut x155, &mut x156, x154, x134, x131);
    let mut x157: u32 = 0;
    let mut x158: FqU1 = 0;
    fq_addcarryx_u32(&mut x157, &mut x158, 0x0, x113, x129);
    let mut x159: u32 = 0;
    let mut x160: FqU1 = 0;
    fq_addcarryx_u32(&mut x159, &mut x160, x158, x115, x143);
    let mut x161: u32 = 0;
    let mut x162: FqU1 = 0;
    fq_addcarryx_u32(&mut x161, &mut x162, x160, x117, x145);
    let mut x163: u32 = 0;
    let mut x164: FqU1 = 0;
    fq_addcarryx_u32(&mut x163, &mut x164, x162, x119, x147);
    let mut x165: u32 = 0;
    let mut x166: FqU1 = 0;
    fq_addcarryx_u32(&mut x165, &mut x166, x164, x121, x149);
    let mut x167: u32 = 0;
    let mut x168: FqU1 = 0;
    fq_addcarryx_u32(&mut x167, &mut x168, x166, x123, x151);
    let mut x169: u32 = 0;
    let mut x170: FqU1 = 0;
    fq_addcarryx_u32(&mut x169, &mut x170, x168, x125, x153);
    let mut x171: u32 = 0;
    let mut x172: FqU1 = 0;
    fq_addcarryx_u32(&mut x171, &mut x172, x170, x127, x155);
    let mut x173: u32 = 0;
    let mut x174: u32 = 0;
    fq_mulx_u32(&mut x173, &mut x174, x2, 0x11fdae7);
    let mut x175: u32 = 0;
    let mut x176: u32 = 0;
    fq_mulx_u32(&mut x175, &mut x176, x2, 0xeff1c939);
    let mut x177: u32 = 0;
    let mut x178: u32 = 0;
    fq_mulx_u32(&mut x177, &mut x178, x2, 0xa7cc008f);
    let mut x179: u32 = 0;
    let mut x180: u32 = 0;
    fq_mulx_u32(&mut x179, &mut x180, x2, 0xe5dc8593);
    let mut x181: u32 = 0;
    let mut x182: u32 = 0;
    fq_mulx_u32(&mut x181, &mut x182, x2, 0xcc2c27b5);
    let mut x183: u32 = 0;
    let mut x184: u32 = 0;
    fq_mulx_u32(&mut x183, &mut x184, x2, 0x8860591f);
    let mut x185: u32 = 0;
    let mut x186: u32 = 0;
    fq_mulx_u32(&mut x185, &mut x186, x2, 0x25d577ba);
    let mut x187: u32 = 0;
    let mut x188: u32 = 0;
    fq_mulx_u32(&mut x187, &mut x188, x2, 0xb861857b);
    let mut x189: u32 = 0;
    let mut x190: FqU1 = 0;
    fq_addcarryx_u32(&mut x189, &mut x190, 0x0, x188, x185);
    let mut x191: u32 = 0;
    let mut x192: FqU1 = 0;
    fq_addcarryx_u32(&mut x191, &mut x192, x190, x186, x183);
    let mut x193: u32 = 0;
    let mut x194: FqU1 = 0;
    fq_addcarryx_u32(&mut x193, &mut x194, x192, x184, x181);
    let mut x195: u32 = 0;
    let mut x196: FqU1 = 0;
    fq_addcarryx_u32(&mut x195, &mut x196, x194, x182, x179);
    let mut x197: u32 = 0;
    let mut x198: FqU1 = 0;
    fq_addcarryx_u32(&mut x197, &mut x198, x196, x180, x177);
    let mut x199: u32 = 0;
    let mut x200: FqU1 = 0;
    fq_addcarryx_u32(&mut x199, &mut x200, x198, x178, x175);
    let mut x201: u32 = 0;
    let mut x202: FqU1 = 0;
    fq_addcarryx_u32(&mut x201, &mut x202, x200, x176, x173);
    let mut x203: u32 = 0;
    let mut x204: FqU1 = 0;
    fq_addcarryx_u32(&mut x203, &mut x204, 0x0, x159, x187);
    let mut x205: u32 = 0;
    let mut x206: FqU1 = 0;
    fq_addcarryx_u32(&mut x205, &mut x206, x204, x161, x189);
    let mut x207: u32 = 0;
    let mut x208: FqU1 = 0;
    fq_addcarryx_u32(&mut x207, &mut x208, x206, x163, x191);
    let mut x209: u32 = 0;
    let mut x210: FqU1 = 0;
    fq_addcarryx_u32(&mut x209, &mut x210, x208, x165, x193);
    let mut x211: u32 = 0;
    let mut x212: FqU1 = 0;
    fq_addcarryx_u32(&mut x211, &mut x212, x210, x167, x195);
    let mut x213: u32 = 0;
    let mut x214: FqU1 = 0;
    fq_addcarryx_u32(&mut x213, &mut x214, x212, x169, x197);
    let mut x215: u32 = 0;
    let mut x216: FqU1 = 0;
    fq_addcarryx_u32(&mut x215, &mut x216, x214, x171, x199);
    let mut x217: u32 = 0;
    let mut x218: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x217,
        &mut x218,
        x216,
        (((x172 as u32) + ((x128 as u32) + ((x112 as u32) + x84))) + ((x156 as u32) + x132)),
        x201,
    );
    let mut x219: u32 = 0;
    let mut x220: u32 = 0;
    fq_mulx_u32(&mut x219, &mut x220, x203, 0xffffffff);
    let mut x221: u32 = 0;
    let mut x222: u32 = 0;
    fq_mulx_u32(&mut x221, &mut x222, x219, 0x12ab655e);
    let mut x223: u32 = 0;
    let mut x224: u32 = 0;
    fq_mulx_u32(&mut x223, &mut x224, x219, 0x9a2ca556);
    let mut x225: u32 = 0;
    let mut x226: u32 = 0;
    fq_mulx_u32(&mut x225, &mut x226, x219, 0x60b44d1e);
    let mut x227: u32 = 0;
    let mut x228: u32 = 0;
    fq_mulx_u32(&mut x227, &mut x228, x219, 0x5c37b001);
    let mut x229: u32 = 0;
    let mut x230: u32 = 0;
    fq_mulx_u32(&mut x229, &mut x230, x219, 0x59aa76fe);
    let mut x231: u32 = 0;
    let mut x232: u32 = 0;
    fq_mulx_u32(&mut x231, &mut x232, x219, 0xd0000001);
    let mut x233: u32 = 0;
    let mut x234: u32 = 0;
    fq_mulx_u32(&mut x233, &mut x234, x219, 0xa118000);
    let mut x235: u32 = 0;
    let mut x236: FqU1 = 0;
    fq_addcarryx_u32(&mut x235, &mut x236, 0x0, x234, x231);
    let mut x237: u32 = 0;
    let mut x238: FqU1 = 0;
    fq_addcarryx_u32(&mut x237, &mut x238, x236, x232, x229);
    let mut x239: u32 = 0;
    let mut x240: FqU1 = 0;
    fq_addcarryx_u32(&mut x239, &mut x240, x238, x230, x227);
    let mut x241: u32 = 0;
    let mut x242: FqU1 = 0;
    fq_addcarryx_u32(&mut x241, &mut x242, x240, x228, x225);
    let mut x243: u32 = 0;
    let mut x244: FqU1 = 0;
    fq_addcarryx_u32(&mut x243, &mut x244, x242, x226, x223);
    let mut x245: u32 = 0;
    let mut x246: FqU1 = 0;
    fq_addcarryx_u32(&mut x245, &mut x246, x244, x224, x221);
    let mut x247: u32 = 0;
    let mut x248: FqU1 = 0;
    fq_addcarryx_u32(&mut x247, &mut x248, 0x0, x203, x219);
    let mut x249: u32 = 0;
    let mut x250: FqU1 = 0;
    fq_addcarryx_u32(&mut x249, &mut x250, x248, x205, x233);
    let mut x251: u32 = 0;
    let mut x252: FqU1 = 0;
    fq_addcarryx_u32(&mut x251, &mut x252, x250, x207, x235);
    let mut x253: u32 = 0;
    let mut x254: FqU1 = 0;
    fq_addcarryx_u32(&mut x253, &mut x254, x252, x209, x237);
    let mut x255: u32 = 0;
    let mut x256: FqU1 = 0;
    fq_addcarryx_u32(&mut x255, &mut x256, x254, x211, x239);
    let mut x257: u32 = 0;
    let mut x258: FqU1 = 0;
    fq_addcarryx_u32(&mut x257, &mut x258, x256, x213, x241);
    let mut x259: u32 = 0;
    let mut x260: FqU1 = 0;
    fq_addcarryx_u32(&mut x259, &mut x260, x258, x215, x243);
    let mut x261: u32 = 0;
    let mut x262: FqU1 = 0;
    fq_addcarryx_u32(&mut x261, &mut x262, x260, x217, x245);
    let mut x263: u32 = 0;
    let mut x264: u32 = 0;
    fq_mulx_u32(&mut x263, &mut x264, x3, 0x11fdae7);
    let mut x265: u32 = 0;
    let mut x266: u32 = 0;
    fq_mulx_u32(&mut x265, &mut x266, x3, 0xeff1c939);
    let mut x267: u32 = 0;
    let mut x268: u32 = 0;
    fq_mulx_u32(&mut x267, &mut x268, x3, 0xa7cc008f);
    let mut x269: u32 = 0;
    let mut x270: u32 = 0;
    fq_mulx_u32(&mut x269, &mut x270, x3, 0xe5dc8593);
    let mut x271: u32 = 0;
    let mut x272: u32 = 0;
    fq_mulx_u32(&mut x271, &mut x272, x3, 0xcc2c27b5);
    let mut x273: u32 = 0;
    let mut x274: u32 = 0;
    fq_mulx_u32(&mut x273, &mut x274, x3, 0x8860591f);
    let mut x275: u32 = 0;
    let mut x276: u32 = 0;
    fq_mulx_u32(&mut x275, &mut x276, x3, 0x25d577ba);
    let mut x277: u32 = 0;
    let mut x278: u32 = 0;
    fq_mulx_u32(&mut x277, &mut x278, x3, 0xb861857b);
    let mut x279: u32 = 0;
    let mut x280: FqU1 = 0;
    fq_addcarryx_u32(&mut x279, &mut x280, 0x0, x278, x275);
    let mut x281: u32 = 0;
    let mut x282: FqU1 = 0;
    fq_addcarryx_u32(&mut x281, &mut x282, x280, x276, x273);
    let mut x283: u32 = 0;
    let mut x284: FqU1 = 0;
    fq_addcarryx_u32(&mut x283, &mut x284, x282, x274, x271);
    let mut x285: u32 = 0;
    let mut x286: FqU1 = 0;
    fq_addcarryx_u32(&mut x285, &mut x286, x284, x272, x269);
    let mut x287: u32 = 0;
    let mut x288: FqU1 = 0;
    fq_addcarryx_u32(&mut x287, &mut x288, x286, x270, x267);
    let mut x289: u32 = 0;
    let mut x290: FqU1 = 0;
    fq_addcarryx_u32(&mut x289, &mut x290, x288, x268, x265);
    let mut x291: u32 = 0;
    let mut x292: FqU1 = 0;
    fq_addcarryx_u32(&mut x291, &mut x292, x290, x266, x263);
    let mut x293: u32 = 0;
    let mut x294: FqU1 = 0;
    fq_addcarryx_u32(&mut x293, &mut x294, 0x0, x249, x277);
    let mut x295: u32 = 0;
    let mut x296: FqU1 = 0;
    fq_addcarryx_u32(&mut x295, &mut x296, x294, x251, x279);
    let mut x297: u32 = 0;
    let mut x298: FqU1 = 0;
    fq_addcarryx_u32(&mut x297, &mut x298, x296, x253, x281);
    let mut x299: u32 = 0;
    let mut x300: FqU1 = 0;
    fq_addcarryx_u32(&mut x299, &mut x300, x298, x255, x283);
    let mut x301: u32 = 0;
    let mut x302: FqU1 = 0;
    fq_addcarryx_u32(&mut x301, &mut x302, x300, x257, x285);
    let mut x303: u32 = 0;
    let mut x304: FqU1 = 0;
    fq_addcarryx_u32(&mut x303, &mut x304, x302, x259, x287);
    let mut x305: u32 = 0;
    let mut x306: FqU1 = 0;
    fq_addcarryx_u32(&mut x305, &mut x306, x304, x261, x289);
    let mut x307: u32 = 0;
    let mut x308: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x307,
        &mut x308,
        x306,
        (((x262 as u32) + ((x218 as u32) + ((x202 as u32) + x174))) + ((x246 as u32) + x222)),
        x291,
    );
    let mut x309: u32 = 0;
    let mut x310: u32 = 0;
    fq_mulx_u32(&mut x309, &mut x310, x293, 0xffffffff);
    let mut x311: u32 = 0;
    let mut x312: u32 = 0;
    fq_mulx_u32(&mut x311, &mut x312, x309, 0x12ab655e);
    let mut x313: u32 = 0;
    let mut x314: u32 = 0;
    fq_mulx_u32(&mut x313, &mut x314, x309, 0x9a2ca556);
    let mut x315: u32 = 0;
    let mut x316: u32 = 0;
    fq_mulx_u32(&mut x315, &mut x316, x309, 0x60b44d1e);
    let mut x317: u32 = 0;
    let mut x318: u32 = 0;
    fq_mulx_u32(&mut x317, &mut x318, x309, 0x5c37b001);
    let mut x319: u32 = 0;
    let mut x320: u32 = 0;
    fq_mulx_u32(&mut x319, &mut x320, x309, 0x59aa76fe);
    let mut x321: u32 = 0;
    let mut x322: u32 = 0;
    fq_mulx_u32(&mut x321, &mut x322, x309, 0xd0000001);
    let mut x323: u32 = 0;
    let mut x324: u32 = 0;
    fq_mulx_u32(&mut x323, &mut x324, x309, 0xa118000);
    let mut x325: u32 = 0;
    let mut x326: FqU1 = 0;
    fq_addcarryx_u32(&mut x325, &mut x326, 0x0, x324, x321);
    let mut x327: u32 = 0;
    let mut x328: FqU1 = 0;
    fq_addcarryx_u32(&mut x327, &mut x328, x326, x322, x319);
    let mut x329: u32 = 0;
    let mut x330: FqU1 = 0;
    fq_addcarryx_u32(&mut x329, &mut x330, x328, x320, x317);
    let mut x331: u32 = 0;
    let mut x332: FqU1 = 0;
    fq_addcarryx_u32(&mut x331, &mut x332, x330, x318, x315);
    let mut x333: u32 = 0;
    let mut x334: FqU1 = 0;
    fq_addcarryx_u32(&mut x333, &mut x334, x332, x316, x313);
    let mut x335: u32 = 0;
    let mut x336: FqU1 = 0;
    fq_addcarryx_u32(&mut x335, &mut x336, x334, x314, x311);
    let mut x337: u32 = 0;
    let mut x338: FqU1 = 0;
    fq_addcarryx_u32(&mut x337, &mut x338, 0x0, x293, x309);
    let mut x339: u32 = 0;
    let mut x340: FqU1 = 0;
    fq_addcarryx_u32(&mut x339, &mut x340, x338, x295, x323);
    let mut x341: u32 = 0;
    let mut x342: FqU1 = 0;
    fq_addcarryx_u32(&mut x341, &mut x342, x340, x297, x325);
    let mut x343: u32 = 0;
    let mut x344: FqU1 = 0;
    fq_addcarryx_u32(&mut x343, &mut x344, x342, x299, x327);
    let mut x345: u32 = 0;
    let mut x346: FqU1 = 0;
    fq_addcarryx_u32(&mut x345, &mut x346, x344, x301, x329);
    let mut x347: u32 = 0;
    let mut x348: FqU1 = 0;
    fq_addcarryx_u32(&mut x347, &mut x348, x346, x303, x331);
    let mut x349: u32 = 0;
    let mut x350: FqU1 = 0;
    fq_addcarryx_u32(&mut x349, &mut x350, x348, x305, x333);
    let mut x351: u32 = 0;
    let mut x352: FqU1 = 0;
    fq_addcarryx_u32(&mut x351, &mut x352, x350, x307, x335);
    let mut x353: u32 = 0;
    let mut x354: u32 = 0;
    fq_mulx_u32(&mut x353, &mut x354, x4, 0x11fdae7);
    let mut x355: u32 = 0;
    let mut x356: u32 = 0;
    fq_mulx_u32(&mut x355, &mut x356, x4, 0xeff1c939);
    let mut x357: u32 = 0;
    let mut x358: u32 = 0;
    fq_mulx_u32(&mut x357, &mut x358, x4, 0xa7cc008f);
    let mut x359: u32 = 0;
    let mut x360: u32 = 0;
    fq_mulx_u32(&mut x359, &mut x360, x4, 0xe5dc8593);
    let mut x361: u32 = 0;
    let mut x362: u32 = 0;
    fq_mulx_u32(&mut x361, &mut x362, x4, 0xcc2c27b5);
    let mut x363: u32 = 0;
    let mut x364: u32 = 0;
    fq_mulx_u32(&mut x363, &mut x364, x4, 0x8860591f);
    let mut x365: u32 = 0;
    let mut x366: u32 = 0;
    fq_mulx_u32(&mut x365, &mut x366, x4, 0x25d577ba);
    let mut x367: u32 = 0;
    let mut x368: u32 = 0;
    fq_mulx_u32(&mut x367, &mut x368, x4, 0xb861857b);
    let mut x369: u32 = 0;
    let mut x370: FqU1 = 0;
    fq_addcarryx_u32(&mut x369, &mut x370, 0x0, x368, x365);
    let mut x371: u32 = 0;
    let mut x372: FqU1 = 0;
    fq_addcarryx_u32(&mut x371, &mut x372, x370, x366, x363);
    let mut x373: u32 = 0;
    let mut x374: FqU1 = 0;
    fq_addcarryx_u32(&mut x373, &mut x374, x372, x364, x361);
    let mut x375: u32 = 0;
    let mut x376: FqU1 = 0;
    fq_addcarryx_u32(&mut x375, &mut x376, x374, x362, x359);
    let mut x377: u32 = 0;
    let mut x378: FqU1 = 0;
    fq_addcarryx_u32(&mut x377, &mut x378, x376, x360, x357);
    let mut x379: u32 = 0;
    let mut x380: FqU1 = 0;
    fq_addcarryx_u32(&mut x379, &mut x380, x378, x358, x355);
    let mut x381: u32 = 0;
    let mut x382: FqU1 = 0;
    fq_addcarryx_u32(&mut x381, &mut x382, x380, x356, x353);
    let mut x383: u32 = 0;
    let mut x384: FqU1 = 0;
    fq_addcarryx_u32(&mut x383, &mut x384, 0x0, x339, x367);
    let mut x385: u32 = 0;
    let mut x386: FqU1 = 0;
    fq_addcarryx_u32(&mut x385, &mut x386, x384, x341, x369);
    let mut x387: u32 = 0;
    let mut x388: FqU1 = 0;
    fq_addcarryx_u32(&mut x387, &mut x388, x386, x343, x371);
    let mut x389: u32 = 0;
    let mut x390: FqU1 = 0;
    fq_addcarryx_u32(&mut x389, &mut x390, x388, x345, x373);
    let mut x391: u32 = 0;
    let mut x392: FqU1 = 0;
    fq_addcarryx_u32(&mut x391, &mut x392, x390, x347, x375);
    let mut x393: u32 = 0;
    let mut x394: FqU1 = 0;
    fq_addcarryx_u32(&mut x393, &mut x394, x392, x349, x377);
    let mut x395: u32 = 0;
    let mut x396: FqU1 = 0;
    fq_addcarryx_u32(&mut x395, &mut x396, x394, x351, x379);
    let mut x397: u32 = 0;
    let mut x398: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x397,
        &mut x398,
        x396,
        (((x352 as u32) + ((x308 as u32) + ((x292 as u32) + x264))) + ((x336 as u32) + x312)),
        x381,
    );
    let mut x399: u32 = 0;
    let mut x400: u32 = 0;
    fq_mulx_u32(&mut x399, &mut x400, x383, 0xffffffff);
    let mut x401: u32 = 0;
    let mut x402: u32 = 0;
    fq_mulx_u32(&mut x401, &mut x402, x399, 0x12ab655e);
    let mut x403: u32 = 0;
    let mut x404: u32 = 0;
    fq_mulx_u32(&mut x403, &mut x404, x399, 0x9a2ca556);
    let mut x405: u32 = 0;
    let mut x406: u32 = 0;
    fq_mulx_u32(&mut x405, &mut x406, x399, 0x60b44d1e);
    let mut x407: u32 = 0;
    let mut x408: u32 = 0;
    fq_mulx_u32(&mut x407, &mut x408, x399, 0x5c37b001);
    let mut x409: u32 = 0;
    let mut x410: u32 = 0;
    fq_mulx_u32(&mut x409, &mut x410, x399, 0x59aa76fe);
    let mut x411: u32 = 0;
    let mut x412: u32 = 0;
    fq_mulx_u32(&mut x411, &mut x412, x399, 0xd0000001);
    let mut x413: u32 = 0;
    let mut x414: u32 = 0;
    fq_mulx_u32(&mut x413, &mut x414, x399, 0xa118000);
    let mut x415: u32 = 0;
    let mut x416: FqU1 = 0;
    fq_addcarryx_u32(&mut x415, &mut x416, 0x0, x414, x411);
    let mut x417: u32 = 0;
    let mut x418: FqU1 = 0;
    fq_addcarryx_u32(&mut x417, &mut x418, x416, x412, x409);
    let mut x419: u32 = 0;
    let mut x420: FqU1 = 0;
    fq_addcarryx_u32(&mut x419, &mut x420, x418, x410, x407);
    let mut x421: u32 = 0;
    let mut x422: FqU1 = 0;
    fq_addcarryx_u32(&mut x421, &mut x422, x420, x408, x405);
    let mut x423: u32 = 0;
    let mut x424: FqU1 = 0;
    fq_addcarryx_u32(&mut x423, &mut x424, x422, x406, x403);
    let mut x425: u32 = 0;
    let mut x426: FqU1 = 0;
    fq_addcarryx_u32(&mut x425, &mut x426, x424, x404, x401);
    let mut x427: u32 = 0;
    let mut x428: FqU1 = 0;
    fq_addcarryx_u32(&mut x427, &mut x428, 0x0, x383, x399);
    let mut x429: u32 = 0;
    let mut x430: FqU1 = 0;
    fq_addcarryx_u32(&mut x429, &mut x430, x428, x385, x413);
    let mut x431: u32 = 0;
    let mut x432: FqU1 = 0;
    fq_addcarryx_u32(&mut x431, &mut x432, x430, x387, x415);
    let mut x433: u32 = 0;
    let mut x434: FqU1 = 0;
    fq_addcarryx_u32(&mut x433, &mut x434, x432, x389, x417);
    let mut x435: u32 = 0;
    let mut x436: FqU1 = 0;
    fq_addcarryx_u32(&mut x435, &mut x436, x434, x391, x419);
    let mut x437: u32 = 0;
    let mut x438: FqU1 = 0;
    fq_addcarryx_u32(&mut x437, &mut x438, x436, x393, x421);
    let mut x439: u32 = 0;
    let mut x440: FqU1 = 0;
    fq_addcarryx_u32(&mut x439, &mut x440, x438, x395, x423);
    let mut x441: u32 = 0;
    let mut x442: FqU1 = 0;
    fq_addcarryx_u32(&mut x441, &mut x442, x440, x397, x425);
    let mut x443: u32 = 0;
    let mut x444: u32 = 0;
    fq_mulx_u32(&mut x443, &mut x444, x5, 0x11fdae7);
    let mut x445: u32 = 0;
    let mut x446: u32 = 0;
    fq_mulx_u32(&mut x445, &mut x446, x5, 0xeff1c939);
    let mut x447: u32 = 0;
    let mut x448: u32 = 0;
    fq_mulx_u32(&mut x447, &mut x448, x5, 0xa7cc008f);
    let mut x449: u32 = 0;
    let mut x450: u32 = 0;
    fq_mulx_u32(&mut x449, &mut x450, x5, 0xe5dc8593);
    let mut x451: u32 = 0;
    let mut x452: u32 = 0;
    fq_mulx_u32(&mut x451, &mut x452, x5, 0xcc2c27b5);
    let mut x453: u32 = 0;
    let mut x454: u32 = 0;
    fq_mulx_u32(&mut x453, &mut x454, x5, 0x8860591f);
    let mut x455: u32 = 0;
    let mut x456: u32 = 0;
    fq_mulx_u32(&mut x455, &mut x456, x5, 0x25d577ba);
    let mut x457: u32 = 0;
    let mut x458: u32 = 0;
    fq_mulx_u32(&mut x457, &mut x458, x5, 0xb861857b);
    let mut x459: u32 = 0;
    let mut x460: FqU1 = 0;
    fq_addcarryx_u32(&mut x459, &mut x460, 0x0, x458, x455);
    let mut x461: u32 = 0;
    let mut x462: FqU1 = 0;
    fq_addcarryx_u32(&mut x461, &mut x462, x460, x456, x453);
    let mut x463: u32 = 0;
    let mut x464: FqU1 = 0;
    fq_addcarryx_u32(&mut x463, &mut x464, x462, x454, x451);
    let mut x465: u32 = 0;
    let mut x466: FqU1 = 0;
    fq_addcarryx_u32(&mut x465, &mut x466, x464, x452, x449);
    let mut x467: u32 = 0;
    let mut x468: FqU1 = 0;
    fq_addcarryx_u32(&mut x467, &mut x468, x466, x450, x447);
    let mut x469: u32 = 0;
    let mut x470: FqU1 = 0;
    fq_addcarryx_u32(&mut x469, &mut x470, x468, x448, x445);
    let mut x471: u32 = 0;
    let mut x472: FqU1 = 0;
    fq_addcarryx_u32(&mut x471, &mut x472, x470, x446, x443);
    let mut x473: u32 = 0;
    let mut x474: FqU1 = 0;
    fq_addcarryx_u32(&mut x473, &mut x474, 0x0, x429, x457);
    let mut x475: u32 = 0;
    let mut x476: FqU1 = 0;
    fq_addcarryx_u32(&mut x475, &mut x476, x474, x431, x459);
    let mut x477: u32 = 0;
    let mut x478: FqU1 = 0;
    fq_addcarryx_u32(&mut x477, &mut x478, x476, x433, x461);
    let mut x479: u32 = 0;
    let mut x480: FqU1 = 0;
    fq_addcarryx_u32(&mut x479, &mut x480, x478, x435, x463);
    let mut x481: u32 = 0;
    let mut x482: FqU1 = 0;
    fq_addcarryx_u32(&mut x481, &mut x482, x480, x437, x465);
    let mut x483: u32 = 0;
    let mut x484: FqU1 = 0;
    fq_addcarryx_u32(&mut x483, &mut x484, x482, x439, x467);
    let mut x485: u32 = 0;
    let mut x486: FqU1 = 0;
    fq_addcarryx_u32(&mut x485, &mut x486, x484, x441, x469);
    let mut x487: u32 = 0;
    let mut x488: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x487,
        &mut x488,
        x486,
        (((x442 as u32) + ((x398 as u32) + ((x382 as u32) + x354))) + ((x426 as u32) + x402)),
        x471,
    );
    let mut x489: u32 = 0;
    let mut x490: u32 = 0;
    fq_mulx_u32(&mut x489, &mut x490, x473, 0xffffffff);
    let mut x491: u32 = 0;
    let mut x492: u32 = 0;
    fq_mulx_u32(&mut x491, &mut x492, x489, 0x12ab655e);
    let mut x493: u32 = 0;
    let mut x494: u32 = 0;
    fq_mulx_u32(&mut x493, &mut x494, x489, 0x9a2ca556);
    let mut x495: u32 = 0;
    let mut x496: u32 = 0;
    fq_mulx_u32(&mut x495, &mut x496, x489, 0x60b44d1e);
    let mut x497: u32 = 0;
    let mut x498: u32 = 0;
    fq_mulx_u32(&mut x497, &mut x498, x489, 0x5c37b001);
    let mut x499: u32 = 0;
    let mut x500: u32 = 0;
    fq_mulx_u32(&mut x499, &mut x500, x489, 0x59aa76fe);
    let mut x501: u32 = 0;
    let mut x502: u32 = 0;
    fq_mulx_u32(&mut x501, &mut x502, x489, 0xd0000001);
    let mut x503: u32 = 0;
    let mut x504: u32 = 0;
    fq_mulx_u32(&mut x503, &mut x504, x489, 0xa118000);
    let mut x505: u32 = 0;
    let mut x506: FqU1 = 0;
    fq_addcarryx_u32(&mut x505, &mut x506, 0x0, x504, x501);
    let mut x507: u32 = 0;
    let mut x508: FqU1 = 0;
    fq_addcarryx_u32(&mut x507, &mut x508, x506, x502, x499);
    let mut x509: u32 = 0;
    let mut x510: FqU1 = 0;
    fq_addcarryx_u32(&mut x509, &mut x510, x508, x500, x497);
    let mut x511: u32 = 0;
    let mut x512: FqU1 = 0;
    fq_addcarryx_u32(&mut x511, &mut x512, x510, x498, x495);
    let mut x513: u32 = 0;
    let mut x514: FqU1 = 0;
    fq_addcarryx_u32(&mut x513, &mut x514, x512, x496, x493);
    let mut x515: u32 = 0;
    let mut x516: FqU1 = 0;
    fq_addcarryx_u32(&mut x515, &mut x516, x514, x494, x491);
    let mut x517: u32 = 0;
    let mut x518: FqU1 = 0;
    fq_addcarryx_u32(&mut x517, &mut x518, 0x0, x473, x489);
    let mut x519: u32 = 0;
    let mut x520: FqU1 = 0;
    fq_addcarryx_u32(&mut x519, &mut x520, x518, x475, x503);
    let mut x521: u32 = 0;
    let mut x522: FqU1 = 0;
    fq_addcarryx_u32(&mut x521, &mut x522, x520, x477, x505);
    let mut x523: u32 = 0;
    let mut x524: FqU1 = 0;
    fq_addcarryx_u32(&mut x523, &mut x524, x522, x479, x507);
    let mut x525: u32 = 0;
    let mut x526: FqU1 = 0;
    fq_addcarryx_u32(&mut x525, &mut x526, x524, x481, x509);
    let mut x527: u32 = 0;
    let mut x528: FqU1 = 0;
    fq_addcarryx_u32(&mut x527, &mut x528, x526, x483, x511);
    let mut x529: u32 = 0;
    let mut x530: FqU1 = 0;
    fq_addcarryx_u32(&mut x529, &mut x530, x528, x485, x513);
    let mut x531: u32 = 0;
    let mut x532: FqU1 = 0;
    fq_addcarryx_u32(&mut x531, &mut x532, x530, x487, x515);
    let mut x533: u32 = 0;
    let mut x534: u32 = 0;
    fq_mulx_u32(&mut x533, &mut x534, x6, 0x11fdae7);
    let mut x535: u32 = 0;
    let mut x536: u32 = 0;
    fq_mulx_u32(&mut x535, &mut x536, x6, 0xeff1c939);
    let mut x537: u32 = 0;
    let mut x538: u32 = 0;
    fq_mulx_u32(&mut x537, &mut x538, x6, 0xa7cc008f);
    let mut x539: u32 = 0;
    let mut x540: u32 = 0;
    fq_mulx_u32(&mut x539, &mut x540, x6, 0xe5dc8593);
    let mut x541: u32 = 0;
    let mut x542: u32 = 0;
    fq_mulx_u32(&mut x541, &mut x542, x6, 0xcc2c27b5);
    let mut x543: u32 = 0;
    let mut x544: u32 = 0;
    fq_mulx_u32(&mut x543, &mut x544, x6, 0x8860591f);
    let mut x545: u32 = 0;
    let mut x546: u32 = 0;
    fq_mulx_u32(&mut x545, &mut x546, x6, 0x25d577ba);
    let mut x547: u32 = 0;
    let mut x548: u32 = 0;
    fq_mulx_u32(&mut x547, &mut x548, x6, 0xb861857b);
    let mut x549: u32 = 0;
    let mut x550: FqU1 = 0;
    fq_addcarryx_u32(&mut x549, &mut x550, 0x0, x548, x545);
    let mut x551: u32 = 0;
    let mut x552: FqU1 = 0;
    fq_addcarryx_u32(&mut x551, &mut x552, x550, x546, x543);
    let mut x553: u32 = 0;
    let mut x554: FqU1 = 0;
    fq_addcarryx_u32(&mut x553, &mut x554, x552, x544, x541);
    let mut x555: u32 = 0;
    let mut x556: FqU1 = 0;
    fq_addcarryx_u32(&mut x555, &mut x556, x554, x542, x539);
    let mut x557: u32 = 0;
    let mut x558: FqU1 = 0;
    fq_addcarryx_u32(&mut x557, &mut x558, x556, x540, x537);
    let mut x559: u32 = 0;
    let mut x560: FqU1 = 0;
    fq_addcarryx_u32(&mut x559, &mut x560, x558, x538, x535);
    let mut x561: u32 = 0;
    let mut x562: FqU1 = 0;
    fq_addcarryx_u32(&mut x561, &mut x562, x560, x536, x533);
    let mut x563: u32 = 0;
    let mut x564: FqU1 = 0;
    fq_addcarryx_u32(&mut x563, &mut x564, 0x0, x519, x547);
    let mut x565: u32 = 0;
    let mut x566: FqU1 = 0;
    fq_addcarryx_u32(&mut x565, &mut x566, x564, x521, x549);
    let mut x567: u32 = 0;
    let mut x568: FqU1 = 0;
    fq_addcarryx_u32(&mut x567, &mut x568, x566, x523, x551);
    let mut x569: u32 = 0;
    let mut x570: FqU1 = 0;
    fq_addcarryx_u32(&mut x569, &mut x570, x568, x525, x553);
    let mut x571: u32 = 0;
    let mut x572: FqU1 = 0;
    fq_addcarryx_u32(&mut x571, &mut x572, x570, x527, x555);
    let mut x573: u32 = 0;
    let mut x574: FqU1 = 0;
    fq_addcarryx_u32(&mut x573, &mut x574, x572, x529, x557);
    let mut x575: u32 = 0;
    let mut x576: FqU1 = 0;
    fq_addcarryx_u32(&mut x575, &mut x576, x574, x531, x559);
    let mut x577: u32 = 0;
    let mut x578: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x577,
        &mut x578,
        x576,
        (((x532 as u32) + ((x488 as u32) + ((x472 as u32) + x444))) + ((x516 as u32) + x492)),
        x561,
    );
    let mut x579: u32 = 0;
    let mut x580: u32 = 0;
    fq_mulx_u32(&mut x579, &mut x580, x563, 0xffffffff);
    let mut x581: u32 = 0;
    let mut x582: u32 = 0;
    fq_mulx_u32(&mut x581, &mut x582, x579, 0x12ab655e);
    let mut x583: u32 = 0;
    let mut x584: u32 = 0;
    fq_mulx_u32(&mut x583, &mut x584, x579, 0x9a2ca556);
    let mut x585: u32 = 0;
    let mut x586: u32 = 0;
    fq_mulx_u32(&mut x585, &mut x586, x579, 0x60b44d1e);
    let mut x587: u32 = 0;
    let mut x588: u32 = 0;
    fq_mulx_u32(&mut x587, &mut x588, x579, 0x5c37b001);
    let mut x589: u32 = 0;
    let mut x590: u32 = 0;
    fq_mulx_u32(&mut x589, &mut x590, x579, 0x59aa76fe);
    let mut x591: u32 = 0;
    let mut x592: u32 = 0;
    fq_mulx_u32(&mut x591, &mut x592, x579, 0xd0000001);
    let mut x593: u32 = 0;
    let mut x594: u32 = 0;
    fq_mulx_u32(&mut x593, &mut x594, x579, 0xa118000);
    let mut x595: u32 = 0;
    let mut x596: FqU1 = 0;
    fq_addcarryx_u32(&mut x595, &mut x596, 0x0, x594, x591);
    let mut x597: u32 = 0;
    let mut x598: FqU1 = 0;
    fq_addcarryx_u32(&mut x597, &mut x598, x596, x592, x589);
    let mut x599: u32 = 0;
    let mut x600: FqU1 = 0;
    fq_addcarryx_u32(&mut x599, &mut x600, x598, x590, x587);
    let mut x601: u32 = 0;
    let mut x602: FqU1 = 0;
    fq_addcarryx_u32(&mut x601, &mut x602, x600, x588, x585);
    let mut x603: u32 = 0;
    let mut x604: FqU1 = 0;
    fq_addcarryx_u32(&mut x603, &mut x604, x602, x586, x583);
    let mut x605: u32 = 0;
    let mut x606: FqU1 = 0;
    fq_addcarryx_u32(&mut x605, &mut x606, x604, x584, x581);
    let mut x607: u32 = 0;
    let mut x608: FqU1 = 0;
    fq_addcarryx_u32(&mut x607, &mut x608, 0x0, x563, x579);
    let mut x609: u32 = 0;
    let mut x610: FqU1 = 0;
    fq_addcarryx_u32(&mut x609, &mut x610, x608, x565, x593);
    let mut x611: u32 = 0;
    let mut x612: FqU1 = 0;
    fq_addcarryx_u32(&mut x611, &mut x612, x610, x567, x595);
    let mut x613: u32 = 0;
    let mut x614: FqU1 = 0;
    fq_addcarryx_u32(&mut x613, &mut x614, x612, x569, x597);
    let mut x615: u32 = 0;
    let mut x616: FqU1 = 0;
    fq_addcarryx_u32(&mut x615, &mut x616, x614, x571, x599);
    let mut x617: u32 = 0;
    let mut x618: FqU1 = 0;
    fq_addcarryx_u32(&mut x617, &mut x618, x616, x573, x601);
    let mut x619: u32 = 0;
    let mut x620: FqU1 = 0;
    fq_addcarryx_u32(&mut x619, &mut x620, x618, x575, x603);
    let mut x621: u32 = 0;
    let mut x622: FqU1 = 0;
    fq_addcarryx_u32(&mut x621, &mut x622, x620, x577, x605);
    let mut x623: u32 = 0;
    let mut x624: u32 = 0;
    fq_mulx_u32(&mut x623, &mut x624, x7, 0x11fdae7);
    let mut x625: u32 = 0;
    let mut x626: u32 = 0;
    fq_mulx_u32(&mut x625, &mut x626, x7, 0xeff1c939);
    let mut x627: u32 = 0;
    let mut x628: u32 = 0;
    fq_mulx_u32(&mut x627, &mut x628, x7, 0xa7cc008f);
    let mut x629: u32 = 0;
    let mut x630: u32 = 0;
    fq_mulx_u32(&mut x629, &mut x630, x7, 0xe5dc8593);
    let mut x631: u32 = 0;
    let mut x632: u32 = 0;
    fq_mulx_u32(&mut x631, &mut x632, x7, 0xcc2c27b5);
    let mut x633: u32 = 0;
    let mut x634: u32 = 0;
    fq_mulx_u32(&mut x633, &mut x634, x7, 0x8860591f);
    let mut x635: u32 = 0;
    let mut x636: u32 = 0;
    fq_mulx_u32(&mut x635, &mut x636, x7, 0x25d577ba);
    let mut x637: u32 = 0;
    let mut x638: u32 = 0;
    fq_mulx_u32(&mut x637, &mut x638, x7, 0xb861857b);
    let mut x639: u32 = 0;
    let mut x640: FqU1 = 0;
    fq_addcarryx_u32(&mut x639, &mut x640, 0x0, x638, x635);
    let mut x641: u32 = 0;
    let mut x642: FqU1 = 0;
    fq_addcarryx_u32(&mut x641, &mut x642, x640, x636, x633);
    let mut x643: u32 = 0;
    let mut x644: FqU1 = 0;
    fq_addcarryx_u32(&mut x643, &mut x644, x642, x634, x631);
    let mut x645: u32 = 0;
    let mut x646: FqU1 = 0;
    fq_addcarryx_u32(&mut x645, &mut x646, x644, x632, x629);
    let mut x647: u32 = 0;
    let mut x648: FqU1 = 0;
    fq_addcarryx_u32(&mut x647, &mut x648, x646, x630, x627);
    let mut x649: u32 = 0;
    let mut x650: FqU1 = 0;
    fq_addcarryx_u32(&mut x649, &mut x650, x648, x628, x625);
    let mut x651: u32 = 0;
    let mut x652: FqU1 = 0;
    fq_addcarryx_u32(&mut x651, &mut x652, x650, x626, x623);
    let mut x653: u32 = 0;
    let mut x654: FqU1 = 0;
    fq_addcarryx_u32(&mut x653, &mut x654, 0x0, x609, x637);
    let mut x655: u32 = 0;
    let mut x656: FqU1 = 0;
    fq_addcarryx_u32(&mut x655, &mut x656, x654, x611, x639);
    let mut x657: u32 = 0;
    let mut x658: FqU1 = 0;
    fq_addcarryx_u32(&mut x657, &mut x658, x656, x613, x641);
    let mut x659: u32 = 0;
    let mut x660: FqU1 = 0;
    fq_addcarryx_u32(&mut x659, &mut x660, x658, x615, x643);
    let mut x661: u32 = 0;
    let mut x662: FqU1 = 0;
    fq_addcarryx_u32(&mut x661, &mut x662, x660, x617, x645);
    let mut x663: u32 = 0;
    let mut x664: FqU1 = 0;
    fq_addcarryx_u32(&mut x663, &mut x664, x662, x619, x647);
    let mut x665: u32 = 0;
    let mut x666: FqU1 = 0;
    fq_addcarryx_u32(&mut x665, &mut x666, x664, x621, x649);
    let mut x667: u32 = 0;
    let mut x668: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x667,
        &mut x668,
        x666,
        (((x622 as u32) + ((x578 as u32) + ((x562 as u32) + x534))) + ((x606 as u32) + x582)),
        x651,
    );
    let mut x669: u32 = 0;
    let mut x670: u32 = 0;
    fq_mulx_u32(&mut x669, &mut x670, x653, 0xffffffff);
    let mut x671: u32 = 0;
    let mut x672: u32 = 0;
    fq_mulx_u32(&mut x671, &mut x672, x669, 0x12ab655e);
    let mut x673: u32 = 0;
    let mut x674: u32 = 0;
    fq_mulx_u32(&mut x673, &mut x674, x669, 0x9a2ca556);
    let mut x675: u32 = 0;
    let mut x676: u32 = 0;
    fq_mulx_u32(&mut x675, &mut x676, x669, 0x60b44d1e);
    let mut x677: u32 = 0;
    let mut x678: u32 = 0;
    fq_mulx_u32(&mut x677, &mut x678, x669, 0x5c37b001);
    let mut x679: u32 = 0;
    let mut x680: u32 = 0;
    fq_mulx_u32(&mut x679, &mut x680, x669, 0x59aa76fe);
    let mut x681: u32 = 0;
    let mut x682: u32 = 0;
    fq_mulx_u32(&mut x681, &mut x682, x669, 0xd0000001);
    let mut x683: u32 = 0;
    let mut x684: u32 = 0;
    fq_mulx_u32(&mut x683, &mut x684, x669, 0xa118000);
    let mut x685: u32 = 0;
    let mut x686: FqU1 = 0;
    fq_addcarryx_u32(&mut x685, &mut x686, 0x0, x684, x681);
    let mut x687: u32 = 0;
    let mut x688: FqU1 = 0;
    fq_addcarryx_u32(&mut x687, &mut x688, x686, x682, x679);
    let mut x689: u32 = 0;
    let mut x690: FqU1 = 0;
    fq_addcarryx_u32(&mut x689, &mut x690, x688, x680, x677);
    let mut x691: u32 = 0;
    let mut x692: FqU1 = 0;
    fq_addcarryx_u32(&mut x691, &mut x692, x690, x678, x675);
    let mut x693: u32 = 0;
    let mut x694: FqU1 = 0;
    fq_addcarryx_u32(&mut x693, &mut x694, x692, x676, x673);
    let mut x695: u32 = 0;
    let mut x696: FqU1 = 0;
    fq_addcarryx_u32(&mut x695, &mut x696, x694, x674, x671);
    let mut x697: u32 = 0;
    let mut x698: FqU1 = 0;
    fq_addcarryx_u32(&mut x697, &mut x698, 0x0, x653, x669);
    let mut x699: u32 = 0;
    let mut x700: FqU1 = 0;
    fq_addcarryx_u32(&mut x699, &mut x700, x698, x655, x683);
    let mut x701: u32 = 0;
    let mut x702: FqU1 = 0;
    fq_addcarryx_u32(&mut x701, &mut x702, x700, x657, x685);
    let mut x703: u32 = 0;
    let mut x704: FqU1 = 0;
    fq_addcarryx_u32(&mut x703, &mut x704, x702, x659, x687);
    let mut x705: u32 = 0;
    let mut x706: FqU1 = 0;
    fq_addcarryx_u32(&mut x705, &mut x706, x704, x661, x689);
    let mut x707: u32 = 0;
    let mut x708: FqU1 = 0;
    fq_addcarryx_u32(&mut x707, &mut x708, x706, x663, x691);
    let mut x709: u32 = 0;
    let mut x710: FqU1 = 0;
    fq_addcarryx_u32(&mut x709, &mut x710, x708, x665, x693);
    let mut x711: u32 = 0;
    let mut x712: FqU1 = 0;
    fq_addcarryx_u32(&mut x711, &mut x712, x710, x667, x695);
    let x713: u32 =
        (((x712 as u32) + ((x668 as u32) + ((x652 as u32) + x624))) + ((x696 as u32) + x672));
    let mut x714: u32 = 0;
    let mut x715: FqU1 = 0;
    fq_subborrowx_u32(&mut x714, &mut x715, 0x0, x699, (0x1 as u32));
    let mut x716: u32 = 0;
    let mut x717: FqU1 = 0;
    fq_subborrowx_u32(&mut x716, &mut x717, x715, x701, 0xa118000);
    let mut x718: u32 = 0;
    let mut x719: FqU1 = 0;
    fq_subborrowx_u32(&mut x718, &mut x719, x717, x703, 0xd0000001);
    let mut x720: u32 = 0;
    let mut x721: FqU1 = 0;
    fq_subborrowx_u32(&mut x720, &mut x721, x719, x705, 0x59aa76fe);
    let mut x722: u32 = 0;
    let mut x723: FqU1 = 0;
    fq_subborrowx_u32(&mut x722, &mut x723, x721, x707, 0x5c37b001);
    let mut x724: u32 = 0;
    let mut x725: FqU1 = 0;
    fq_subborrowx_u32(&mut x724, &mut x725, x723, x709, 0x60b44d1e);
    let mut x726: u32 = 0;
    let mut x727: FqU1 = 0;
    fq_subborrowx_u32(&mut x726, &mut x727, x725, x711, 0x9a2ca556);
    let mut x728: u32 = 0;
    let mut x729: FqU1 = 0;
    fq_subborrowx_u32(&mut x728, &mut x729, x727, x713, 0x12ab655e);
    let mut x730: u32 = 0;
    let mut x731: FqU1 = 0;
    fq_subborrowx_u32(&mut x730, &mut x731, x729, (0x0 as u32), (0x0 as u32));
    let mut x732: u32 = 0;
    fq_cmovznz_u32(&mut x732, x731, x714, x699);
    let mut x733: u32 = 0;
    fq_cmovznz_u32(&mut x733, x731, x716, x701);
    let mut x734: u32 = 0;
    fq_cmovznz_u32(&mut x734, x731, x718, x703);
    let mut x735: u32 = 0;
    fq_cmovznz_u32(&mut x735, x731, x720, x705);
    let mut x736: u32 = 0;
    fq_cmovznz_u32(&mut x736, x731, x722, x707);
    let mut x737: u32 = 0;
    fq_cmovznz_u32(&mut x737, x731, x724, x709);
    let mut x738: u32 = 0;
    fq_cmovznz_u32(&mut x738, x731, x726, x711);
    let mut x739: u32 = 0;
    fq_cmovznz_u32(&mut x739, x731, x728, x713);
    out1[0] = x732;
    out1[1] = x733;
    out1[2] = x734;
    out1[3] = x735;
    out1[4] = x736;
    out1[5] = x737;
    out1[6] = x738;
    out1[7] = x739;
}

/// The function fq_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
pub fn fq_nonzero(out1: &mut u32, arg1: &[u32; 8]) {
    let x1: u32 = ((arg1[0])
        | ((arg1[1])
            | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | (arg1[7]))))))));
    *out1 = x1;
}

/// The function fq_selectznz is a multi-limb conditional select.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn fq_selectznz(out1: &mut [u32; 8], arg1: FqU1, arg2: &[u32; 8], arg3: &[u32; 8]) {
    let mut x1: u32 = 0;
    fq_cmovznz_u32(&mut x1, arg1, (arg2[0]), (arg3[0]));
    let mut x2: u32 = 0;
    fq_cmovznz_u32(&mut x2, arg1, (arg2[1]), (arg3[1]));
    let mut x3: u32 = 0;
    fq_cmovznz_u32(&mut x3, arg1, (arg2[2]), (arg3[2]));
    let mut x4: u32 = 0;
    fq_cmovznz_u32(&mut x4, arg1, (arg2[3]), (arg3[3]));
    let mut x5: u32 = 0;
    fq_cmovznz_u32(&mut x5, arg1, (arg2[4]), (arg3[4]));
    let mut x6: u32 = 0;
    fq_cmovznz_u32(&mut x6, arg1, (arg2[5]), (arg3[5]));
    let mut x7: u32 = 0;
    fq_cmovznz_u32(&mut x7, arg1, (arg2[6]), (arg3[6]));
    let mut x8: u32 = 0;
    fq_cmovznz_u32(&mut x8, arg1, (arg2[7]), (arg3[7]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
}

/// The function fq_to_bytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0x1fffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1f]]
pub fn fq_to_bytes(out1: &mut [u8; 32], arg1: &[u32; 8]) {
    let x1: u32 = (arg1[7]);
    let x2: u32 = (arg1[6]);
    let x3: u32 = (arg1[5]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[3]);
    let x6: u32 = (arg1[2]);
    let x7: u32 = (arg1[1]);
    let x8: u32 = (arg1[0]);
    let x9: u8 = ((x8 & (0xff as u32)) as u8);
    let x10: u32 = (x8 >> 8);
    let x11: u8 = ((x10 & (0xff as u32)) as u8);
    let x12: u32 = (x10 >> 8);
    let x13: u8 = ((x12 & (0xff as u32)) as u8);
    let x14: u8 = ((x12 >> 8) as u8);
    let x15: u8 = ((x7 & (0xff as u32)) as u8);
    let x16: u32 = (x7 >> 8);
    let x17: u8 = ((x16 & (0xff as u32)) as u8);
    let x18: u32 = (x16 >> 8);
    let x19: u8 = ((x18 & (0xff as u32)) as u8);
    let x20: u8 = ((x18 >> 8) as u8);
    let x21: u8 = ((x6 & (0xff as u32)) as u8);
    let x22: u32 = (x6 >> 8);
    let x23: u8 = ((x22 & (0xff as u32)) as u8);
    let x24: u32 = (x22 >> 8);
    let x25: u8 = ((x24 & (0xff as u32)) as u8);
    let x26: u8 = ((x24 >> 8) as u8);
    let x27: u8 = ((x5 & (0xff as u32)) as u8);
    let x28: u32 = (x5 >> 8);
    let x29: u8 = ((x28 & (0xff as u32)) as u8);
    let x30: u32 = (x28 >> 8);
    let x31: u8 = ((x30 & (0xff as u32)) as u8);
    let x32: u8 = ((x30 >> 8) as u8);
    let x33: u8 = ((x4 & (0xff as u32)) as u8);
    let x34: u32 = (x4 >> 8);
    let x35: u8 = ((x34 & (0xff as u32)) as u8);
    let x36: u32 = (x34 >> 8);
    let x37: u8 = ((x36 & (0xff as u32)) as u8);
    let x38: u8 = ((x36 >> 8) as u8);
    let x39: u8 = ((x3 & (0xff as u32)) as u8);
    let x40: u32 = (x3 >> 8);
    let x41: u8 = ((x40 & (0xff as u32)) as u8);
    let x42: u32 = (x40 >> 8);
    let x43: u8 = ((x42 & (0xff as u32)) as u8);
    let x44: u8 = ((x42 >> 8) as u8);
    let x45: u8 = ((x2 & (0xff as u32)) as u8);
    let x46: u32 = (x2 >> 8);
    let x47: u8 = ((x46 & (0xff as u32)) as u8);
    let x48: u32 = (x46 >> 8);
    let x49: u8 = ((x48 & (0xff as u32)) as u8);
    let x50: u8 = ((x48 >> 8) as u8);
    let x51: u8 = ((x1 & (0xff as u32)) as u8);
    let x52: u32 = (x1 >> 8);
    let x53: u8 = ((x52 & (0xff as u32)) as u8);
    let x54: u32 = (x52 >> 8);
    let x55: u8 = ((x54 & (0xff as u32)) as u8);
    let x56: u8 = ((x54 >> 8) as u8);
    out1[0] = x9;
    out1[1] = x11;
    out1[2] = x13;
    out1[3] = x14;
    out1[4] = x15;
    out1[5] = x17;
    out1[6] = x19;
    out1[7] = x20;
    out1[8] = x21;
    out1[9] = x23;
    out1[10] = x25;
    out1[11] = x26;
    out1[12] = x27;
    out1[13] = x29;
    out1[14] = x31;
    out1[15] = x32;
    out1[16] = x33;
    out1[17] = x35;
    out1[18] = x37;
    out1[19] = x38;
    out1[20] = x39;
    out1[21] = x41;
    out1[22] = x43;
    out1[23] = x44;
    out1[24] = x45;
    out1[25] = x47;
    out1[26] = x49;
    out1[27] = x50;
    out1[28] = x51;
    out1[29] = x53;
    out1[30] = x55;
    out1[31] = x56;
}

/// The function fq_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
///
/// Preconditions:
///   0 ≤ bytes_eval arg1 < m
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1f]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0x1fffffff]]
pub fn fq_from_bytes(out1: &mut [u32; 8], arg1: &[u8; 32]) {
    let x1: u32 = (((arg1[31]) as u32) << 24);
    let x2: u32 = (((arg1[30]) as u32) << 16);
    let x3: u32 = (((arg1[29]) as u32) << 8);
    let x4: u8 = (arg1[28]);
    let x5: u32 = (((arg1[27]) as u32) << 24);
    let x6: u32 = (((arg1[26]) as u32) << 16);
    let x7: u32 = (((arg1[25]) as u32) << 8);
    let x8: u8 = (arg1[24]);
    let x9: u32 = (((arg1[23]) as u32) << 24);
    let x10: u32 = (((arg1[22]) as u32) << 16);
    let x11: u32 = (((arg1[21]) as u32) << 8);
    let x12: u8 = (arg1[20]);
    let x13: u32 = (((arg1[19]) as u32) << 24);
    let x14: u32 = (((arg1[18]) as u32) << 16);
    let x15: u32 = (((arg1[17]) as u32) << 8);
    let x16: u8 = (arg1[16]);
    let x17: u32 = (((arg1[15]) as u32) << 24);
    let x18: u32 = (((arg1[14]) as u32) << 16);
    let x19: u32 = (((arg1[13]) as u32) << 8);
    let x20: u8 = (arg1[12]);
    let x21: u32 = (((arg1[11]) as u32) << 24);
    let x22: u32 = (((arg1[10]) as u32) << 16);
    let x23: u32 = (((arg1[9]) as u32) << 8);
    let x24: u8 = (arg1[8]);
    let x25: u32 = (((arg1[7]) as u32) << 24);
    let x26: u32 = (((arg1[6]) as u32) << 16);
    let x27: u32 = (((arg1[5]) as u32) << 8);
    let x28: u8 = (arg1[4]);
    let x29: u32 = (((arg1[3]) as u32) << 24);
    let x30: u32 = (((arg1[2]) as u32) << 16);
    let x31: u32 = (((arg1[1]) as u32) << 8);
    let x32: u8 = (arg1[0]);
    let x33: u32 = (x31 + (x32 as u32));
    let x34: u32 = (x30 + x33);
    let x35: u32 = (x29 + x34);
    let x36: u32 = (x27 + (x28 as u32));
    let x37: u32 = (x26 + x36);
    let x38: u32 = (x25 + x37);
    let x39: u32 = (x23 + (x24 as u32));
    let x40: u32 = (x22 + x39);
    let x41: u32 = (x21 + x40);
    let x42: u32 = (x19 + (x20 as u32));
    let x43: u32 = (x18 + x42);
    let x44: u32 = (x17 + x43);
    let x45: u32 = (x15 + (x16 as u32));
    let x46: u32 = (x14 + x45);
    let x47: u32 = (x13 + x46);
    let x48: u32 = (x11 + (x12 as u32));
    let x49: u32 = (x10 + x48);
    let x50: u32 = (x9 + x49);
    let x51: u32 = (x7 + (x8 as u32));
    let x52: u32 = (x6 + x51);
    let x53: u32 = (x5 + x52);
    let x54: u32 = (x3 + (x4 as u32));
    let x55: u32 = (x2 + x54);
    let x56: u32 = (x1 + x55);
    out1[0] = x35;
    out1[1] = x38;
    out1[2] = x41;
    out1[3] = x44;
    out1[4] = x47;
    out1[5] = x50;
    out1[6] = x53;
    out1[7] = x56;
}

/// The function fq_set_one returns the field element one in the Montgomery domain.
///
/// Postconditions:
///   eval (from_montgomery out1) mod m = 1 mod m
///   0 ≤ eval out1 < m
///
pub fn fq_set_one(out1: &mut FqMontgomeryDomainFieldElement) {
    out1[0] = 0xfffffff3;
    out1[1] = 0x7d1c7fff;
    out1[2] = 0x6ffffff2;
    out1[3] = 0x7257f50f;
    out1[4] = 0x512c0fee;
    out1[5] = 0x16d81575;
    out1[6] = 0x2bbb9a9d;
    out1[7] = 0xd4bda32;
}

/// The function fq_msat returns the saturated representation of the prime modulus.
///
/// Postconditions:
///   twos_complement_eval out1 = m
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn fq_msat(out1: &mut [u32; 9]) {
    out1[0] = (0x1 as u32);
    out1[1] = 0xa118000;
    out1[2] = 0xd0000001;
    out1[3] = 0x59aa76fe;
    out1[4] = 0x5c37b001;
    out1[5] = 0x60b44d1e;
    out1[6] = 0x9a2ca556;
    out1[7] = 0x12ab655e;
    out1[8] = (0x0 as u32);
}

/// The function fq_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
///
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn fq_divstep_precomp(out1: &mut [u32; 8]) {
    out1[0] = 0xb566adb8;
    out1[1] = 0x71a88a38;
    out1[2] = 0xd16832cf;
    out1[3] = 0xedffbafe;
    out1[4] = 0x2dacce53;
    out1[5] = 0x737b5ac8;
    out1[6] = 0x41687434;
    out1[7] = 0x1050943e;
}

/// The function fq_divstep computes a divstep.
///
/// Preconditions:
///   0 ≤ eval arg4 < m
///   0 ≤ eval arg5 < m
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
///   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
///   0 ≤ eval out5 < m
///   0 ≤ eval out5 < m
///   0 ≤ eval out2 < m
///   0 ≤ eval out3 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn fq_divstep(
    out1: &mut u32,
    out2: &mut [u32; 9],
    out3: &mut [u32; 9],
    out4: &mut [u32; 8],
    out5: &mut [u32; 8],
    arg1: u32,
    arg2: &[u32; 9],
    arg3: &[u32; 9],
    arg4: &[u32; 8],
    arg5: &[u32; 8],
) {
    let mut x1: u32 = 0;
    let mut x2: FqU1 = 0;
    fq_addcarryx_u32(&mut x1, &mut x2, 0x0, (!arg1), (0x1 as u32));
    let x3: FqU1 = (((x1 >> 31) as FqU1) & (((arg3[0]) & (0x1 as u32)) as FqU1));
    let mut x4: u32 = 0;
    let mut x5: FqU1 = 0;
    fq_addcarryx_u32(&mut x4, &mut x5, 0x0, (!arg1), (0x1 as u32));
    let mut x6: u32 = 0;
    fq_cmovznz_u32(&mut x6, x3, arg1, x4);
    let mut x7: u32 = 0;
    fq_cmovznz_u32(&mut x7, x3, (arg2[0]), (arg3[0]));
    let mut x8: u32 = 0;
    fq_cmovznz_u32(&mut x8, x3, (arg2[1]), (arg3[1]));
    let mut x9: u32 = 0;
    fq_cmovznz_u32(&mut x9, x3, (arg2[2]), (arg3[2]));
    let mut x10: u32 = 0;
    fq_cmovznz_u32(&mut x10, x3, (arg2[3]), (arg3[3]));
    let mut x11: u32 = 0;
    fq_cmovznz_u32(&mut x11, x3, (arg2[4]), (arg3[4]));
    let mut x12: u32 = 0;
    fq_cmovznz_u32(&mut x12, x3, (arg2[5]), (arg3[5]));
    let mut x13: u32 = 0;
    fq_cmovznz_u32(&mut x13, x3, (arg2[6]), (arg3[6]));
    let mut x14: u32 = 0;
    fq_cmovznz_u32(&mut x14, x3, (arg2[7]), (arg3[7]));
    let mut x15: u32 = 0;
    fq_cmovznz_u32(&mut x15, x3, (arg2[8]), (arg3[8]));
    let mut x16: u32 = 0;
    let mut x17: FqU1 = 0;
    fq_addcarryx_u32(&mut x16, &mut x17, 0x0, (0x1 as u32), (!(arg2[0])));
    let mut x18: u32 = 0;
    let mut x19: FqU1 = 0;
    fq_addcarryx_u32(&mut x18, &mut x19, x17, (0x0 as u32), (!(arg2[1])));
    let mut x20: u32 = 0;
    let mut x21: FqU1 = 0;
    fq_addcarryx_u32(&mut x20, &mut x21, x19, (0x0 as u32), (!(arg2[2])));
    let mut x22: u32 = 0;
    let mut x23: FqU1 = 0;
    fq_addcarryx_u32(&mut x22, &mut x23, x21, (0x0 as u32), (!(arg2[3])));
    let mut x24: u32 = 0;
    let mut x25: FqU1 = 0;
    fq_addcarryx_u32(&mut x24, &mut x25, x23, (0x0 as u32), (!(arg2[4])));
    let mut x26: u32 = 0;
    let mut x27: FqU1 = 0;
    fq_addcarryx_u32(&mut x26, &mut x27, x25, (0x0 as u32), (!(arg2[5])));
    let mut x28: u32 = 0;
    let mut x29: FqU1 = 0;
    fq_addcarryx_u32(&mut x28, &mut x29, x27, (0x0 as u32), (!(arg2[6])));
    let mut x30: u32 = 0;
    let mut x31: FqU1 = 0;
    fq_addcarryx_u32(&mut x30, &mut x31, x29, (0x0 as u32), (!(arg2[7])));
    let mut x32: u32 = 0;
    let mut x33: FqU1 = 0;
    fq_addcarryx_u32(&mut x32, &mut x33, x31, (0x0 as u32), (!(arg2[8])));
    let mut x34: u32 = 0;
    fq_cmovznz_u32(&mut x34, x3, (arg3[0]), x16);
    let mut x35: u32 = 0;
    fq_cmovznz_u32(&mut x35, x3, (arg3[1]), x18);
    let mut x36: u32 = 0;
    fq_cmovznz_u32(&mut x36, x3, (arg3[2]), x20);
    let mut x37: u32 = 0;
    fq_cmovznz_u32(&mut x37, x3, (arg3[3]), x22);
    let mut x38: u32 = 0;
    fq_cmovznz_u32(&mut x38, x3, (arg3[4]), x24);
    let mut x39: u32 = 0;
    fq_cmovznz_u32(&mut x39, x3, (arg3[5]), x26);
    let mut x40: u32 = 0;
    fq_cmovznz_u32(&mut x40, x3, (arg3[6]), x28);
    let mut x41: u32 = 0;
    fq_cmovznz_u32(&mut x41, x3, (arg3[7]), x30);
    let mut x42: u32 = 0;
    fq_cmovznz_u32(&mut x42, x3, (arg3[8]), x32);
    let mut x43: u32 = 0;
    fq_cmovznz_u32(&mut x43, x3, (arg4[0]), (arg5[0]));
    let mut x44: u32 = 0;
    fq_cmovznz_u32(&mut x44, x3, (arg4[1]), (arg5[1]));
    let mut x45: u32 = 0;
    fq_cmovznz_u32(&mut x45, x3, (arg4[2]), (arg5[2]));
    let mut x46: u32 = 0;
    fq_cmovznz_u32(&mut x46, x3, (arg4[3]), (arg5[3]));
    let mut x47: u32 = 0;
    fq_cmovznz_u32(&mut x47, x3, (arg4[4]), (arg5[4]));
    let mut x48: u32 = 0;
    fq_cmovznz_u32(&mut x48, x3, (arg4[5]), (arg5[5]));
    let mut x49: u32 = 0;
    fq_cmovznz_u32(&mut x49, x3, (arg4[6]), (arg5[6]));
    let mut x50: u32 = 0;
    fq_cmovznz_u32(&mut x50, x3, (arg4[7]), (arg5[7]));
    let mut x51: u32 = 0;
    let mut x52: FqU1 = 0;
    fq_addcarryx_u32(&mut x51, &mut x52, 0x0, x43, x43);
    let mut x53: u32 = 0;
    let mut x54: FqU1 = 0;
    fq_addcarryx_u32(&mut x53, &mut x54, x52, x44, x44);
    let mut x55: u32 = 0;
    let mut x56: FqU1 = 0;
    fq_addcarryx_u32(&mut x55, &mut x56, x54, x45, x45);
    let mut x57: u32 = 0;
    let mut x58: FqU1 = 0;
    fq_addcarryx_u32(&mut x57, &mut x58, x56, x46, x46);
    let mut x59: u32 = 0;
    let mut x60: FqU1 = 0;
    fq_addcarryx_u32(&mut x59, &mut x60, x58, x47, x47);
    let mut x61: u32 = 0;
    let mut x62: FqU1 = 0;
    fq_addcarryx_u32(&mut x61, &mut x62, x60, x48, x48);
    let mut x63: u32 = 0;
    let mut x64: FqU1 = 0;
    fq_addcarryx_u32(&mut x63, &mut x64, x62, x49, x49);
    let mut x65: u32 = 0;
    let mut x66: FqU1 = 0;
    fq_addcarryx_u32(&mut x65, &mut x66, x64, x50, x50);
    let mut x67: u32 = 0;
    let mut x68: FqU1 = 0;
    fq_subborrowx_u32(&mut x67, &mut x68, 0x0, x51, (0x1 as u32));
    let mut x69: u32 = 0;
    let mut x70: FqU1 = 0;
    fq_subborrowx_u32(&mut x69, &mut x70, x68, x53, 0xa118000);
    let mut x71: u32 = 0;
    let mut x72: FqU1 = 0;
    fq_subborrowx_u32(&mut x71, &mut x72, x70, x55, 0xd0000001);
    let mut x73: u32 = 0;
    let mut x74: FqU1 = 0;
    fq_subborrowx_u32(&mut x73, &mut x74, x72, x57, 0x59aa76fe);
    let mut x75: u32 = 0;
    let mut x76: FqU1 = 0;
    fq_subborrowx_u32(&mut x75, &mut x76, x74, x59, 0x5c37b001);
    let mut x77: u32 = 0;
    let mut x78: FqU1 = 0;
    fq_subborrowx_u32(&mut x77, &mut x78, x76, x61, 0x60b44d1e);
    let mut x79: u32 = 0;
    let mut x80: FqU1 = 0;
    fq_subborrowx_u32(&mut x79, &mut x80, x78, x63, 0x9a2ca556);
    let mut x81: u32 = 0;
    let mut x82: FqU1 = 0;
    fq_subborrowx_u32(&mut x81, &mut x82, x80, x65, 0x12ab655e);
    let mut x83: u32 = 0;
    let mut x84: FqU1 = 0;
    fq_subborrowx_u32(&mut x83, &mut x84, x82, (x66 as u32), (0x0 as u32));
    let x85: u32 = (arg4[7]);
    let x86: u32 = (arg4[6]);
    let x87: u32 = (arg4[5]);
    let x88: u32 = (arg4[4]);
    let x89: u32 = (arg4[3]);
    let x90: u32 = (arg4[2]);
    let x91: u32 = (arg4[1]);
    let x92: u32 = (arg4[0]);
    let mut x93: u32 = 0;
    let mut x94: FqU1 = 0;
    fq_subborrowx_u32(&mut x93, &mut x94, 0x0, (0x0 as u32), x92);
    let mut x95: u32 = 0;
    let mut x96: FqU1 = 0;
    fq_subborrowx_u32(&mut x95, &mut x96, x94, (0x0 as u32), x91);
    let mut x97: u32 = 0;
    let mut x98: FqU1 = 0;
    fq_subborrowx_u32(&mut x97, &mut x98, x96, (0x0 as u32), x90);
    let mut x99: u32 = 0;
    let mut x100: FqU1 = 0;
    fq_subborrowx_u32(&mut x99, &mut x100, x98, (0x0 as u32), x89);
    let mut x101: u32 = 0;
    let mut x102: FqU1 = 0;
    fq_subborrowx_u32(&mut x101, &mut x102, x100, (0x0 as u32), x88);
    let mut x103: u32 = 0;
    let mut x104: FqU1 = 0;
    fq_subborrowx_u32(&mut x103, &mut x104, x102, (0x0 as u32), x87);
    let mut x105: u32 = 0;
    let mut x106: FqU1 = 0;
    fq_subborrowx_u32(&mut x105, &mut x106, x104, (0x0 as u32), x86);
    let mut x107: u32 = 0;
    let mut x108: FqU1 = 0;
    fq_subborrowx_u32(&mut x107, &mut x108, x106, (0x0 as u32), x85);
    let mut x109: u32 = 0;
    fq_cmovznz_u32(&mut x109, x108, (0x0 as u32), 0xffffffff);
    let mut x110: u32 = 0;
    let mut x111: FqU1 = 0;
    fq_addcarryx_u32(
        &mut x110,
        &mut x111,
        0x0,
        x93,
        (((x109 & (0x1 as u32)) as FqU1) as u32),
    );
    let mut x112: u32 = 0;
    let mut x113: FqU1 = 0;
    fq_addcarryx_u32(&mut x112, &mut x113, x111, x95, (x109 & 0xa118000));
    let mut x114: u32 = 0;
    let mut x115: FqU1 = 0;
    fq_addcarryx_u32(&mut x114, &mut x115, x113, x97, (x109 & 0xd0000001));
    let mut x116: u32 = 0;
    let mut x117: FqU1 = 0;
    fq_addcarryx_u32(&mut x116, &mut x117, x115, x99, (x109 & 0x59aa76fe));
    let mut x118: u32 = 0;
    let mut x119: FqU1 = 0;
    fq_addcarryx_u32(&mut x118, &mut x119, x117, x101, (x109 & 0x5c37b001));
    let mut x120: u32 = 0;
    let mut x121: FqU1 = 0;
    fq_addcarryx_u32(&mut x120, &mut x121, x119, x103, (x109 & 0x60b44d1e));
    let mut x122: u32 = 0;
    let mut x123: FqU1 = 0;
    fq_addcarryx_u32(&mut x122, &mut x123, x121, x105, (x109 & 0x9a2ca556));
    let mut x124: u32 = 0;
    let mut x125: FqU1 = 0;
    fq_addcarryx_u32(&mut x124, &mut x125, x123, x107, (x109 & 0x12ab655e));
    let mut x126: u32 = 0;
    fq_cmovznz_u32(&mut x126, x3, (arg5[0]), x110);
    let mut x127: u32 = 0;
    fq_cmovznz_u32(&mut x127, x3, (arg5[1]), x112);
    let mut x128: u32 = 0;
    fq_cmovznz_u32(&mut x128, x3, (arg5[2]), x114);
    let mut x129: u32 = 0;
    fq_cmovznz_u32(&mut x129, x3, (arg5[3]), x116);
    let mut x130: u32 = 0;
    fq_cmovznz_u32(&mut x130, x3, (arg5[4]), x118);
    let mut x131: u32 = 0;
    fq_cmovznz_u32(&mut x131, x3, (arg5[5]), x120);
    let mut x132: u32 = 0;
    fq_cmovznz_u32(&mut x132, x3, (arg5[6]), x122);
    let mut x133: u32 = 0;
    fq_cmovznz_u32(&mut x133, x3, (arg5[7]), x124);
    let x134: FqU1 = ((x34 & (0x1 as u32)) as FqU1);
    let mut x135: u32 = 0;
    fq_cmovznz_u32(&mut x135, x134, (0x0 as u32), x7);
    let mut x136: u32 = 0;
    fq_cmovznz_u32(&mut x136, x134, (0x0 as u32), x8);
    let mut x137: u32 = 0;
    fq_cmovznz_u32(&mut x137, x134, (0x0 as u32), x9);
    let mut x138: u32 = 0;
    fq_cmovznz_u32(&mut x138, x134, (0x0 as u32), x10);
    let mut x139: u32 = 0;
    fq_cmovznz_u32(&mut x139, x134, (0x0 as u32), x11);
    let mut x140: u32 = 0;
    fq_cmovznz_u32(&mut x140, x134, (0x0 as u32), x12);
    let mut x141: u32 = 0;
    fq_cmovznz_u32(&mut x141, x134, (0x0 as u32), x13);
    let mut x142: u32 = 0;
    fq_cmovznz_u32(&mut x142, x134, (0x0 as u32), x14);
    let mut x143: u32 = 0;
    fq_cmovznz_u32(&mut x143, x134, (0x0 as u32), x15);
    let mut x144: u32 = 0;
    let mut x145: FqU1 = 0;
    fq_addcarryx_u32(&mut x144, &mut x145, 0x0, x34, x135);
    let mut x146: u32 = 0;
    let mut x147: FqU1 = 0;
    fq_addcarryx_u32(&mut x146, &mut x147, x145, x35, x136);
    let mut x148: u32 = 0;
    let mut x149: FqU1 = 0;
    fq_addcarryx_u32(&mut x148, &mut x149, x147, x36, x137);
    let mut x150: u32 = 0;
    let mut x151: FqU1 = 0;
    fq_addcarryx_u32(&mut x150, &mut x151, x149, x37, x138);
    let mut x152: u32 = 0;
    let mut x153: FqU1 = 0;
    fq_addcarryx_u32(&mut x152, &mut x153, x151, x38, x139);
    let mut x154: u32 = 0;
    let mut x155: FqU1 = 0;
    fq_addcarryx_u32(&mut x154, &mut x155, x153, x39, x140);
    let mut x156: u32 = 0;
    let mut x157: FqU1 = 0;
    fq_addcarryx_u32(&mut x156, &mut x157, x155, x40, x141);
    let mut x158: u32 = 0;
    let mut x159: FqU1 = 0;
    fq_addcarryx_u32(&mut x158, &mut x159, x157, x41, x142);
    let mut x160: u32 = 0;
    let mut x161: FqU1 = 0;
    fq_addcarryx_u32(&mut x160, &mut x161, x159, x42, x143);
    let mut x162: u32 = 0;
    fq_cmovznz_u32(&mut x162, x134, (0x0 as u32), x43);
    let mut x163: u32 = 0;
    fq_cmovznz_u32(&mut x163, x134, (0x0 as u32), x44);
    let mut x164: u32 = 0;
    fq_cmovznz_u32(&mut x164, x134, (0x0 as u32), x45);
    let mut x165: u32 = 0;
    fq_cmovznz_u32(&mut x165, x134, (0x0 as u32), x46);
    let mut x166: u32 = 0;
    fq_cmovznz_u32(&mut x166, x134, (0x0 as u32), x47);
    let mut x167: u32 = 0;
    fq_cmovznz_u32(&mut x167, x134, (0x0 as u32), x48);
    let mut x168: u32 = 0;
    fq_cmovznz_u32(&mut x168, x134, (0x0 as u32), x49);
    let mut x169: u32 = 0;
    fq_cmovznz_u32(&mut x169, x134, (0x0 as u32), x50);
    let mut x170: u32 = 0;
    let mut x171: FqU1 = 0;
    fq_addcarryx_u32(&mut x170, &mut x171, 0x0, x126, x162);
    let mut x172: u32 = 0;
    let mut x173: FqU1 = 0;
    fq_addcarryx_u32(&mut x172, &mut x173, x171, x127, x163);
    let mut x174: u32 = 0;
    let mut x175: FqU1 = 0;
    fq_addcarryx_u32(&mut x174, &mut x175, x173, x128, x164);
    let mut x176: u32 = 0;
    let mut x177: FqU1 = 0;
    fq_addcarryx_u32(&mut x176, &mut x177, x175, x129, x165);
    let mut x178: u32 = 0;
    let mut x179: FqU1 = 0;
    fq_addcarryx_u32(&mut x178, &mut x179, x177, x130, x166);
    let mut x180: u32 = 0;
    let mut x181: FqU1 = 0;
    fq_addcarryx_u32(&mut x180, &mut x181, x179, x131, x167);
    let mut x182: u32 = 0;
    let mut x183: FqU1 = 0;
    fq_addcarryx_u32(&mut x182, &mut x183, x181, x132, x168);
    let mut x184: u32 = 0;
    let mut x185: FqU1 = 0;
    fq_addcarryx_u32(&mut x184, &mut x185, x183, x133, x169);
    let mut x186: u32 = 0;
    let mut x187: FqU1 = 0;
    fq_subborrowx_u32(&mut x186, &mut x187, 0x0, x170, (0x1 as u32));
    let mut x188: u32 = 0;
    let mut x189: FqU1 = 0;
    fq_subborrowx_u32(&mut x188, &mut x189, x187, x172, 0xa118000);
    let mut x190: u32 = 0;
    let mut x191: FqU1 = 0;
    fq_subborrowx_u32(&mut x190, &mut x191, x189, x174, 0xd0000001);
    let mut x192: u32 = 0;
    let mut x193: FqU1 = 0;
    fq_subborrowx_u32(&mut x192, &mut x193, x191, x176, 0x59aa76fe);
    let mut x194: u32 = 0;
    let mut x195: FqU1 = 0;
    fq_subborrowx_u32(&mut x194, &mut x195, x193, x178, 0x5c37b001);
    let mut x196: u32 = 0;
    let mut x197: FqU1 = 0;
    fq_subborrowx_u32(&mut x196, &mut x197, x195, x180, 0x60b44d1e);
    let mut x198: u32 = 0;
    let mut x199: FqU1 = 0;
    fq_subborrowx_u32(&mut x198, &mut x199, x197, x182, 0x9a2ca556);
    let mut x200: u32 = 0;
    let mut x201: FqU1 = 0;
    fq_subborrowx_u32(&mut x200, &mut x201, x199, x184, 0x12ab655e);
    let mut x202: u32 = 0;
    let mut x203: FqU1 = 0;
    fq_subborrowx_u32(&mut x202, &mut x203, x201, (x185 as u32), (0x0 as u32));
    let mut x204: u32 = 0;
    let mut x205: FqU1 = 0;
    fq_addcarryx_u32(&mut x204, &mut x205, 0x0, x6, (0x1 as u32));
    let x206: u32 = ((x144 >> 1) | ((x146 << 31) & 0xffffffff));
    let x207: u32 = ((x146 >> 1) | ((x148 << 31) & 0xffffffff));
    let x208: u32 = ((x148 >> 1) | ((x150 << 31) & 0xffffffff));
    let x209: u32 = ((x150 >> 1) | ((x152 << 31) & 0xffffffff));
    let x210: u32 = ((x152 >> 1) | ((x154 << 31) & 0xffffffff));
    let x211: u32 = ((x154 >> 1) | ((x156 << 31) & 0xffffffff));
    let x212: u32 = ((x156 >> 1) | ((x158 << 31) & 0xffffffff));
    let x213: u32 = ((x158 >> 1) | ((x160 << 31) & 0xffffffff));
    let x214: u32 = ((x160 & 0x80000000) | (x160 >> 1));
    let mut x215: u32 = 0;
    fq_cmovznz_u32(&mut x215, x84, x67, x51);
    let mut x216: u32 = 0;
    fq_cmovznz_u32(&mut x216, x84, x69, x53);
    let mut x217: u32 = 0;
    fq_cmovznz_u32(&mut x217, x84, x71, x55);
    let mut x218: u32 = 0;
    fq_cmovznz_u32(&mut x218, x84, x73, x57);
    let mut x219: u32 = 0;
    fq_cmovznz_u32(&mut x219, x84, x75, x59);
    let mut x220: u32 = 0;
    fq_cmovznz_u32(&mut x220, x84, x77, x61);
    let mut x221: u32 = 0;
    fq_cmovznz_u32(&mut x221, x84, x79, x63);
    let mut x222: u32 = 0;
    fq_cmovznz_u32(&mut x222, x84, x81, x65);
    let mut x223: u32 = 0;
    fq_cmovznz_u32(&mut x223, x203, x186, x170);
    let mut x224: u32 = 0;
    fq_cmovznz_u32(&mut x224, x203, x188, x172);
    let mut x225: u32 = 0;
    fq_cmovznz_u32(&mut x225, x203, x190, x174);
    let mut x226: u32 = 0;
    fq_cmovznz_u32(&mut x226, x203, x192, x176);
    let mut x227: u32 = 0;
    fq_cmovznz_u32(&mut x227, x203, x194, x178);
    let mut x228: u32 = 0;
    fq_cmovznz_u32(&mut x228, x203, x196, x180);
    let mut x229: u32 = 0;
    fq_cmovznz_u32(&mut x229, x203, x198, x182);
    let mut x230: u32 = 0;
    fq_cmovznz_u32(&mut x230, x203, x200, x184);
    *out1 = x204;
    out2[0] = x7;
    out2[1] = x8;
    out2[2] = x9;
    out2[3] = x10;
    out2[4] = x11;
    out2[5] = x12;
    out2[6] = x13;
    out2[7] = x14;
    out2[8] = x15;
    out3[0] = x206;
    out3[1] = x207;
    out3[2] = x208;
    out3[3] = x209;
    out3[4] = x210;
    out3[5] = x211;
    out3[6] = x212;
    out3[7] = x213;
    out3[8] = x214;
    out4[0] = x215;
    out4[1] = x216;
    out4[2] = x217;
    out4[3] = x218;
    out4[4] = x219;
    out4[5] = x220;
    out4[6] = x221;
    out4[7] = x222;
    out5[0] = x223;
    out5[1] = x224;
    out5[2] = x225;
    out5[3] = x226;
    out5[4] = x227;
    out5[5] = x228;
    out5[6] = x229;
    out5[7] = x230;
}
